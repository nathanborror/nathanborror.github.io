{"version":"https://jsonfeed.org/version/1.1","title":"Nathan Borror","home_page_url":"https://nathan.run/","feed_url":"https://nathan.run/posts/2013/index.json","authors":[{"name":"Nathan Borror","url":"https://nathan.run"}],"items":[{"title":"My experience learning iOS","date_published":"2013-10-09T00:00:00-0800","date_modified":"2013-10-09T00:00:00-0800","id":"https://nathan.run/2013/my-experience-learning-ios/","url":"https://nathan.run/2013/my-experience-learning-ios/","content_html":"\u003cp\u003eTwice while living in Kansas I attempted to learn Objective-C and Cocoa. Getting past the first few chapters was pretty mind numbing. It didn’t really have anything to do with the difficulty curve. I already knew other languages—Python, Javascript—and didn’t really have a reason to learn something else.\u003c/p\u003e\n\u003cp\u003eThe third time I tried was early 2012 when I started reading \u003ca href=\"http://www.amazon.com/dp/0321821521/\"\u003eiOS Programming\u003c/a\u003e. This time I needed a project or I’d fail yet again. Picking a project at the time was pretty easy. My friends and I were having fun with Snapchat but there were some things I wanted to do differently so I spec’d a few things out and used it as my starter project.\u003c/p\u003e\n\u003cp\u003eEvery morning I’d sit on my little balcony with an espresso and this book. First I’d read through a couple chapters then I’d read through each one again with my laptop to build out the examples. This learn then do process turned out to be the best way work through the book.\u003c/p\u003e\n\u003cp\u003eOnce I felt comfortable implementing parts of my side-project I would build out the inbox then the camera flow. The chapter on Archiving taught me how to save content so the data wouldn’t disappear when the app was force-quit. It took me a few months to get to a place where I had something I could actually use. Over some coffee one Saturday I used \u003ca href=\"http://www.raywenderlich.com/32960/apple-push-notification-services-in-ios-6-tutorial-part-1\"\u003ethis tutorial\u003c/a\u003e to learn how to do push notifications and adapted \u003ca href=\"http://nathan.run/posts/2012/push.html\"\u003ethis\u003c/a\u003e the tutorial to use Python instead of PHP. That was fun!\u003c/p\u003e\n\u003cp\u003eLater in the year some friends found out about my little side project and we decided it would be fun to build out and share with more people. It came together \u003cstrong\u003every\u003c/strong\u003e quickly and we learned a lot along the way. We called it \u003ca href=\"https://itunes.apple.com/us/app/facebook-poke/id588594730\"\u003ePoke\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLately I’ve been spending most of my time building out little prototypes as a means to test out ideas for other projects. Mastering Views and gaining a solid understanding of animation has made it easier to express different interactions. Creating \u003ca href=\"https://github.com/nathanborror/Xcode-Snippets\"\u003esnippets\u003c/a\u003e to fit my workflow turned out to reduce a lot of repetitive typing and save time. Sharing prototypes isn’t easy though, the best thing out there is \u003ca href=\"https://github.com/search?l=Objective-C\u0026amp;q=%40nathanborror\u0026amp;ref=searchresults\u0026amp;type=Repositories\"\u003ethis\u003c/a\u003e but it requires people to have a developer account and a basic understanding of Xcode. It would be great to point people to a URL so they could download an app just as easy as loading a webpage.\u003c/p\u003e\n\u003cp\u003eIt’s admittedly not the easiest way to build prototypes but it’s more fun than anything else I’ve used in the past. If you’re at all curious and have something you want to build you shouldn’t be afraid to learn iOS.\u003c/p\u003e\n"},{"title":"Obsolescence","date_published":"2013-04-27T00:00:00-0800","date_modified":"2013-04-27T00:00:00-0800","id":"https://nathan.run/2013/obsolescence/","url":"https://nathan.run/2013/obsolescence/","content_html":"\u003cp\u003eWe’ve witnessed a lot of products in our lifetimes. Some have faded away without even realizing it. Products like fax machines, AOL, desktop computers, atlases, home telephones. Sure, some of us still use these but they’ve all been replaced with better alternatives.\u003c/p\u003e\n\u003cp\u003eThe best companies and people are capable of predicting when these shifts happen — some even have the capacity to obsolesce their own products. They understand if they don’t, someone else will. It takes creativity to look at what we consider state-of-the-art and question its future position in the world.\u003c/p\u003e\n\u003cp\u003eTake any product and ask yourself, “what would the world be like if this product was replaced by something better?” Here’s an easy example: the laptop. The laptop singlehandedly crushed the desktop computer — who uses a desktop computer? The laptop clearly won, and for very obvious reasons. Now lets imagine it’s 2020 and the laptop is dead — no one needs them anymore — everyone is using tablets! iPads are already demonstrating an efficiency at general tasks people once performed on their laptop so this sounds like an easy bet.\u003c/p\u003e\n\u003cp\u003eHere’s where the thought experiment gets challenging. We now have to ask ourselves, “how did this transition fully materialize?” Today tablets get you about 80% of the way with most tasks. How did the 20% make itself accessible to this form? It’s probably safe to say the remaining tasks are a rats nest of edge-cases, situations that span a multitude of professions. However, there is one very important task which can’t go unnoticed: application development. You can’t have a world without laptops if you depend on them for driving the development of new software on tablets. Following this logic further, you can’t have this world without advancing the process of programming, without breaking new ground in how we build software. If you want to live in a world where laptops are truly unnecessary then you have to create an environment in which your product lacks any dependancies on its predecessor. It must offer a better and more compelling experience than any pervious offering.\u003c/p\u003e\n\u003cp\u003eWe could probably spend hours pondering a transition like the one above or we could plan for it. What products do you depend on today? When and how will they become obsolete? Will what you’re working on be a contributing factor in their demise? Are you willing to usher in these transitions?\u003c/p\u003e\n"},{"title":"State Machine","date_published":"2013-03-03T00:00:00-0800","date_modified":"2013-03-03T00:00:00-0800","id":"https://nathan.run/2013/state-machine/","url":"https://nathan.run/2013/state-machine/","content_html":"\u003cp\u003eLast year Philips introduced \u003ca href=\"http://www.meethue.com/\"\u003eHue\u003c/a\u003e, a dead simple way to automate all your home lighting. After living with it for a few months and  buying into Sonos — a wireless multi-room audio setup—I\u0026rsquo;m beginning to realize how accessible home automation is becoming. They\u0026rsquo;ve both forgotten one thing though, automation.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAutomation is the use of machines, control systems and information technologies to optimize productivity in the production of goods and delivery of services. — Wikipedia\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe only real innovation Philips has made is the ability to turn all my lights on and off from a single source, my phone. This is definitely an improvement but unnecessary. Same for Sonos, pausing at my door while juggling two apps to turn off music and lights does not live up to the term, “automation.”\u003c/p\u003e\n\u003cp\u003eAround 2003 I had a Sony Ericsson phone along with a piece of software called \u003ca href=\"http://www.salling.com/clicker/mac/index.php\"\u003eSalling Clicker\u003c/a\u003e. At the time you could do some pretty cool tricks, one of which was pause iTunes when you and your phone walked far enough away from your computer. It was pretty buggy and never ended up being useful but they had the right idea a decade ago.\u003c/p\u003e\n\u003cp\u003ePhysical awareness coupled with a sense of state is key to real automation. A lot of it boils down to just knowing when to turn something on or off. All we really need is an API which could tell a system when I\u0026rsquo;m at work, home, running, walking, traveling, or at a stand - still. Then systems could react accordingly without any input.\u003c/p\u003e\n"},{"title":"Today","date_published":"2013-01-12T00:00:00-0800","date_modified":"2013-01-12T00:00:00-0800","id":"https://nathan.run/2013/today/","url":"https://nathan.run/2013/today/","content_html":"\u003cp\u003eI\u0026rsquo;ve never been fond of arbitrary markers in time. Holidays, birthdays, anniversaries, they all seem odd to me and I\u0026rsquo;ve never been one to celebrate them. Every day should be special and accomplishments, small and large should be relished, not random days.\u003c/p\u003e\n\u003cp\u003eAs you would correctly suspect I don\u0026rsquo;t do resolutions. But I do think constantly about a question Buckminster Fuller used to ask his grandson, \u0026ldquo;What is the most important thing we could be thinking about today?\u0026rdquo;\u003c/p\u003e\n"}]}