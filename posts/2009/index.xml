<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2009 on Nathan Borror</title><link>https://nathan.run/posts/2009/</link><description>Recent content in 2009 on Nathan Borror</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 31 Dec 2009 09:31:04 -0800</lastBuildDate><atom:link href="https://nathan.run/posts/2009/index.xml" rel="self" type="application/rss+xml"/><item><title>Less is more</title><link>https://nathan.run/posts/2009/less-more/</link><pubDate>Tue, 01 Dec 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/less-more/</guid><description>Hopefully you read my previous post ../sass-isnt-me about Sass and CSS preprocessors and felt my angst toward learning a new syntax. I&amp;rsquo;ve been using LessCSS for about a week and I&amp;rsquo;m really impressed. For starters, no new syntax to learn. This is simply an augmentation of existing CSS syntax. You get mixins, nested rules, and most importantly, variables. You also get operations but I&amp;rsquo;ve yet to find them that useful. Here&amp;rsquo;s my critique:</description></item><item><title>Sass isn't for me</title><link>https://nathan.run/posts/2009/sass-isnt-me/</link><pubDate>Mon, 30 Nov 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/sass-isnt-me/</guid><description>I&amp;rsquo;ve been window shopping the CSS preprocessor world the last week or so. Sass seems to be everyone&amp;rsquo;s new bicycle but it hasn&amp;rsquo;t won me over and here&amp;rsquo;s why:
It&amp;rsquo;s a new syntax that I don&amp;rsquo;t want to learn or support. I have an awesome job where we often hire new people and (hopefully) acquire new clients and the last thing I want is the added friction of having to teach (and sell) a new styling syntax.</description></item><item><title>Curiosity rewarded the cat</title><link>https://nathan.run/posts/2009/curiosity-rewarded-cat/</link><pubDate>Fri, 20 Nov 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/curiosity-rewarded-cat/</guid><description>Good user experience is often found in the most unassuming places. We have a new restaurant opening in my neighborhood this week and I&amp;rsquo;ve been anticipating their arrival for a few weeks now. They officially open today but two days ago revealed a very important lesson in user experience.
Two days ago I was walking down the street this new restaurant is on to get lunch from a neighboring location. The lights were on and it looked like people were ordering and eating inside before their scheduled opening.</description></item><item><title>Interface harmony</title><link>https://nathan.run/posts/2009/interface-harmony/</link><pubDate>Sun, 25 Oct 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/interface-harmony/</guid><description>Interface consistency is one of those things that, if done correctly, should go unnoticed. I&amp;rsquo;ve slowly been working on a new interface for a side project and thought it&amp;rsquo;d be a treat to share my approach.
Interfaces evolve based on the needs of people using them. Each task may require a different element. Common elements include buttons, dialogs, drop-downs, select boxes, checkboxes, input fields, etc. These elements are like notes in a composition seeking harmony.</description></item><item><title>Working with Python and RabbitMQ</title><link>https://nathan.run/posts/2009/working-django-and-rabbitmq/</link><pubDate>Wed, 20 May 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/working-django-and-rabbitmq/</guid><description>I recently installed RabbitMQ to handle some message queuing needs at Readernaut and thought I&amp;rsquo;d share how everything came together. If you&amp;rsquo;d like to learn more about RabbitMQ please read this.
To use RabbitMQ with python you need py-amqplib because Rabbit uses the AMQP standard. To make amqplib a little easier to use I needed a simple script that did three things:
Easy way to connect to RabbitMQ. Easy way to pull stuff out of the queue.</description></item><item><title>Capturing content in Django templates</title><link>https://nathan.run/posts/2009/capturing-content-django-templates/</link><pubDate>Sat, 28 Feb 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/capturing-content-django-templates/</guid><description>As a template designer there are times when you have structural code surrounding a block which is waiting on content from a child template. It may look something like:
&amp;lt;div class=&amp;#34;content_title&amp;#34;&amp;gt; {% block content_title %}{% endblock %} &amp;lt;/div&amp;gt; Sometimes this block is never filled so ideally I want the DIV element in this case gone. This isn&amp;rsquo;t easy because there&amp;rsquo;s no way to know whether content is headed towards the block so one solution that I&amp;rsquo;ve used is:</description></item></channel></rss>