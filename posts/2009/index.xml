<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Nathan Borror</title><link rel="alternate" type="text/html" href="https://nathan.run/"/><link rel="self" type="application/atom+xml" href="https://nathan.run/posts/2009/index.xml"/><rights>Copyright Â© 2022, Nathan Borror</rights><updated>2009-12-31T09:31:04-0800</updated><entry><title>Less is more</title><link rel="related" type="text/html" href="https://nathan.run/2009/less-is-more/"/><published>2009-12-01T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2009/less-is-more/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Hopefully you read my previous post ../sass-isnt-me about Sass and CSS preprocessors and felt my angst toward learning a new syntax. I&rsquo;ve been using <a href="http://lesscss.org">LessCSS</a> for about a week and I&rsquo;m really impressed. For starters, no new syntax to learn. This is simply an augmentation of existing CSS syntax. You get mixins, nested rules, and most importantly, variables. You also get operations but I&rsquo;ve yet to find them that useful. Here&rsquo;s my critique:</p>
<p>Nested rules are so natural. CSS should have worked like this all along:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">a</span> {
  <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#ddd</span>;
  <span style="color:#960050;background-color:#1e0010">:hover</span> <span style="color:#960050;background-color:#1e0010">{</span>
    <span style="color:#66d9ef">color</span>: <span style="color:#ae81ff">#999</span>;
  }
<span style="color:#960050;background-color:#1e0010">}</span>
</code></pre></div><p>Compile time is pretty slow compared to Sass. This kinda sucks when you&rsquo;re in a flow, needing to see a change and having to wait 4-5 seconds for the new file. If you install the TextMate bundle it&rsquo;ll automatically compile on save which is handy.</p>
<p>Variables are worth every penny:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">@<span style="color:#66d9ef">borders</span><span style="color:#f92672">:</span> #ddd;

<span style="color:#f92672">div</span> {
  <span style="color:#66d9ef">border</span>: <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span> <span style="color:#f92672">@</span>borders;
}
</code></pre></div><p>That said, I wish they had taken into consideration <a href="http://disruptive-innovations.com/zoo/cssvariables/">David Hyatt and Daniel Glazman&rsquo;s CSS Variable proposal</a> since it&rsquo;s probably the closest thing to future reality.</p>
<p>There doesn&rsquo;t seem to be a way to access variables across imported stylesheets. I ended up importing a variables file on every page and my compressor removes the redundant generated styles but this is a temporary hack that I hope gets fixed.</p>
<p>Less really needs a decent TextMate syntax highlighter. I&rsquo;m hoping to set aside some time this weekend to see if I can contribute to this.</p>
<p>While I would love to say <code>border-radius: 4px;</code> and have it compile with the <code>-webkit</code>, and <code>-moz</code> equivalent, the syntax enables enough abstraction so you can create the following mixin:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">border-radius</span> <span style="color:#f92672">(</span>@<span style="color:#66d9ef">radius</span><span style="color:#f92672">=</span><span style="color:#f92672">4px</span><span style="color:#f92672">)</span> {
  <span style="color:#f92672">-webkit-border-radius</span><span style="color:#f92672">:</span> @<span style="color:#66d9ef">radius</span>;
  <span style="color:#f92672">-moz-border-radius</span><span style="color:#f92672">:</span> @<span style="color:#66d9ef">radius</span>;
  <span style="color:#f92672">border-radius</span><span style="color:#f92672">:</span> @<span style="color:#66d9ef">radius</span>;
}

<span style="color:#f92672">div</span> {
  <span style="color:#960050;background-color:#1e0010">.border-radius(8px)</span>;
}
</code></pre></div><p>In conclusion this is the most intuitive preprocessor I&rsquo;ve found. The syntax additions fit right in with native language and teaching it is a breeze. If you get the itch to contribute head on over to <a href="http://github.com/cloudhead/less">http://github.com/cloudhead/less</a></p>
]]></content></entry><entry><title>Sass isn't for me</title><link rel="related" type="text/html" href="https://nathan.run/2009/sass-isnt-for-me/"/><published>2009-11-30T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2009/sass-isnt-for-me/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>I&rsquo;ve been window shopping the CSS preprocessor world the last week or so. <a href="http://sass-lang.com">Sass</a> seems to be everyone&rsquo;s new bicycle but it hasn&rsquo;t won me over and here&rsquo;s why:</p>
<ul>
<li>It&rsquo;s a new syntax that I don&rsquo;t want to learn or support. I have an awesome job where we often hire new people and (hopefully) acquire new clients and the last thing I want is the added friction of having to teach (and sell) a new styling syntax.</li>
<li>It&rsquo;s a terrible idea for a CSS preprocessor to be whitespace sensitive. Don&rsquo;t get me wrong, I love whitespace sensitive languages. It&rsquo;s why I use Python and think YAML is a Zen like experience, however, I&rsquo;m one of those nut jobs that puts properties on a single line. I actually <em>do</em> this for readability. I can scan a document of single line CSS like nobodies business. Sass looks pretty on the tutorial pages restricted to five lines but when 622 lines of CSS balloons to 3,000+ my insides begin to hurt and so does my scroll wheel. A lot of zealots (I kid again) are going to say, &ldquo;But they&rsquo;re going to support native CSS syntax (<a href="http://nex-3.com/posts/83-sass-and-less">http://nex-3.com/posts/83-sass-and-less</a>) like LessCSS!&rdquo; That&rsquo;s great, why? They should have either started with this or not done it at all. Good luck supporting two syntaxes.</li>
<li>Why the frak do I need control directives in CSS? If I&rsquo;m using a @for loop to generate styles I&rsquo;m doing something very wrong. CSS is not a programming language, it&rsquo;s a style language and the preprocessor community should keep that in mind.</li>
</ul>
<p>My rants aside, we can learn a lot from Sass. Variables, mixins, and nested rules are a great idea and lead to cleaner code. Why can&rsquo;t we spice up CSS and make a preprocessor that just does a few things incredibly well? <a href="http://lesscss.org">LessCSS</a> has been a great example of this, but what about a preprocessor that compiles CSS3 down to CSS2? With any luck <strong>the preprocessor community has the potential to greatly influence the CSS language</strong> by showing the W3C how people want to use it. This is a better direction than creating unnecessary friction by devising a completely new syntax for everyone to adopt.</p>
]]></content></entry><entry><title>Curiosity rewarded the cat</title><link rel="related" type="text/html" href="https://nathan.run/2009/curiosity-rewarded-the-cat/"/><published>2009-11-20T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2009/curiosity-rewarded-the-cat/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Good user experience is often found in the most unassuming places. We have a new restaurant opening in my neighborhood this week and I&rsquo;ve been anticipating their arrival for a few weeks now. They officially open today but two days ago revealed a very important lesson in user experience.</p>
<p>Two days ago I was walking down the street this new restaurant is on to get lunch from a neighboring location. The lights were on and it looked like people were ordering and eating inside before their scheduled opening. This of course caught my interest so I took a closer look. The door said something like, &ldquo;Pardon us while we get ready for our grand opening. We hope to see you this Friday.&rdquo; For some reason I ignored the sign and went in anyway. I was greeted by a hostess asking me for my invitation. I had no invitation and said, &ldquo;sorry, I&rsquo;ll come back Friday.&rdquo; She quickly said, &ldquo;that&rsquo;s okay, join us for free lunch tomorrow and bring a friend&rdquo; and she handed me two invitations.</p>
<p>Don&rsquo;t punish curiosity, reward it. This is a great philosophy and something we should keep in the back of our minds when designing user experiences. I didn&rsquo;t walk away from that situation feeling stupid because I ignored the sign that clearly stated they weren&rsquo;t open yet. Instead I walked away excited to a) get to try this new restaurant a day early and b) get a free lunch. It was the kind of first impression any product or service should want to make.</p>
]]></content></entry><entry><title>Interface harmony</title><link rel="related" type="text/html" href="https://nathan.run/2009/interface-harmony/"/><published>2009-10-25T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2009/interface-harmony/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Interface consistency is one of those things that, if done correctly, should go unnoticed. I&rsquo;ve slowly been working on a new interface for a side project and thought it&rsquo;d be a treat to share my approach.</p>
<p>Interfaces evolve based on the needs of people using them. Each task may require a different element. Common elements include buttons, dialogs, drop-downs, select boxes, checkboxes, input fields, etc. These elements are like notes in a composition seeking harmony.</p>
<p>To ensure harmony I&rsquo;ll arrange my elements on a single canvas and show the different levels of interaction. By doing this I can easily spot inconstancies. This also helps build a style guide for future elements and interaction.</p>
<p>This is not groundbreaking by any means. Just thought I&rsquo;d share and help promote the practice :)</p>
]]></content></entry><entry><title>Working with Python and RabbitMQ</title><link rel="related" type="text/html" href="https://nathan.run/2009/working-with-python-and-rabbitmq/"/><published>2009-05-20T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2009/working-with-python-and-rabbitmq/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>I recently installed RabbitMQ to handle some message queuing needs at Readernaut
and thought I&rsquo;d share how everything came together. If you&rsquo;d like to learn more about RabbitMQ please <a href="http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/">read this.</a></p>
<p>To use RabbitMQ with python you need <a href="http://barryp.org/software/py-amqplib/">py-amqplib</a> because Rabbit uses the AMQP standard. To make amqplib a little easier to use I needed a simple script that did three things:</p>
<ul>
<li>Easy way to connect to RabbitMQ.</li>
<li>Easy way to pull stuff out of the queue.</li>
<li>Easy way to throw stuff into the queue.</li>
</ul>
<p><a href="http://github.com/ask/carrot">This project</a> which handles all this and much more but it&rsquo;s a little too complex for what I&rsquo;m doing. All I needed was something very small, straightforward, and EASY.</p>
<p>After staring at Carrot for a few days I decided to distill down what I needed
into a single script I&rsquo;m calling Flopsy. So here we go:</p>
<h2 id="step-1-set-global-variables">Step 1: Set global variables:</h2>
<!-- raw HTML omitted -->
<p>And there we go! Flopsy weighs in at under 80 lines of code and it can be found on <a href="http://github.com/nathanborror/flopsy">Github.</a> Most of the above will make a lot more sense after reading <a href="http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/">Rabbits and Warrens</a> and investigating RabbitMQ.</p>
<h2 id="update">Update</h2>
<p>I just realized, this isn&rsquo;t at all Django specific so my title is a little misleading (changing). That said, you could most certainly use Flopsy with straight up Python :)</p>
]]></content></entry><entry><title>Capturing content in Django templates</title><link rel="related" type="text/html" href="https://nathan.run/2009/capturing-content-in-django-templates/"/><published>2009-02-28T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2009/capturing-content-in-django-templates/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>As a template designer there are times when you have structural code surrounding a block which is waiting on content from a child template. It may look something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content_title&#34;</span>&gt;
  {% block content_title %}{% endblock %}
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>Sometimes this block is never filled so ideally I want the <code>DIV</code> element in this case gone. This isn&rsquo;t easy because there&rsquo;s no way to know whether content is headed towards the block so one solution that I&rsquo;ve used is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% block content_title_wrapper %}
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content_title&#34;</span>&gt;
    {% block content_title %}{% endblock %}
  &lt;/<span style="color:#f92672">div</span>&gt;
{% endblock %}
</code></pre></div><p>This requires me to make an empty call to a wrapper block in a child template to clear out the div element. It&rsquo;s obviously gross because I end up with empty block calls all over child templates. Yuk!</p>
<p>Django community to the rescue! After asking around and some help from <a href="http://lazypython.blogspot.com/">Alex</a>, <a href="http://ericholscher.com/">Eric</a>, and <a href="http://traviscline.com/blog/">Travis</a> we stumbled upon <a href="http://www.djangosnippets.org/snippets/545/">Django Capture</a>, a django snippet created by kcarnold (Kenneth Arnold). Capture essentially takes a blob of content and makes it into a variable for you like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% capture as content_title %}
  {% block content_title %}{% endblock %}
{% endcapture %}

{% if content_title %}
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content_title&#34;</span>&gt;{{ content_title }}&lt;/<span style="color:#f92672">div</span>&gt;
{% endif %}
</code></pre></div><p>This eliminates the need for all those crufty wrappers in child templates. I&rsquo;m sure there are other uses for this too, one being the ability to print content multiple times on the page like pagination before and after lists. Kenneth originally used the example of capturing content for translations.</p>
<p>There&rsquo;s a <a href="http://code.djangoproject.com/ticket/6378">ticket open</a> with some thoughts on adding this functionality to the existing <code>with</code> tag which makes perfect sense. It&rsquo;d be great if we could hash this out and get it into Django proper because I&rsquo;m sure others would find it useful.</p>
]]></content></entry></feed>