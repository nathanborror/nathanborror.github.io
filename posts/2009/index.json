{"version":"https://jsonfeed.org/version/1.1","title":"Nathan Borror","home_page_url":"https://nathan.run/","feed_url":"https://nathan.run/posts/2009/index.json","authors":[{"name":"Nathan Borror","url":"https://nathan.run"}],"items":[{"title":"Less is more","date_published":"2009-12-01T00:00:00-0800","date_modified":"2009-12-01T00:00:00-0800","id":"https://nathan.run/2009/less-is-more/","url":"https://nathan.run/2009/less-is-more/","content_html":"\u003cp\u003eHopefully you read my previous post ../sass-isnt-me about Sass and CSS preprocessors and felt my angst toward learning a new syntax. I\u0026rsquo;ve been using \u003ca href=\"http://lesscss.org\"\u003eLessCSS\u003c/a\u003e for about a week and I\u0026rsquo;m really impressed. For starters, no new syntax to learn. This is simply an augmentation of existing CSS syntax. You get mixins, nested rules, and most importantly, variables. You also get operations but I\u0026rsquo;ve yet to find them that useful. Here\u0026rsquo;s my critique:\u003c/p\u003e\n\u003cp\u003eNested rules are so natural. CSS should have worked like this all along:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n  \u003cspan style=\"color:#66d9ef\"\u003ecolor\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e#ddd\u003c/span\u003e;\n  \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:hover\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e{\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003ecolor\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e#999\u003c/span\u003e;\n  }\n\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCompile time is pretty slow compared to Sass. This kinda sucks when you\u0026rsquo;re in a flow, needing to see a change and having to wait 4-5 seconds for the new file. If you install the TextMate bundle it\u0026rsquo;ll automatically compile on save which is handy.\u003c/p\u003e\n\u003cp\u003eVariables are worth every penny:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e@\u003cspan style=\"color:#66d9ef\"\u003eborders\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e #ddd;\n\n\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e {\n  \u003cspan style=\"color:#66d9ef\"\u003eborder\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esolid\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e@\u003c/span\u003eborders;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat said, I wish they had taken into consideration \u003ca href=\"http://disruptive-innovations.com/zoo/cssvariables/\"\u003eDavid Hyatt and Daniel Glazman\u0026rsquo;s CSS Variable proposal\u003c/a\u003e since it\u0026rsquo;s probably the closest thing to future reality.\u003c/p\u003e\n\u003cp\u003eThere doesn\u0026rsquo;t seem to be a way to access variables across imported stylesheets. I ended up importing a variables file on every page and my compressor removes the redundant generated styles but this is a temporary hack that I hope gets fixed.\u003c/p\u003e\n\u003cp\u003eLess really needs a decent TextMate syntax highlighter. I\u0026rsquo;m hoping to set aside some time this weekend to see if I can contribute to this.\u003c/p\u003e\n\u003cp\u003eWhile I would love to say \u003ccode\u003eborder-radius: 4px;\u003c/code\u003e and have it compile with the \u003ccode\u003e-webkit\u003c/code\u003e, and \u003ccode\u003e-moz\u003c/code\u003e equivalent, the syntax enables enough abstraction so you can create the following mixin:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e.\u003cspan style=\"color:#a6e22e\"\u003eborder-radius\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e@\u003cspan style=\"color:#66d9ef\"\u003eradius\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e4px\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e {\n  \u003cspan style=\"color:#f92672\"\u003e-webkit-border-radius\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e @\u003cspan style=\"color:#66d9ef\"\u003eradius\u003c/span\u003e;\n  \u003cspan style=\"color:#f92672\"\u003e-moz-border-radius\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e @\u003cspan style=\"color:#66d9ef\"\u003eradius\u003c/span\u003e;\n  \u003cspan style=\"color:#f92672\"\u003eborder-radius\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e @\u003cspan style=\"color:#66d9ef\"\u003eradius\u003c/span\u003e;\n}\n\n\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e {\n  \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e.border-radius(8px)\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn conclusion this is the most intuitive preprocessor I\u0026rsquo;ve found. The syntax additions fit right in with native language and teaching it is a breeze. If you get the itch to contribute head on over to \u003ca href=\"http://github.com/cloudhead/less\"\u003ehttp://github.com/cloudhead/less\u003c/a\u003e\u003c/p\u003e\n"},{"title":"Sass isn't for me","date_published":"2009-11-30T00:00:00-0800","date_modified":"2009-11-30T00:00:00-0800","id":"https://nathan.run/2009/sass-isnt-for-me/","url":"https://nathan.run/2009/sass-isnt-for-me/","content_html":"\u003cp\u003eI\u0026rsquo;ve been window shopping the CSS preprocessor world the last week or so. \u003ca href=\"http://sass-lang.com\"\u003eSass\u003c/a\u003e seems to be everyone\u0026rsquo;s new bicycle but it hasn\u0026rsquo;t won me over and here\u0026rsquo;s why:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s a new syntax that I don\u0026rsquo;t want to learn or support. I have an awesome job where we often hire new people and (hopefully) acquire new clients and the last thing I want is the added friction of having to teach (and sell) a new styling syntax.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s a terrible idea for a CSS preprocessor to be whitespace sensitive. Don\u0026rsquo;t get me wrong, I love whitespace sensitive languages. It\u0026rsquo;s why I use Python and think YAML is a Zen like experience, however, I\u0026rsquo;m one of those nut jobs that puts properties on a single line. I actually \u003cem\u003edo\u003c/em\u003e this for readability. I can scan a document of single line CSS like nobodies business. Sass looks pretty on the tutorial pages restricted to five lines but when 622 lines of CSS balloons to 3,000+ my insides begin to hurt and so does my scroll wheel. A lot of zealots (I kid again) are going to say, \u0026ldquo;But they\u0026rsquo;re going to support native CSS syntax (\u003ca href=\"http://nex-3.com/posts/83-sass-and-less\"\u003ehttp://nex-3.com/posts/83-sass-and-less\u003c/a\u003e) like LessCSS!\u0026rdquo; That\u0026rsquo;s great, why? They should have either started with this or not done it at all. Good luck supporting two syntaxes.\u003c/li\u003e\n\u003cli\u003eWhy the frak do I need control directives in CSS? If I\u0026rsquo;m using a @for loop to generate styles I\u0026rsquo;m doing something very wrong. CSS is not a programming language, it\u0026rsquo;s a style language and the preprocessor community should keep that in mind.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMy rants aside, we can learn a lot from Sass. Variables, mixins, and nested rules are a great idea and lead to cleaner code. Why can\u0026rsquo;t we spice up CSS and make a preprocessor that just does a few things incredibly well? \u003ca href=\"http://lesscss.org\"\u003eLessCSS\u003c/a\u003e has been a great example of this, but what about a preprocessor that compiles CSS3 down to CSS2? With any luck \u003cstrong\u003ethe preprocessor community has the potential to greatly influence the CSS language\u003c/strong\u003e by showing the W3C how people want to use it. This is a better direction than creating unnecessary friction by devising a completely new syntax for everyone to adopt.\u003c/p\u003e\n"},{"title":"Curiosity rewarded the cat","date_published":"2009-11-20T00:00:00-0800","date_modified":"2009-11-20T00:00:00-0800","id":"https://nathan.run/2009/curiosity-rewarded-the-cat/","url":"https://nathan.run/2009/curiosity-rewarded-the-cat/","content_html":"\u003cp\u003eGood user experience is often found in the most unassuming places. We have a new restaurant opening in my neighborhood this week and I\u0026rsquo;ve been anticipating their arrival for a few weeks now. They officially open today but two days ago revealed a very important lesson in user experience.\u003c/p\u003e\n\u003cp\u003eTwo days ago I was walking down the street this new restaurant is on to get lunch from a neighboring location. The lights were on and it looked like people were ordering and eating inside before their scheduled opening. This of course caught my interest so I took a closer look. The door said something like, \u0026ldquo;Pardon us while we get ready for our grand opening. We hope to see you this Friday.\u0026rdquo; For some reason I ignored the sign and went in anyway. I was greeted by a hostess asking me for my invitation. I had no invitation and said, \u0026ldquo;sorry, I\u0026rsquo;ll come back Friday.\u0026rdquo; She quickly said, \u0026ldquo;that\u0026rsquo;s okay, join us for free lunch tomorrow and bring a friend\u0026rdquo; and she handed me two invitations.\u003c/p\u003e\n\u003cp\u003eDon\u0026rsquo;t punish curiosity, reward it. This is a great philosophy and something we should keep in the back of our minds when designing user experiences. I didn\u0026rsquo;t walk away from that situation feeling stupid because I ignored the sign that clearly stated they weren\u0026rsquo;t open yet. Instead I walked away excited to a) get to try this new restaurant a day early and b) get a free lunch. It was the kind of first impression any product or service should want to make.\u003c/p\u003e\n"},{"title":"Interface harmony","date_published":"2009-10-25T00:00:00-0800","date_modified":"2009-10-25T00:00:00-0800","id":"https://nathan.run/2009/interface-harmony/","url":"https://nathan.run/2009/interface-harmony/","content_html":"\u003cp\u003eInterface consistency is one of those things that, if done correctly, should go unnoticed. I\u0026rsquo;ve slowly been working on a new interface for a side project and thought it\u0026rsquo;d be a treat to share my approach.\u003c/p\u003e\n\u003cp\u003eInterfaces evolve based on the needs of people using them. Each task may require a different element. Common elements include buttons, dialogs, drop-downs, select boxes, checkboxes, input fields, etc. These elements are like notes in a composition seeking harmony.\u003c/p\u003e\n\u003cp\u003eTo ensure harmony I\u0026rsquo;ll arrange my elements on a single canvas and show the different levels of interaction. By doing this I can easily spot inconstancies. This also helps build a style guide for future elements and interaction.\u003c/p\u003e\n\u003cp\u003eThis is not groundbreaking by any means. Just thought I\u0026rsquo;d share and help promote the practice :)\u003c/p\u003e\n"},{"title":"Working with Python and RabbitMQ","date_published":"2009-05-20T00:00:00-0800","date_modified":"2009-05-20T00:00:00-0800","id":"https://nathan.run/2009/working-with-python-and-rabbitmq/","url":"https://nathan.run/2009/working-with-python-and-rabbitmq/","content_html":"\u003cp\u003eI recently installed RabbitMQ to handle some message queuing needs at Readernaut\nand thought I\u0026rsquo;d share how everything came together. If you\u0026rsquo;d like to learn more about RabbitMQ please \u003ca href=\"http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/\"\u003eread this.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTo use RabbitMQ with python you need \u003ca href=\"http://barryp.org/software/py-amqplib/\"\u003epy-amqplib\u003c/a\u003e because Rabbit uses the AMQP standard. To make amqplib a little easier to use I needed a simple script that did three things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEasy way to connect to RabbitMQ.\u003c/li\u003e\n\u003cli\u003eEasy way to pull stuff out of the queue.\u003c/li\u003e\n\u003cli\u003eEasy way to throw stuff into the queue.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"http://github.com/ask/carrot\"\u003eThis project\u003c/a\u003e which handles all this and much more but it\u0026rsquo;s a little too complex for what I\u0026rsquo;m doing. All I needed was something very small, straightforward, and EASY.\u003c/p\u003e\n\u003cp\u003eAfter staring at Carrot for a few days I decided to distill down what I needed\ninto a single script I\u0026rsquo;m calling Flopsy. So here we go:\u003c/p\u003e\n\u003ch2 id=\"step-1-set-global-variables\"\u003eStep 1: Set global variables:\u003c/h2\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eAnd there we go! Flopsy weighs in at under 80 lines of code and it can be found on \u003ca href=\"http://github.com/nathanborror/flopsy\"\u003eGithub.\u003c/a\u003e Most of the above will make a lot more sense after reading \u003ca href=\"http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/\"\u003eRabbits and Warrens\u003c/a\u003e and investigating RabbitMQ.\u003c/p\u003e\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\u003cp\u003eI just realized, this isn\u0026rsquo;t at all Django specific so my title is a little misleading (changing). That said, you could most certainly use Flopsy with straight up Python :)\u003c/p\u003e\n"},{"title":"Capturing content in Django templates","date_published":"2009-02-28T00:00:00-0800","date_modified":"2009-02-28T00:00:00-0800","id":"https://nathan.run/2009/capturing-content-in-django-templates/","url":"https://nathan.run/2009/capturing-content-in-django-templates/","content_html":"\u003cp\u003eAs a template designer there are times when you have structural code surrounding a block which is waiting on content from a child template. It may look something like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;content_title\u0026#34;\u003c/span\u003e\u0026gt;\n  {% block content_title %}{% endblock %}\n\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSometimes this block is never filled so ideally I want the \u003ccode\u003eDIV\u003c/code\u003e element in this case gone. This isn\u0026rsquo;t easy because there\u0026rsquo;s no way to know whether content is headed towards the block so one solution that I\u0026rsquo;ve used is:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e{% block content_title_wrapper %}\n  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;content_title\u0026#34;\u003c/span\u003e\u0026gt;\n    {% block content_title %}{% endblock %}\n  \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n{% endblock %}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis requires me to make an empty call to a wrapper block in a child template to clear out the div element. It\u0026rsquo;s obviously gross because I end up with empty block calls all over child templates. Yuk!\u003c/p\u003e\n\u003cp\u003eDjango community to the rescue! After asking around and some help from \u003ca href=\"http://lazypython.blogspot.com/\"\u003eAlex\u003c/a\u003e, \u003ca href=\"http://ericholscher.com/\"\u003eEric\u003c/a\u003e, and \u003ca href=\"http://traviscline.com/blog/\"\u003eTravis\u003c/a\u003e we stumbled upon \u003ca href=\"http://www.djangosnippets.org/snippets/545/\"\u003eDjango Capture\u003c/a\u003e, a django snippet created by kcarnold (Kenneth Arnold). Capture essentially takes a blob of content and makes it into a variable for you like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e{% capture as content_title %}\n  {% block content_title %}{% endblock %}\n{% endcapture %}\n\n{% if content_title %}\n  \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;content_title\u0026#34;\u003c/span\u003e\u0026gt;{{ content_title }}\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n{% endif %}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis eliminates the need for all those crufty wrappers in child templates. I\u0026rsquo;m sure there are other uses for this too, one being the ability to print content multiple times on the page like pagination before and after lists. Kenneth originally used the example of capturing content for translations.\u003c/p\u003e\n\u003cp\u003eThere\u0026rsquo;s a \u003ca href=\"http://code.djangoproject.com/ticket/6378\"\u003eticket open\u003c/a\u003e with some thoughts on adding this functionality to the existing \u003ccode\u003ewith\u003c/code\u003e tag which makes perfect sense. It\u0026rsquo;d be great if we could hash this out and get it into Django proper because I\u0026rsquo;m sure others would find it useful.\u003c/p\u003e\n"}]}