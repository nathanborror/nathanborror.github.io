{"version":"https://jsonfeed.org/version/1.1","title":"Nathan Borror","home_page_url":"https://nathan.run/","feed_url":"https://nathan.run/posts/2012/index.json","authors":[{"name":"Nathan Borror","url":"https://nathan.run"}],"items":[{"title":"Ghetto Facebook Registration with Django","date_published":"2012-10-08T00:00:00-0800","date_modified":"2012-10-08T00:00:00-0800","id":"https://nathan.run/2012/ghetto-facebook-registration-with-django/","url":"https://nathan.run/2012/ghetto-facebook-registration-with-django/","content_html":"\u003cp\u003eI\u0026rsquo;m going to quickly walk you through how to build a\nserver-side Facebook registration flow with Django. This is really basic and\ndoesn\u0026rsquo;t rely on special libraries aside from httplib2 and urlib which are pretty\nstandard.\u003c/p\u003e\n\u003cp\u003eFirst you need to \u003ca href=\"https://developers.facebook.com/apps\"\u003ecreate an app.\u003c/a\u003e I set my App Domain to \u003ccode\u003elocalhost\u003c/code\u003e and\nSite URL to \u003ccode\u003ehttp://localhost:8000\u003c/code\u003e for development purposes. You\u0026rsquo;ll probably\nneed to do the same if you\u0026rsquo;re using Django\u0026rsquo;s built in development server. Copy\nover your App ID and App Secret into your \u003ccode\u003esettings.py\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eFACEBOOK_APP_ID = 'YOUR_FACEBOOK_APP_ID'\nFACEBOOK_SECRET_KEY = 'YOUR_FACEBOOK_APP_SECRET'\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow lets add a login button to your site, you can put this anywhere:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ui-button\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://www.facebook.com/dialog/oauth?\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e  client_id=YOUR_FACEBOOK_APP_ID\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e  \u0026amp;amp;redirect_uri=http://localhost:8000/facebook/\u0026#34;\u003c/span\u003e\u0026gt;Log In with Facebook\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDon\u0026rsquo;t forget to replace \u003c!-- raw HTML omitted --\u003eYOUR_FACEBOOK_APP_ID\u003c!-- raw HTML omitted --\u003e with your App ID. It\u0026rsquo;s\nokay if this is hardcoded. Just make sure you don\u0026rsquo;t accidentally expose your App\nSecret, this should not be used publicly.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll notice we put \u003ccode\u003ehttp://localhost:8000/facebook/\u003c/code\u003e as our redirect URI in\nthe button above. Now we need to create a view to handle this request because\nFacebook will hand us a \u0026ldquo;code\u0026rdquo; at that location which is what we\u0026rsquo;ll need to\nretrieve an access token for the user, thus completing the process. Add the\nfollowing to your \u003ccode\u003eurls.py\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003eurl(\u003cspan style=\"color:#e6db74\"\u003er\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;^facebook/$\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;views.facebook\u0026#39;\u003c/span\u003e),\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow add the following to your \u003ccode\u003eviews.py\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e httplib2\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e urllib\n\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.http \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e HttpResponseRedirect\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.conf \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e settings\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.contrib.auth.models \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e User\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.contrib.auth \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e authenticate, login\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.utils \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e simplejson \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e json\n\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e profiles.models \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e Profile\n\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efacebook\u003c/span\u003e(request):\n  params \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;client_id\u0026#39;\u003c/span\u003e: settings\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eFACEBOOK_APP_ID,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;redirect_uri\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;http://localhost:8000/registration/facebook/\u0026#39;\u003c/span\u003e,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;client_secret\u0026#39;\u003c/span\u003e: settings\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eFACEBOOK_SECRET_KEY,\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;code\u0026#39;\u003c/span\u003e: request\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eGET[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;code\u0026#39;\u003c/span\u003e]\n  }\n\n  http \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e httplib2\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eHttp(timeout\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e)\n  response, content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e http\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erequest(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;https://graph.facebook.com/oauth/access_token?\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e urllib\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eurlencode(params))\n\n  \u003cspan style=\"color:#75715e\"\u003e# Find access token and expire (this is really gross)\u003c/span\u003e\n  params \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e content\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026amp;\u0026#39;\u003c/span\u003e)\n  ACCESS_TOKEN \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e params[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;=\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n  EXPIRE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e params[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;=\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\n  \u003cspan style=\"color:#75715e\"\u003e# Get basic information about the person\u003c/span\u003e\n  response, content \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e http\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erequest(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;https://graph.facebook.com/me?access_token=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%s\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e ACCESS_TOKEN)\n  data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e json\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eloads(content)\n\n  \u003cspan style=\"color:#75715e\"\u003e# Try to find existing profile, create a new user if one doesn\u0026#39;t exist\u003c/span\u003e\n  \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e:\n    profile \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Profile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget(facebook_uid\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003edata[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;id\u0026#39;\u003c/span\u003e])\n  \u003cspan style=\"color:#66d9ef\"\u003eexcept\u003c/span\u003e Profile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDoesNotExist:\n    user \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e User\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eobjects\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecreate_user(data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e], data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;email\u0026#39;\u003c/span\u003e], data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;id\u0026#39;\u003c/span\u003e])\n    profile \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e user\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget_profile()\n    profile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efacebook_uid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;id\u0026#39;\u003c/span\u003e]\n\n  \u003cspan style=\"color:#75715e\"\u003e# Update token and expire fields on profile\u003c/span\u003e\n  profile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efacebook_access_token \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ACCESS_TOKEN\n  profile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efacebook_access_token_expires \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e EXPIRE\n  profile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esave()\n\n  \u003cspan style=\"color:#75715e\"\u003e# Authenticate and log user in\u003c/span\u003e\n  user \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e authenticate(username\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eprofile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003euser\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eusername, password\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eprofile\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efacebook_uid)\n  login(request, user)\n\n  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e HttpResponseRedirect(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne thing you\u0026rsquo;ll immediately notice is I\u0026rsquo;m importing a Profile model. All you\nneed to do here is create a profiles app that has a single model with a foreign\nkey to a user and some fields to store our access token and when that token\nexpires:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.db \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e models\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e django.contrib.auth.models \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e User\n\n\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProfile\u003c/span\u003e(models\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eModel):\n  user \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eForeignKey(User, unique\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\n  facebook_uid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ePositiveIntegerField(blank\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, null\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n  facebook_access_token \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eCharField(blank\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, max_length\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e255\u003c/span\u003e)\n  facebook_access_token_expires \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ePositiveIntegerField(blank\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e, null\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd then add the following to your settings.py so you can use the \u0026ldquo;get_profile()\u0026rdquo;\nconvenience method on user objects:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eAUTH_PROFILE_MODULE = 'profiles.profile'\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere you have it. A really hacky Facebook registration flow for Django.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSome will probably notice I didn\u0026rsquo;t use the word OAuth anywhere in this post.\nEvery time I see that term my eyes gloss over and my buzzword bullshit detector\nflips on. OAuth is a very simple concept that\u0026rsquo;s often over explained—hopefully\npeople can run through this tutorial and grasp what\u0026rsquo;s happening by just looking\nat the code.\u003c/em\u003e\u003c/p\u003e\n"},{"title":"Setting up Apple Push Notifications","date_published":"2012-09-15T00:00:00-0800","date_modified":"2012-09-15T00:00:00-0800","id":"https://nathan.run/2012/setting-up-apple-push-notifications/","url":"https://nathan.run/2012/setting-up-apple-push-notifications/","content_html":"\u003cp\u003eWhile trying to figure this out I came across \u003ca href=\"http://www.raywenderlich.com/3443/apple-push-notification-services-tutorial-part-12\"\u003ea great article by Matthijs\nHollemans\u003c/a\u003e. I suggest following it if you\u0026rsquo;re interested in an in-depth tutorial. What\nfollows is a more concise version of that article and instead of using PHP I\u0026rsquo;m\nusing a variant of \u003ca href=\"http://www.cktsoi.com/2012/02/sending-apple-push-notification-in-python/\"\u003eJacky Tsoi\u0026rsquo;s Python script\u003c/a\u003e.\nThis is pretty tedious and there are a lot of steps you have to get right in\norder for this to work properly so hang in there.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;re going to need an iOS device, testing pushes cannot be done in the\nsimulator. You\u0026rsquo;ll also need an iOS Developer Program membership and eventually a\nserver but for our purposes we\u0026rsquo;ll just be using your local machine.\u003c/p\u003e\n\u003cp\u003ePayload: Pushes are just JSON sent from a server, a simple example looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e{\n  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;aps\u0026#34;\u003c/span\u003e: {\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;alert\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello world\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;sound\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e,\n    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;badge\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe max size of a push is 256 bytes so don\u0026rsquo;t get carried away—it\u0026rsquo;s good to\nremove all whitespace if you can.\u003c/p\u003e\n\u003ch3 id=\"generate-a-certificate-signing-request\"\u003eGenerate a Certificate Signing Request\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eOpen Keychain and navigate to Keychain Access \u0026gt; Certificate Assistant \u0026gt;\nRequest a Certificate From a Certificate Authority\u003c!-- raw HTML omitted --\u003e\u003c/li\u003e\n\u003cli\u003eEnter your Email, a Common Name \u0026ldquo;PushNotifs\u0026rdquo; (this can be anything you want),\nand check Saved to disk\u003c/li\u003e\n\u003cli\u003eClick Continue and name the file \u0026ldquo;PushNotifs.certSigningRequest\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eFind \u0026ldquo;PushNotifs\u0026rdquo; in the Keys section of Keychain, right click on the private\nkey and choose Export\u003c/li\u003e\n\u003cli\u003eSave the private key as PushNotifsKey.p12 and choose a good passphrase\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"app-id-and-ssl-certificate\"\u003eApp ID and SSL Certificate\u003c/h3\u003e\n\u003cp\u003eWe need an App ID and SSL certificate from \u003ca href=\"https://developer.apple.com/ios/manage/overview/index.action\"\u003eApple\u0026rsquo;s iOS Provisioning Portal\u003c/a\u003e.\nEach push app needs its own App ID, you cannot use a wildcard ID.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eClick App IDs in the iOS Provisioning Portal sidebar and click the New App\nID button\u003c/li\u003e\n\u003cli\u003eEnter \u0026ldquo;PushNotifs\u0026rdquo; as the description and \u0026ldquo;com.nathanborror.PushNotifs\u0026rdquo; as\nthe Bundle Identifier (replace \u0026lsquo;nathanborro\u0026rsquo; with something more appropriate\nfor yourself)\u003c/li\u003e\n\u003cli\u003eAfter clicking Submit click configure next to the App ID we just made on the\nresulting screen\u003c/li\u003e\n\u003cli\u003eCheck \u0026ldquo;Enable for Apple Push Notification service\u0026rdquo; and click configure for\n\u0026ldquo;Development Push SSL Certificate\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eThis first screen walks you through how to generate a Certificate Signing\nRequest which we already did so you can click Continue\u003c/li\u003e\n\u003cli\u003eOn the next screen add the certificate we made earlier,\n\u0026ldquo;PushLook.certSigningRequest\u0026rdquo; and click Generate\u003c/li\u003e\n\u003cli\u003eWait for Apple to generate the SSL certificate then click Continue.\u003c/li\u003e\n\u003cli\u003eDownload the certificate and click Done\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eKeep these three files in a safe place. Development certificates are ephemeral\nso you\u0026rsquo;ll need to renew them every three months. Production certs last a year.\u003c/p\u003e\n\u003ch3 id=\"ssl-pem-creation\"\u003eSSL .pem Creation\u003c/h3\u003e\n\u003cp\u003eWe need to create a .pem file to be used on our server. Using Terminal navigate\nto the folder with these three files in it and convert the .cer file to a .pem\nfile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ openssl x509 -in aps_developer_identity.cer -inform DER -out PushNotifsCert.pem -outform PEM\n\n\u003cspan style=\"color:#75715e\"\u003e# Now convert your private key to a .pem file:\u003c/span\u003e\n$ openssl pkcs12 -nocerts -out PushNotifsKey.pem -in PushNotifsKey.p12\n\n\u003cspan style=\"color:#75715e\"\u003e# You\u0026#39;ll be asked to enter the password we created earlier and then you\u0026#39;ll be prompted to enter a new pass phrase for .pem file. Now combine the certificate and key into a single file\u003c/span\u003e\n$ cat PushNotifsCert.pem PushNotifsKey.pem \u0026gt; ck.pem\n\n\u003cspan style=\"color:#75715e\"\u003e# To test the connection\u003c/span\u003e\n$ openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert PushNotifsCert.pem -key PushNotifsKey.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou should see some output and be able to type a few characters, press enter and\nthe server should disconnect. Openssl will let you know if there was a problem\nconnecting.\u003c/p\u003e\n\u003ch3 id=\"provisioning-profile\"\u003eProvisioning Profile\u003c/h3\u003e\n\u003cp\u003eHead back to Apple\u0026rsquo;s Provisioning Portal, click Provisioning in the sidebar then\nclick New Profile. I chose \u0026ldquo;PushNotifs Development\u0026rdquo; as my Profile Name, check\nyour certificate, choose the App ID we just created, then choose the devices you\nplan to develop with. Refresh the page until you see a Download button next to\nthe profile we just made and click it. Open the downloaded file so it gets added\nto Xcode.\u003c/p\u003e\n\u003ch3 id=\"basic-push-app\"\u003eBasic Push App\u003c/h3\u003e\n\u003cp\u003eStart a new project in Xcode, pick the Empty Application template and name it\nPushNotifs (or whatever you named your App ID earlier, they should match up). in\nAppDelegate.m add the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e- (\u003cspan style=\"color:#66d9ef\"\u003eBOOL\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003eapplication:\u003c/span\u003e(UIApplication \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)application \u003cspan style=\"color:#a6e22e\"\u003edidFinishLaunchingWithOptions:\u003c/span\u003e(NSDictionary \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)launchOptions {\n    self.window \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];\n    \u003cspan style=\"color:#75715e\"\u003e// Override point for customization after application launch.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    self.window.backgroundColor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [UIColor whiteColor];\n    [self.window makeKeyAndVisible];\n\n    \u003cspan style=\"color:#75715e\"\u003e// Let the device know you want to receive push notifications\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e UIRemoteNotificationTypeSound \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e UIRemoteNotificationTypeAlert)];\n\n    UIRemoteNotificationTypeAlert YES;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow try building and running. It won\u0026rsquo;t work in the simulator because it doesn\u0026rsquo;t\nsupport push so you\u0026rsquo;ll need to run this on a device. You should get an alert\nasking you to allow push notifications. Before we move on add the following to\nAppDelegate.m:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e- (\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003eapplication:\u003c/span\u003e(UIApplication \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)application \u003cspan style=\"color:#a6e22e\"\u003edidRegisterForRemoteNotificationsWithDeviceToken:\u003c/span\u003e(NSData \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)deviceToken {\n    NSLog(\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Token: %@\u0026#34;\u003c/span\u003e, deviceToken);\n}\n\n- (\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e)\u003cspan style=\"color:#a6e22e\"\u003eapplication:\u003c/span\u003e(UIApplication \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)application \u003cspan style=\"color:#a6e22e\"\u003edidFailToRegisterForRemoteNotificationsWithError:\u003c/span\u003e(NSError \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e)error {\n    NSLog(\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Failed to aquire push token. Error: %@\u0026#34;\u003c/span\u003e, [error localizedDescription]);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow when you run this you should see a device token in the debug output. Keep\nthis handy for the next portion.\u003c/p\u003e\n\u003ch3 id=\"server-side\"\u003eServer Side\u003c/h3\u003e\n\u003cp\u003eNow we need a simple script we can use on our server that connects to APN and\nsends push notifications for us. I\u0026rsquo;m going to use Python for this but you can\nuse whatever you want. Create a new file called push.py in the same directory\nyou put the ck.pem file we created earlier and write the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"color:#75715e\"\u003e#!/usr/bin/env python\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e ssl\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e json\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e socket\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e struct\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e binascii\n\nTOKEN \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;YOUR_APPS_PUSH_TOKEN\u0026#39;\u003c/span\u003e\nPAYLOAD \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;aps\u0026#39;\u003c/span\u003e: {\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;alert\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Hello Push!\u0026#39;\u003c/span\u003e,\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;sound\u0026#39;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;default\u0026#39;\u003c/span\u003e\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esend_push\u003c/span\u003e(token, payload):\n  \u003cspan style=\"color:#75715e\"\u003e# Your certificate file\u003c/span\u003e\n  cert \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ck.pem\u0026#39;\u003c/span\u003e\n\n  \u003cspan style=\"color:#75715e\"\u003e# APNS development server\u003c/span\u003e\n  apns_address \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;gateway.sandbox.push.apple.com\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2195\u003c/span\u003e)\n\n  \u003cspan style=\"color:#75715e\"\u003e# Use a socket to connect to APNS over SSL\u003c/span\u003e\n  s \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e socket\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esocket()\n  sock \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ssl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrap_socket(s, ssl_version\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003essl\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ePROTOCOL_SSLv3, certfile\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecert)\n  sock\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econnect(apns_address)\n\n  \u003cspan style=\"color:#75715e\"\u003e# Generate a notification packet\u003c/span\u003e\n  token \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e binascii\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunhexlify(token)\n  fmt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;!cH32sH\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{0:d}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003es\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eformat(len(payload))\n  cmd \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\x00\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\n  message \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e struct\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epack(fmt, cmd, len(token), token, len(payload), payload)\n  sock\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewrite(message)\n  sock\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eclose()\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n  send_push(TOKEN, json\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edumps(PAYLOAD))\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow you should be able to run: \u003ccode\u003e$ python push.py\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eEnter your pass phrase and you should receive a push notification on your device.\nIf you would like to remove the pass-phrase you can do so by running: \u003ccode\u003eopenssl  rsa -in PushNotifsKey.pem -out PushNotifsKey.pem\u003c/code\u003e\u003c/p\u003e\n"},{"title":"Sending Multipart Forms with Objective-C","date_published":"2012-09-12T00:00:00-0800","date_modified":"2012-09-12T00:00:00-0800","id":"https://nathan.run/2012/sending-multipart-forms-with-objective-c/","url":"https://nathan.run/2012/sending-multipart-forms-with-objective-c/","content_html":"\u003cp\u003eIt took me a few evenings to figure this out so I\u0026rsquo;m writing a quick explanation\nbased on what I\u0026rsquo;ve found to work. My use-case is pretty simple, I want to POST\nsome data to a form on a server from an iOS app I\u0026rsquo;m building. I\u0026rsquo;ll be using\nNSURLRequest to build the request object and NSURLConnection to make the actual\nconnection to the server.\u003c/p\u003e\n\u003cp\u003eThe first thing we need to understand is how Multipart Form requests should be\nstructured. The \u003ca href=\"http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\"\u003espec document\u003c/a\u003e\nexplains these in detail so I\u0026rsquo;m just going to show at a high level how this is\nstructured. To get started lets create an NSMutableURLRequest:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003eNSURL \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eurl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSURL URLWithString:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;http://example.com/form/\u0026#34;\u003c/span\u003e];\nNSMutableURLRequest \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003erequest \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSMutableURLRequest requestWithURL:url];\n[request setHTTPMethod:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;POST\u0026#34;\u003c/span\u003e];\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow we need to define the content-type and a boundary string. I\u0026rsquo;m not really\nsure what a boundary string is, it just needs to be consistently represented\nthroughout the request.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eContent-Type: multipart/form-data; boundary=YOUR_BOUNDARY_STRING\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo do this in objective-c we need to write the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003eNSURL \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eurl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSURL URLWithString:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;http://example.com/form/\u0026#34;\u003c/span\u003e];\nNSMutableURLRequest \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003erequest \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSMutableURLRequest requestWithURL:url];\n[request setHTTPMethod:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;POST\u0026#34;\u003c/span\u003e];\n\nNSString \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eboundary \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;YOUR_BOUNDARY_STRING\u0026#34;\u003c/span\u003e;\nNSString \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003econtentType \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;multipart/form-data; boundary=%@\u0026#34;\u003c/span\u003e, boundary];\n[request addValue:contentType forHTTPHeaderField:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Content-Type\u0026#34;\u003c/span\u003e];\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow let\u0026rsquo;s get look at the request body. Here\u0026rsquo;s a simple example of how it needs\nto look to the server:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e--YOUR_BOUNDARY_STRING\nContent-Disposition: form-data; name=\u0026quot;photo\u0026quot;; filename=\u0026quot;calm.jpg\u0026quot;\nContent-Type: image/jpeg\n\nYOUR_IMAGE_DATA_GOES_HERE\n--YOUR_BOUNDARY_STRING\nContent-Disposition: form-data; name=\u0026quot;message\u0026quot;\n\nMy first message\n--YOUR_BOUNDARY_STRING\nContent-Disposition: form-data; name=\u0026quot;user\u0026quot;\n\n1\n--YOUR_BOUNDARY_STRING\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI\u0026rsquo;m sending over three variables: an image named photo, a string named message,\nand an integer named user. It\u0026rsquo;s important to note the linebreaks and the dashes\nbefore the boundary string. These must be included in order to build a good\nrequest. Now lets write some objective-c:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003eNSString \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eboundary \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;YOUR_BOUNDARY_STRING\u0026#34;\u003c/span\u003e;\nNSString \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003econtentType \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;multipart/form-data; boundary=%@\u0026#34;\u003c/span\u003e, boundary];\n[request addValue:contentType forHTTPHeaderField:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Content-Type\u0026#34;\u003c/span\u003e];\n\nNSMutableData \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ebody \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [NSMutableData data];\n\n[body appendData:[[NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e--%@\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[[NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Content-Disposition: form-data; name=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003ephoto\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e; filename=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%@.jpg\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, self.message.photoKey] dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Content-Type: application/octet-stream\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[NSData dataWithData:imageData]];\n\n[body appendData:[[NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e--%@\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[[NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Content-Disposition: form-data; name=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003emessage\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\\r\\n\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%@\u0026#34;\u003c/span\u003e, self.message.message] dataUsingEncoding:NSUTF8StringEncoding]];\n\n[body appendData:[[NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e--%@\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n[body appendData:[[NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;Content-Disposition: form-data; name=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003euser\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\\u0026#34;\\r\\n\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%d\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] dataUsingEncoding:NSUTF8StringEncoding]];\n\n[body appendData:[[NSString stringWithFormat:\u003cspan style=\"color:#e6db74\"\u003e@\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e--%@\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\r\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, boundary] dataUsingEncoding:NSUTF8StringEncoding]];\n\n[request setHTTPBody:body];\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow all we need to do is make a connection to the server and send the request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-objc\" data-lang=\"objc\"\u003e[request setHTTPBody:body];\n\nNSURLResponse \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eresponse;\nNSError \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eerror;\n\n[NSURLConnection sendSynchronousRequest:request returningResponse:\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eresponse error:\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003eerror];\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s it. A more detailed explanation of the request formatting can be found\n\u003ca href=\"http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you\u0026rsquo;re curious, I\u0026rsquo;m posting to a Django app I was running locally so I could\nuse \u003ca href=\"http://pypi.python.org/pypi/ipdb\"\u003eipdb\u003c/a\u003e and \u003ca href=\"http://ipython.org\"\u003eiPython\u003c/a\u003e to inspect the process and see what my app was\nposting. Then I compared that to a post request generated by a testcase I knew\nworked.\u003c/p\u003e\n"},{"title":"Simple Panic","date_published":"2012-07-22T00:00:00-0800","date_modified":"2012-07-22T00:00:00-0800","id":"https://nathan.run/2012/simple-panic/","url":"https://nathan.run/2012/simple-panic/","content_html":"\u003cp\u003eToday I posted a public photo of how nicely done a bank start-up\u0026rsquo;s packaging was and didn\u0026rsquo;t realize my card number was in plain view. Now, I\u0026rsquo;m a pretty rational individual so I did what everyone else would have done which is call the customer service number on the back of the card. Apparently they have Sundays off so I had to leave two anxious messages on their answering machine.\u003c/p\u003e\n\u003cp\u003eThey promptly called and I was so agitated I messed up my birthdate during the identity verification process. Upon explaining what happened the support person said I wasn\u0026rsquo;t the first, which didn\u0026rsquo;t surprise me due to the very photogenic packaging.\u003c/p\u003e\n\u003cp\u003eWhen I first opened it I thought, \u0026ldquo;wow they\u0026rsquo;re serious, I bet a lot of people are posting photos of this which could be a great awareness strategy.\u0026rdquo; The packaging is square, which stands out among other mail, laser etched high quality cardboard with a big blue rubber band holding a clean white bank card. Move the rubber band just a half centimeter south and the card number would be completely covered, avoiding this whole situation. If this isn\u0026rsquo;t a great case for Defensive Design\u0026hellip;\u003c/p\u003e\n\u003cp\u003eThis got me thinking about start-ups moving into established territory like banking. \u003ca href=\"https://twitter.com/nathanborror/status/225268922176380929\"\u003eI mentioned last week,\u003c/a\u003e the scariest thing about [bank start-up] is giving them money — not because I don\u0026rsquo;t think they\u0026rsquo;ll lose it, they are backed by the FDIC, but because I don\u0026rsquo;t think they\u0026rsquo;ve experienced what established banks have. Customer service is quite possibly their only hope, which underlines how crucial around the clock support is. If that brave Sunday afternoon support guy hadn\u0026rsquo;t called when he did I probably would have given up on them come Monday.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eExcept when I\u0026rsquo;m hungry. You should have seen this post before lunch.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s worth noting I still haven\u0026rsquo;t deposited any money into this account, therefore my panic may have been a little preemptive (possibly due to  hunger). However, anytime I see the word Visa on a plastic card with my name on it I assume charges can be made.\u003c/li\u003e\n\u003c/ol\u003e\n"},{"title":"Getting Started with MQTT","date_published":"2012-07-22T00:00:00-0800","date_modified":"2012-07-22T00:00:00-0800","id":"https://nathan.run/2012/getting-started-with-mqtt/","url":"https://nathan.run/2012/getting-started-with-mqtt/","content_html":"\u003cp\u003eI wanted to play around with MQTT this evening so I put together a little\ntutorial on how to get started using Ubuntu and \u003ca href=\"http://mosquitto.org\"\u003eMosquitto\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"installing-mosquitto\"\u003eInstalling Mosquitto\u003c/h3\u003e\n\u003cp\u003eEnter the following into your terminal. Remember to replace\n\u003ccode\u003eYOUR_UBUNTU_VERSION_HERE\u003c/code\u003e with the version of ubuntu you\u0026rsquo;re using, I was using\nMaverick Meerkat at the time so I replaced it with just maverick. First add the\nfollowing two lines to \u003ccode\u003e/etc/apt/sources.list\u003c/code\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edeb http://ppa.launchpad.net/mosquitto-dev/mosquitto-ppa/ubuntu YOUR_UBUNTU_VERSION_HERE main\ndeb-src http://ppa.launchpad.net/mosquitto-dev/mosquitto-ppa/ubuntu YOUR_UBUNTU_VERSION_HERE main\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen we need to verify the newly added \u003ca href=\"https://help.launchpad.net/Packaging/PPA/InstallingSoftware#On_older_.28pre_9.10.29_Ubuntu_systems\"\u003epackages\u003c/a\u003e:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 262C4500\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLets update Aptitude so we have the latest packages to choose from:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ sudo aptitude update\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd now lets install the Mosquitto server and clients:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ sudo aptitude install mosquitto\n$ sudo aptitude install mosquitto-clients\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"subscribing-to-a-topic\"\u003eSubscribing to a Topic\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ mosquitto_sub -d -t hello/world\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMosquitto uses slashes as a way to organize topics. It also provides ways to\nsubscribe to groups of topics if you dig around their documentation.\u003c/p\u003e\n\u003ch3 id=\"publishing-to-a-topic\"\u003ePublishing to a Topic\u003c/h3\u003e\n\u003cp\u003eIn another terminal window execute:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ mosquitto_pub -d -t hello/world -m \u0026quot;Hello World\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou should see the text \u0026ldquo;Hello World\u0026rdquo; in the other window.\u003c/p\u003e\n\u003cp\u003eTo get the full effect you can install Mosquitto on your Mac using Homebrew\n(\u003ca href=\"https://github.com/mxcl/homebrew\"\u003ehttps://github.com/mxcl/homebrew\u003c/a\u003e) and then connect to your Ubuntu machine\u0026hellip;\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ mosquitto_sub -h YOUR_HOST_IP_ADDRESS -d -t hello/world\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou should now see messages from your host sent to your local machine. You\u0026rsquo;ll\nprobably need to open up port 1883 on your Ubuntu machine to make this actually\nwork. I just used iptables to do so:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo iptables -A INPUT -p tcp -m tcp --dport 1883 -j ACCEPT\n\u003c/code\u003e\u003c/pre\u003e"},{"title":"Adams and Jefferson","date_published":"2012-07-04T00:00:00-0800","date_modified":"2012-07-04T00:00:00-0800","id":"https://nathan.run/2012/adams-and-jefferson/","url":"https://nathan.run/2012/adams-and-jefferson/","content_html":"\u003cp\u003eOne hundred and eighty six years ago both Thomas Jefferson and John Adams passed\naway on this day, exactly fifty years after the adoption of the Declaration of\nIndependence.\u003c/p\u003e\n\u003cp\u003eIt’s hard to ignore the coincidence of this timing.\u003c/p\u003e\n\u003cp\u003eA couple summers back I bought an old book containing a eulogy given by Daniel\nWebster in August of 1826—I think this sums it up nicely:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNo two men now live, fellow-citizens, perhaps it may be doubted whether any two\nmen have ever lived in one age, who, more than those we now commemorate, have\nimpressed on mankind their own sentiments in regard to politics and government,\ninfused their own opinions more deeply into the opinions of others, or given a\nmore lasting direction to the current of human thought. Their work doth not\nperish with them.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNo age will come in which the American Revolution will appear less than it is,\none of the greatest events in human history. No age will come in which it\nshall cease to be seen and felt, on either continent, that a mighty step, a\ngreat advance, not only in American affairs, but in human affairs, was made on\nthe 4th of July, 1776.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u0026ndash; Shewmaker, \u003ca href=\"http://www.dartmouth.edu/~dwebster/speeches/adams-jefferson.html\"\u003e104-113\u003c/a\u003e\u003c/p\u003e\n"},{"title":"A private afterlife","date_published":"2012-03-14T00:00:00-0800","date_modified":"2012-03-14T00:00:00-0800","id":"https://nathan.run/2012/a-private-afterlife/","url":"https://nathan.run/2012/a-private-afterlife/","content_html":"\u003cp\u003eI spent a while last weekend thinking about death and privacy—for no particular\nreason aside from taking notice of a couple books I own:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://readernaut.com/books/0807842303/\"\u003eThe Adams Jefferson Letters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://readernaut.com/books/0670021946/\"\u003eJack Kerouac and Allen Ginsberg: The Letters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://readernaut.com/books/006171142X/\"\u003eRub Out the Words: The Letters of William S. Burroughs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are countless collections of correspondence floating around from a time\nwhen an envelope was considered a form of privacy. In many cases privacy died\nwith the individual. Today we converse within systems where death has no effect\non privacy and this seems very unfortunate. We\u0026rsquo;ve created an environment where\ninsight is forever locked-up.\u003c/p\u003e\n"}]}