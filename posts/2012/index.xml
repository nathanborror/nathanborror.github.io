<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Nathan Borror</title><link rel="alternate" type="text/html" href="https://nathan.run/"/><link rel="self" type="application/atom+xml" href="https://nathan.run/posts/2012/index.xml"/><rights>Copyright Â© 2022, Nathan Borror</rights><updated>2012-12-31T09:31:04-0800</updated><entry><title>Ghetto Facebook Registration with Django</title><link rel="related" type="text/html" href="https://nathan.run/2012/ghetto-facebook-registration-with-django/"/><published>2012-10-08T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2012/ghetto-facebook-registration-with-django/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>I&rsquo;m going to quickly walk you through how to build a
server-side Facebook registration flow with Django. This is really basic and
doesn&rsquo;t rely on special libraries aside from httplib2 and urlib which are pretty
standard.</p>
<p>First you need to <a href="https://developers.facebook.com/apps">create an app.</a> I set my App Domain to <code>localhost</code> and
Site URL to <code>http://localhost:8000</code> for development purposes. You&rsquo;ll probably
need to do the same if you&rsquo;re using Django&rsquo;s built in development server. Copy
over your App ID and App Secret into your <code>settings.py</code> file:</p>
<pre tabindex="0"><code>FACEBOOK_APP_ID = 'YOUR_FACEBOOK_APP_ID'
FACEBOOK_SECRET_KEY = 'YOUR_FACEBOOK_APP_SECRET'
</code></pre><p>Now lets add a login button to your site, you can put this anywhere:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ui-button&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://www.facebook.com/dialog/oauth?
</span><span style="color:#e6db74">  client_id=YOUR_FACEBOOK_APP_ID
</span><span style="color:#e6db74">  &amp;amp;redirect_uri=http://localhost:8000/facebook/&#34;</span>&gt;Log In with Facebook&lt;/<span style="color:#f92672">a</span>&gt;
</code></pre></div><p>Don&rsquo;t forget to replace <!-- raw HTML omitted -->YOUR_FACEBOOK_APP_ID<!-- raw HTML omitted --> with your App ID. It&rsquo;s
okay if this is hardcoded. Just make sure you don&rsquo;t accidentally expose your App
Secret, this should not be used publicly.</p>
<p>You&rsquo;ll notice we put <code>http://localhost:8000/facebook/</code> as our redirect URI in
the button above. Now we need to create a view to handle this request because
Facebook will hand us a &ldquo;code&rdquo; at that location which is what we&rsquo;ll need to
retrieve an access token for the user, thus completing the process. Add the
following to your <code>urls.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">url(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^facebook/$&#39;</span>, <span style="color:#e6db74">&#39;views.facebook&#39;</span>),
</code></pre></div><p>Now add the following to your <code>views.py</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> httplib2
<span style="color:#f92672">import</span> urllib

<span style="color:#f92672">from</span> django.http <span style="color:#f92672">import</span> HttpResponseRedirect
<span style="color:#f92672">from</span> django.conf <span style="color:#f92672">import</span> settings
<span style="color:#f92672">from</span> django.contrib.auth.models <span style="color:#f92672">import</span> User
<span style="color:#f92672">from</span> django.contrib.auth <span style="color:#f92672">import</span> authenticate, login
<span style="color:#f92672">from</span> django.utils <span style="color:#f92672">import</span> simplejson <span style="color:#66d9ef">as</span> json

<span style="color:#f92672">from</span> profiles.models <span style="color:#f92672">import</span> Profile

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">facebook</span>(request):
  params <span style="color:#f92672">=</span> {
    <span style="color:#e6db74">&#39;client_id&#39;</span>: settings<span style="color:#f92672">.</span>FACEBOOK_APP_ID,
    <span style="color:#e6db74">&#39;redirect_uri&#39;</span>: <span style="color:#e6db74">&#39;http://localhost:8000/registration/facebook/&#39;</span>,
    <span style="color:#e6db74">&#39;client_secret&#39;</span>: settings<span style="color:#f92672">.</span>FACEBOOK_SECRET_KEY,
    <span style="color:#e6db74">&#39;code&#39;</span>: request<span style="color:#f92672">.</span>GET[<span style="color:#e6db74">&#39;code&#39;</span>]
  }

  http <span style="color:#f92672">=</span> httplib2<span style="color:#f92672">.</span>Http(timeout<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
  response, content <span style="color:#f92672">=</span> http<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#39;https://graph.facebook.com/oauth/access_token?</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> urllib<span style="color:#f92672">.</span>urlencode(params))

  <span style="color:#75715e"># Find access token and expire (this is really gross)</span>
  params <span style="color:#f92672">=</span> content<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;&amp;&#39;</span>)
  ACCESS_TOKEN <span style="color:#f92672">=</span> params[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;=&#39;</span>)[<span style="color:#ae81ff">1</span>]
  EXPIRE <span style="color:#f92672">=</span> params[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;=&#39;</span>)[<span style="color:#ae81ff">1</span>]

  <span style="color:#75715e"># Get basic information about the person</span>
  response, content <span style="color:#f92672">=</span> http<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#39;https://graph.facebook.com/me?access_token=</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> ACCESS_TOKEN)
  data <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(content)

  <span style="color:#75715e"># Try to find existing profile, create a new user if one doesn&#39;t exist</span>
  <span style="color:#66d9ef">try</span>:
    profile <span style="color:#f92672">=</span> Profile<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>get(facebook_uid<span style="color:#f92672">=</span>data[<span style="color:#e6db74">&#39;id&#39;</span>])
  <span style="color:#66d9ef">except</span> Profile<span style="color:#f92672">.</span>DoesNotExist:
    user <span style="color:#f92672">=</span> User<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>create_user(data[<span style="color:#e6db74">&#39;username&#39;</span>], data[<span style="color:#e6db74">&#39;email&#39;</span>], data[<span style="color:#e6db74">&#39;id&#39;</span>])
    profile <span style="color:#f92672">=</span> user<span style="color:#f92672">.</span>get_profile()
    profile<span style="color:#f92672">.</span>facebook_uid <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#39;id&#39;</span>]

  <span style="color:#75715e"># Update token and expire fields on profile</span>
  profile<span style="color:#f92672">.</span>facebook_access_token <span style="color:#f92672">=</span> ACCESS_TOKEN
  profile<span style="color:#f92672">.</span>facebook_access_token_expires <span style="color:#f92672">=</span> EXPIRE
  profile<span style="color:#f92672">.</span>save()

  <span style="color:#75715e"># Authenticate and log user in</span>
  user <span style="color:#f92672">=</span> authenticate(username<span style="color:#f92672">=</span>profile<span style="color:#f92672">.</span>user<span style="color:#f92672">.</span>username, password<span style="color:#f92672">=</span>profile<span style="color:#f92672">.</span>facebook_uid)
  login(request, user)

  <span style="color:#66d9ef">return</span> HttpResponseRedirect(<span style="color:#e6db74">&#39;/&#39;</span>)
</code></pre></div><p>One thing you&rsquo;ll immediately notice is I&rsquo;m importing a Profile model. All you
need to do here is create a profiles app that has a single model with a foreign
key to a user and some fields to store our access token and when that token
expires:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> django.db <span style="color:#f92672">import</span> models
<span style="color:#f92672">from</span> django.contrib.auth.models <span style="color:#f92672">import</span> User

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Profile</span>(models<span style="color:#f92672">.</span>Model):
  user <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>ForeignKey(User, unique<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)

  facebook_uid <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>PositiveIntegerField(blank<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
  facebook_access_token <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(blank<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">255</span>)
  facebook_access_token_expires <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>PositiveIntegerField(blank<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</code></pre></div><p>And then add the following to your settings.py so you can use the &ldquo;get_profile()&rdquo;
convenience method on user objects:</p>
<pre tabindex="0"><code>AUTH_PROFILE_MODULE = 'profiles.profile'
</code></pre><p>There you have it. A really hacky Facebook registration flow for Django.</p>
<p><em>Some will probably notice I didn&rsquo;t use the word OAuth anywhere in this post.
Every time I see that term my eyes gloss over and my buzzword bullshit detector
flips on. OAuth is a very simple concept that&rsquo;s often over explainedâhopefully
people can run through this tutorial and grasp what&rsquo;s happening by just looking
at the code.</em></p>
]]></content></entry><entry><title>Setting up Apple Push Notifications</title><link rel="related" type="text/html" href="https://nathan.run/2012/setting-up-apple-push-notifications/"/><published>2012-09-15T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2012/setting-up-apple-push-notifications/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>While trying to figure this out I came across <a href="http://www.raywenderlich.com/3443/apple-push-notification-services-tutorial-part-12">a great article by Matthijs
Hollemans</a>. I suggest following it if you&rsquo;re interested in an in-depth tutorial. What
follows is a more concise version of that article and instead of using PHP I&rsquo;m
using a variant of <a href="http://www.cktsoi.com/2012/02/sending-apple-push-notification-in-python/">Jacky Tsoi&rsquo;s Python script</a>.
This is pretty tedious and there are a lot of steps you have to get right in
order for this to work properly so hang in there.</p>
<p>You&rsquo;re going to need an iOS device, testing pushes cannot be done in the
simulator. You&rsquo;ll also need an iOS Developer Program membership and eventually a
server but for our purposes we&rsquo;ll just be using your local machine.</p>
<p>Payload:Â Pushes are just JSON sent from a server, a simple example looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;aps&#34;</span>: {
    <span style="color:#f92672">&#34;alert&#34;</span>: <span style="color:#e6db74">&#34;Hello world&#34;</span>,
    <span style="color:#f92672">&#34;sound&#34;</span>: <span style="color:#e6db74">&#34;default&#34;</span>,
    <span style="color:#f92672">&#34;badge&#34;</span>: <span style="color:#ae81ff">1</span>
  }
}
</code></pre></div><p>The max size of a push is 256 bytes so don&rsquo;t get carried awayâit&rsquo;s good to
remove all whitespace if you can.</p>
<h2 id="generate-a-certificate-signing-request">Generate a Certificate Signing Request</h2>
<ol>
<li>Open Keychain and navigate to Keychain Access &gt; Certificate Assistant &gt;
Request a Certificate From a Certificate Authority<!-- raw HTML omitted --></li>
<li>Enter your Email, a Common Name &ldquo;PushNotifs&rdquo; (this can be anything you want),
and check Saved to disk</li>
<li>Click Continue and name the file &ldquo;PushNotifs.certSigningRequest&rdquo;</li>
<li>Find &ldquo;PushNotifs&rdquo; in the Keys section of Keychain, right click on the private
key and choose Export</li>
<li>Save the private key as PushNotifsKey.p12 and choose a good passphrase</li>
</ol>
<h2 id="app-id-and-ssl-certificate">App ID and SSL Certificate</h2>
<p>We need an App ID and SSL certificate from <a href="https://developer.apple.com/ios/manage/overview/index.action">Apple&rsquo;s iOS Provisioning Portal</a>.
Each push app needs its own App ID, you cannot use a wildcard ID.</p>
<ol>
<li>Click App IDs in the iOS Provisioning Portal sidebar and click the New App
ID button</li>
<li>Enter &ldquo;PushNotifs&rdquo; as the description and &ldquo;com.nathanborror.PushNotifs&rdquo; as
the Bundle Identifier (replace &lsquo;nathanborro&rsquo; with something more appropriate
for yourself)</li>
<li>After clicking Submit click configure next to the App ID we just made on the
resulting screen</li>
<li>Check &ldquo;Enable for Apple Push Notification service&rdquo; and click configure for
&ldquo;Development Push SSL Certificate&rdquo;</li>
<li>This first screen walks you through how to generate a Certificate Signing
Request which we already did so you can click Continue</li>
<li>On the next screen add the certificate we made earlier,
&ldquo;PushLook.certSigningRequest&rdquo; and click Generate</li>
<li>Wait for Apple to generate the SSL certificate then click Continue.</li>
<li>Download the certificate and click Done</li>
</ol>
<p>Keep these three files in a safe place. Development certificates are ephemeral
so you&rsquo;ll need to renew them every three months. Production certs last a year.</p>
<h2 id="ssl-pem-creation">SSL .pem Creation</h2>
<p>We need to create a .pem file to be used on our server. Using Terminal navigate
to the folder with these three files in it and convert the .cer file to a .pem
file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ openssl x509 -in aps_developer_identity.cer -inform DER -out PushNotifsCert.pem -outform PEM

<span style="color:#75715e"># Now convert your private key to a .pem file:</span>
$ openssl pkcs12 -nocerts -out PushNotifsKey.pem -in PushNotifsKey.p12

<span style="color:#75715e"># You&#39;ll be asked to enter the password we created earlier and then you&#39;ll be prompted to enter a new pass phrase for .pem file. Now combine the certificate and key into a single file</span>
$ cat PushNotifsCert.pem PushNotifsKey.pem &gt; ck.pem

<span style="color:#75715e"># To test the connection</span>
$ openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert PushNotifsCert.pem -key PushNotifsKey.pem
</code></pre></div><p>You should see some output and be able to type a few characters, press enter and
the server should disconnect. Openssl will let you know if there was a problem
connecting.</p>
<h2 id="provisioning-profile">Provisioning Profile</h2>
<p>Head back to Apple&rsquo;s Provisioning Portal, click Provisioning in the sidebar then
click New Profile. I chose &ldquo;PushNotifs Development&rdquo; as my Profile Name, check
your certificate, choose the App ID we just created, then choose the devices you
plan to develop with. Refresh the page until you see a Download button next to
the profile we just made and click it. Open the downloaded file so it gets added
to Xcode.</p>
<h2 id="basic-push-app">Basic Push App</h2>
<p>Start a new project in Xcode, pick the Empty Application template and name it
PushNotifs (or whatever you named your App ID earlier, they should match up). in
AppDelegate.m add the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">- (<span style="color:#66d9ef">BOOL</span>)<span style="color:#a6e22e">application:</span>(UIApplication <span style="color:#f92672">*</span>)application <span style="color:#a6e22e">didFinishLaunchingWithOptions:</span>(NSDictionary <span style="color:#f92672">*</span>)launchOptions {
    self.window <span style="color:#f92672">=</span> [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    <span style="color:#75715e">// Override point for customization after application launch.
</span><span style="color:#75715e"></span>    self.window.backgroundColor <span style="color:#f92672">=</span> [UIColor whiteColor];
    [self.window makeKeyAndVisible];

    <span style="color:#75715e">// Let the device know you want to receive push notifications
</span><span style="color:#75715e"></span>    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge <span style="color:#f92672">|</span> UIRemoteNotificationTypeSound <span style="color:#f92672">|</span> UIRemoteNotificationTypeAlert)];

    UIRemoteNotificationTypeAlert YES;
}
</code></pre></div><p>Now try building and running. It won&rsquo;t work in the simulator because it doesn&rsquo;t
support push so you&rsquo;ll need to run this on a device. You should get an alert
asking you to allow push notifications. Before we move on add the following to
AppDelegate.m:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">application:</span>(UIApplication <span style="color:#f92672">*</span>)application <span style="color:#a6e22e">didRegisterForRemoteNotificationsWithDeviceToken:</span>(NSData <span style="color:#f92672">*</span>)deviceToken {
    NSLog(<span style="color:#e6db74">@&#34;Token: %@&#34;</span>, deviceToken);
}

- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">application:</span>(UIApplication <span style="color:#f92672">*</span>)application <span style="color:#a6e22e">didFailToRegisterForRemoteNotificationsWithError:</span>(NSError <span style="color:#f92672">*</span>)error {
    NSLog(<span style="color:#e6db74">@&#34;Failed to aquire push token. Error: %@&#34;</span>, [error localizedDescription]);
}
</code></pre></div><p>Now when you run this you should see a device token in the debug output. Keep
this handy for the next portion.</p>
<h2 id="server-side">Server Side</h2>
<p>Now we need a simple script we can use on our server that connects to APN and
sends push notifications for us. I&rsquo;m going to use Python for this but you can
use whatever you want. Create a new file called push.py in the same directory
you put the ck.pem file we created earlier and write the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>

<span style="color:#f92672">import</span> ssl
<span style="color:#f92672">import</span> json
<span style="color:#f92672">import</span> socket
<span style="color:#f92672">import</span> struct
<span style="color:#f92672">import</span> binascii

TOKEN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;YOUR_APPS_PUSH_TOKEN&#39;</span>
PAYLOAD <span style="color:#f92672">=</span> {
  <span style="color:#e6db74">&#39;aps&#39;</span>: {
  <span style="color:#e6db74">&#39;alert&#39;</span>: <span style="color:#e6db74">&#39;Hello Push!&#39;</span>,
  <span style="color:#e6db74">&#39;sound&#39;</span>: <span style="color:#e6db74">&#39;default&#39;</span>
}

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send_push</span>(token, payload):
  <span style="color:#75715e"># Your certificate file</span>
  cert <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ck.pem&#39;</span>

  <span style="color:#75715e"># APNS development server</span>
  apns_address <span style="color:#f92672">=</span> (<span style="color:#e6db74">&#39;gateway.sandbox.push.apple.com&#39;</span>, <span style="color:#ae81ff">2195</span>)

  <span style="color:#75715e"># Use a socket to connect to APNS over SSL</span>
  s <span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket()
  sock <span style="color:#f92672">=</span> ssl<span style="color:#f92672">.</span>wrap_socket(s, ssl_version<span style="color:#f92672">=</span>ssl<span style="color:#f92672">.</span>PROTOCOL_SSLv3, certfile<span style="color:#f92672">=</span>cert)
  sock<span style="color:#f92672">.</span>connect(apns_address)

  <span style="color:#75715e"># Generate a notification packet</span>
  token <span style="color:#f92672">=</span> binascii<span style="color:#f92672">.</span>unhexlify(token)
  fmt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;!cH32sH</span><span style="color:#e6db74">{0:d}</span><span style="color:#e6db74">s&#39;</span><span style="color:#f92672">.</span>format(len(payload))
  cmd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>
  message <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>pack(fmt, cmd, len(token), token, len(payload), payload)
  sock<span style="color:#f92672">.</span>write(message)
  sock<span style="color:#f92672">.</span>close()

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
  send_push(TOKEN, json<span style="color:#f92672">.</span>dumps(PAYLOAD))
</code></pre></div><p>Now you should be able to run: <code>$ python push.py</code></p>
<p>Enter your pass phrase and you should receive a push notification on your device.
If you would like to remove the pass-phrase you can do so by running: <code>openssl  rsa -in PushNotifsKey.pem -out PushNotifsKey.pem</code></p>
]]></content></entry><entry><title>Sending Multipart Forms with Objective-C</title><link rel="related" type="text/html" href="https://nathan.run/2012/sending-multipart-forms-with-objective-c/"/><published>2012-09-12T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2012/sending-multipart-forms-with-objective-c/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>It took me a few evenings to figure this out so I&rsquo;m writing a quick explanation
based on what I&rsquo;ve found to work. My use-case is pretty simple, I want to POST
some data to a form on a server from an iOS app I&rsquo;m building. I&rsquo;ll be using
NSURLRequest to build the request object and NSURLConnection to make the actual
connection to the server.</p>
<p>The first thing we need to understand is how Multipart Form requests should be
structured. The <a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">spec document</a>
explains these in detail so I&rsquo;m just going to show at a high level how this is
structured. To get started lets create an NSMutableURLRequest:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">NSURL <span style="color:#f92672">*</span>url <span style="color:#f92672">=</span> [NSURL URLWithString:<span style="color:#e6db74">@&#34;http://example.com/form/&#34;</span>];
NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest requestWithURL:url];
[request setHTTPMethod:<span style="color:#e6db74">@&#34;POST&#34;</span>];
</code></pre></div><p>Now we need to define the content-type and a boundary string. I&rsquo;m not really
sure what a boundary string is, it just needs to be consistently represented
throughout the request.</p>
<pre tabindex="0"><code>Content-Type: multipart/form-data; boundary=YOUR_BOUNDARY_STRING
</code></pre><p>To do this in objective-c we need to write the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">NSURL <span style="color:#f92672">*</span>url <span style="color:#f92672">=</span> [NSURL URLWithString:<span style="color:#e6db74">@&#34;http://example.com/form/&#34;</span>];
NSMutableURLRequest <span style="color:#f92672">*</span>request <span style="color:#f92672">=</span> [NSMutableURLRequest requestWithURL:url];
[request setHTTPMethod:<span style="color:#e6db74">@&#34;POST&#34;</span>];

NSString <span style="color:#f92672">*</span>boundary <span style="color:#f92672">=</span> <span style="color:#e6db74">@&#34;YOUR_BOUNDARY_STRING&#34;</span>;
NSString <span style="color:#f92672">*</span>contentType <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#e6db74">@&#34;multipart/form-data; boundary=%@&#34;</span>, boundary];
[request addValue:contentType forHTTPHeaderField:<span style="color:#e6db74">@&#34;Content-Type&#34;</span>];
</code></pre></div><p>Now let&rsquo;s get look at the request body. Here&rsquo;s a simple example of how it needs
to look to the server:</p>
<pre tabindex="0"><code>--YOUR_BOUNDARY_STRING
Content-Disposition: form-data; name=&quot;photo&quot;; filename=&quot;calm.jpg&quot;
Content-Type: image/jpeg

YOUR_IMAGE_DATA_GOES_HERE
--YOUR_BOUNDARY_STRING
Content-Disposition: form-data; name=&quot;message&quot;

My first message
--YOUR_BOUNDARY_STRING
Content-Disposition: form-data; name=&quot;user&quot;

1
--YOUR_BOUNDARY_STRING
</code></pre><p>I&rsquo;m sending over three variables: an image named photo, a string named message,
and an integer named user. It&rsquo;s important to note the linebreaks and the dashes
before the boundary string. These must be included in order to build a good
request. Now lets write some objective-c:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">NSString <span style="color:#f92672">*</span>boundary <span style="color:#f92672">=</span> <span style="color:#e6db74">@&#34;YOUR_BOUNDARY_STRING&#34;</span>;
NSString <span style="color:#f92672">*</span>contentType <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#e6db74">@&#34;multipart/form-data; boundary=%@&#34;</span>, boundary];
[request addValue:contentType forHTTPHeaderField:<span style="color:#e6db74">@&#34;Content-Type&#34;</span>];

NSMutableData <span style="color:#f92672">*</span>body <span style="color:#f92672">=</span> [NSMutableData data];

[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@&#34;Content-Disposition: form-data; name=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">photo</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">; filename=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">%@.jpg</span><span style="color:#ae81ff">\&#34;\r\n</span><span style="color:#e6db74">&#34;</span>, self.message.photoKey] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[<span style="color:#e6db74">@&#34;Content-Type: application/octet-stream</span><span style="color:#ae81ff">\r\n\r\n</span><span style="color:#e6db74">&#34;</span> dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[NSData dataWithData:imageData]];

[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@&#34;Content-Disposition: form-data; name=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">message</span><span style="color:#ae81ff">\&#34;\r\n\r\n</span><span style="color:#e6db74">%@&#34;</span>, self.message.message] dataUsingEncoding:NSUTF8StringEncoding]];

[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@&#34;Content-Disposition: form-data; name=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">user</span><span style="color:#ae81ff">\&#34;\r\n\r\n</span><span style="color:#e6db74">%d&#34;</span>, <span style="color:#ae81ff">1</span>] dataUsingEncoding:NSUTF8StringEncoding]];

[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];

[request setHTTPBody:body];
</code></pre></div><p>Now all we need to do is make a connection to the server and send the request:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">[request setHTTPBody:body];

NSURLResponse <span style="color:#f92672">*</span>response;
NSError <span style="color:#f92672">*</span>error;

[NSURLConnection sendSynchronousRequest:request returningResponse:<span style="color:#f92672">&amp;</span>response error:<span style="color:#f92672">&amp;</span>error];
</code></pre></div><p>That&rsquo;s it. A more detailed explanation of the request formatting can be found
<a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">here</a>.</p>
<p>If you&rsquo;re curious, I&rsquo;m posting to a Django app I was running locally so I could
use <a href="http://pypi.python.org/pypi/ipdb">ipdb</a> and <a href="http://ipython.org">iPython</a> to inspect the process and see what my app was
posting. Then I compared that to a post request generated by a testcase I knew
worked.</p>
]]></content></entry><entry><title>Simple Panic</title><link rel="related" type="text/html" href="https://nathan.run/2012/simple-panic/"/><published>2012-07-22T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2012/simple-panic/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Today I posted a public photo of how nicely done a bank start-up&rsquo;s packaging was and didn&rsquo;t realize my card number was in plain view. Now, I&rsquo;m a pretty rational individual so I did what everyone else would have done which is call the customer service number on the back of the card. Apparently they have Sundays off so I had to leave two anxious messages on their answering machine.</p>
<p>They promptly called and I was so agitated I messed up my birthdate during the identity verification process. Upon explaining what happened the support person said I wasn&rsquo;t the first, which didn&rsquo;t surprise me due to the very photogenic packaging.</p>
<p>When I first opened it I thought, &ldquo;wow they&rsquo;re serious, I bet a lot of people are posting photos of this which could be a great awareness strategy.&rdquo; The packaging is square, which stands out among other mail, laser etched high quality cardboard with a big blue rubber band holding a clean white bank card. Move the rubber band just a half centimeter south and the card number would be completely covered, avoiding this whole situation. If this isn&rsquo;t a great case for Defensive Design&hellip;</p>
<p>This got me thinking about start-ups moving into established territory like banking. <a href="https://twitter.com/nathanborror/status/225268922176380929">I mentioned last week,</a> the scariest thing about [bank start-up] is giving them money â not because I don&rsquo;t think they&rsquo;ll lose it, they are backed by the FDIC, but because I don&rsquo;t think they&rsquo;ve experienced what established banks have. Customer service is quite possibly their only hope, which underlines how crucial around the clock support is. If that brave Sunday afternoon support guy hadn&rsquo;t called when he did I probably would have given up on them come Monday.</p>
<ol>
<li>Except when I&rsquo;m hungry. You should have seen this post before lunch.</li>
<li>It&rsquo;s worth noting I still haven&rsquo;t deposited any money into this account, therefore my panic may have been a little preemptive (possibly due to  hunger). However, anytime I see the word Visa on a plastic card with my name on it I assume charges can be made.</li>
</ol>
]]></content></entry><entry><title>Getting Started with MQTT</title><link rel="related" type="text/html" href="https://nathan.run/2012/getting-started-with-mqtt/"/><published>2012-07-22T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2012/getting-started-with-mqtt/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>I wanted to play around with MQTT this evening so I put together a little
tutorial on how to get started using Ubuntu and Mosquitto (<a href="http://mosquitto.org">http://mosquitto.org</a>).</p>
<h2 id="installing-mosquitto">Installing Mosquitto</h2>
<p>Enter the following into your terminal. Remember to replace
<code>YOUR_UBUNTU_VERSION_HERE</code> with the version of ubuntu you&rsquo;re using, I was using
Maverick Meerkat at the time so I replaced it with just maverick. First add the
following two lines to <code>/etc/apt/sources.list</code></p>
<pre tabindex="0"><code>deb http://ppa.launchpad.net/mosquitto-dev/mosquitto-ppa/ubuntu YOUR_UBUNTU_VERSION_HERE main
deb-src http://ppa.launchpad.net/mosquitto-dev/mosquitto-ppa/ubuntu YOUR_UBUNTU_VERSION_HERE main
</code></pre><p>Then we need to verify the newly added packages
(<a href="https://help.launchpad.net/Packaging/PPA/InstallingSoftware#On_older_.28pre_9.10.29_Ubuntu_systems)">https://help.launchpad.net/Packaging/PPA/InstallingSoftware#On_older_.28pre_9.10.29_Ubuntu_systems)</a>:</p>
<pre tabindex="0"><code>$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 262C4500
</code></pre><p>Lets update Aptitude so we have the latest packages to choose from:</p>
<pre tabindex="0"><code>$ sudo aptitude update
</code></pre><p>And now lets install the Mosquitto server and clients:</p>
<pre tabindex="0"><code>$ sudo aptitude install mosquitto
$ sudo aptitude install mosquitto-clients
</code></pre><h2 id="subscribing-to-a-topic">Subscribing to a Topic</h2>
<pre tabindex="0"><code>$ mosquitto_sub -d -t hello/world
</code></pre><p>Mosquitto uses slashes as a way to organize topics. It also provides ways to
subscribe to groups of topics if you dig around their documentation.</p>
<h2 id="publishing-to-a-topic">Publishing to a Topic</h2>
<p>In another terminal window execute:</p>
<pre tabindex="0"><code>$ mosquitto_pub -d -t hello/world -m &quot;Hello World&quot;
</code></pre><p>You should see the text &ldquo;Hello World&rdquo; in the other window.</p>
<p>To get the full effect you can install Mosquitto on your Mac using Homebrew
(<a href="https://github.com/mxcl/homebrew">https://github.com/mxcl/homebrew</a>) and then connect to your Ubuntu machine&hellip;</p>
<pre tabindex="0"><code>$ mosquitto_sub -h YOUR_HOST_IP_ADDRESS -d -t hello/world
</code></pre><p>You should now see messages from your host sent to your local machine. You&rsquo;ll
probably need to open up port 1883 on your Ubuntu machine to make this actually
work. I just used iptables to do so:</p>
<pre tabindex="0"><code>sudo iptables -A INPUT -p tcp -m tcp --dport 1883 -j ACCEPT
</code></pre>]]></content></entry><entry><title>Adams and Jefferson</title><link rel="related" type="text/html" href="https://nathan.run/2012/adams-and-jefferson/"/><published>2012-07-04T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2012/adams-and-jefferson/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>One hundred and eighty six years ago both Thomas Jefferson and John Adams passed
away on this day, exactly fifty years after the adoption of the Declaration of
Independence.</p>
<p>Itâs hard to ignore the coincidence of this timing.</p>
<p>A couple summers back I bought an old book containing a eulogy given by Daniel
Webster in August of 1826âI think this sums it up nicely:</p>
<blockquote>
<p>No two men now live, fellow-citizens, perhaps it may be doubted whether any two
men have ever lived in one age, who, more than those we now commemorate, have
impressed on mankind their own sentiments in regard to politics and government,
infused their own opinions more deeply into the opinions of others, or given a
more lasting direction to the current of human thought. Their work doth not
perish with them.</p>
</blockquote>
<blockquote>
<p>No age will come in which the American Revolution will appear less than it is,
one of the greatest events in human history. No age will come in which it
shall cease to be seen and felt, on either continent, that a mighty step, a
great advance, not only in American affairs, but in human affairs, was made on
the 4th of July, 1776.</p>
</blockquote>
<p>&ndash; Shewmaker, <a href="http://www.dartmouth.edu/~dwebster/speeches/adams-jefferson.html">104-113</a></p>
]]></content></entry><entry><title>A private afterlife</title><link rel="related" type="text/html" href="https://nathan.run/2012/a-private-afterlife/"/><published>2012-03-14T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2012/a-private-afterlife/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>I spent a while last weekend thinking about death and privacyâfor no particular
reason aside from taking notice of a couple books I own:</p>
<ul>
<li><a href="http://readernaut.com/books/0807842303/">The Adams Jefferson Letters</a></li>
<li><a href="http://readernaut.com/books/0670021946/">Jack Kerouac and Allen Ginsberg: The Letters</a></li>
<li><a href="http://readernaut.com/books/006171142X/">Rub Out the Words: The Letters of William S. Burroughs</a></li>
</ul>
<p>There are countless collections of correspondence floating around from a time
when an envelope was considered a form of privacy. In many cases privacy died
with the individual. Today we converse within systems where death has no effect
on privacy and this seems very unfortunate. We&rsquo;ve created an environment where
insight is forever locked-up.</p>
]]></content></entry></feed>