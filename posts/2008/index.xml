<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>Nathan Borror</title><link rel="alternate" type="text/html" href="https://nathan.run/"/><link rel="self" type="application/atom+xml" href="https://nathan.run/posts/2008/index.xml"/><rights>Copyright Â© 2022, Nathan Borror</rights><updated>2008-12-31T09:31:04-0800</updated><entry><title>Save RAM with mobile middleware</title><link rel="related" type="text/html" href="https://nathan.run/2009/save-ram-with-mobile-middleware/"/><published>2009-10-07T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2009/save-ram-with-mobile-middleware/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>A while back I wrote an article on how to set up a mobile site with Django ../going-mobile. Currently I have a Slicehost account which includes 256MB of RAM. My resources are tight and I really dislike having another set of unnecessary Apache processes for a mobile site that, aside from different templates, is using the same code base. The solution is quite simple, write a middleware.</p>
<p>The following code checks the incoming request for &rsquo;m' or &lsquo;mobile&rsquo; in the domain name. If it exists the TEMPLATE_DIRS is replaced by a MOBILE_TEMPLATE_DIRS setting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MobileMiddleware</span>(object):
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">process_request</span>(self, request):
    domain <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>META<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;HTTP_HOST&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;.&#39;</span>)

    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;m&#39;</span> <span style="color:#f92672">in</span> domain <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;mobile&#39;</span> <span style="color:#f92672">in</span> domain:
      settings<span style="color:#f92672">.</span>TEMPLATE_DIRS <span style="color:#f92672">=</span> settings<span style="color:#f92672">.</span>MOBILE_TEMPLATE_DIRS
    <span style="color:#66d9ef">else</span>:
      settings<span style="color:#f92672">.</span>TEMPLATE_DIRS <span style="color:#f92672">=</span> settings<span style="color:#f92672">.</span>DESKTOP_TEMPLATE_DIRS
</code></pre></div><p>You&rsquo;ll notice this requires you to also have a DESKTOP_TEMPLATE_DIRS (or whatever you want to call it) so you can switch back to the desktop version.</p>
<p>If you&rsquo;re using any sort of caching you&rsquo;ll want be sure and change CACHE_MIDDLEWARE_KEY_PREFIX when you change to mobile templates and back again.</p>
<p>You&rsquo;ll probably want to place this middleware after Session and Authentication Middleware and before the Cache Middleware like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">MIDDLEWARE_CLASSES <span style="color:#f92672">=</span> (
  <span style="color:#e6db74">&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</span>,
  <span style="color:#e6db74">&#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;</span>,
  <span style="color:#e6db74">&#39;playgroundblues.middleware.MobileMiddleware&#39;</span>,
  <span style="color:#e6db74">&#39;django.middleware.cache.UpdateCacheMiddleware&#39;</span>,
  <span style="color:#e6db74">&#39;django.middleware.common.CommonMiddleware&#39;</span>,
  <span style="color:#e6db74">&#39;django.middleware.cache.FetchFromCacheMiddleware&#39;</span>,
)
</code></pre></div><p>Go Green! Save RAM! (kidding)</p>
]]></content></entry><entry><title>What's next</title><link rel="related" type="text/html" href="https://nathan.run/2008/whats-next/"/><published>2008-12-12T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/whats-next/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Does it make sense to reinvent the wheel every time we start a new project? No. My work echoes my past and I stand by it. Some say, &ldquo;that looks like Readernaut&rdquo; or &ldquo;that looks like Playground Blues&rdquo; and I say yes, they are me.</p>
<p>If it worked there it will work here. When a problem is solved I move on because each project has its fair amount of new problems and I&rsquo;d rather spend time on new, more interesting problems. This doesn&rsquo;t mean I don&rsquo;t improve on past solutions. Everything evolves.</p>
<p>We all bring our individual design style and solutions to the table. Projects are a collection of problems and if you quickly eliminate the solved problems you can dig your heals into the unsolved.</p>
]]></content></entry><entry><title>Message Queuing imports</title><link rel="related" type="text/html" href="https://nathan.run/2008/message-queuing-imports/"/><published>2008-09-05T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/message-queuing-imports/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Last week I ran into some problems dealing with large book imports on Readernaut. I tested the system for around 50-100 books but had no idea people would upload lists of 900+ books. This begged the question, how do you handle importing very large sets of data before the browser times out?</p>
<h2 id="brief-example">Brief example</h2>
<p>User uploads a list of 1000 ISBNs to be imported into their library. Each book, if not already in the system, needs to be imported via another service like Amazon.</p>
<h2 id="solution-1-threading">Solution 1: Threading</h2>
<p>Use threading to push off the long running process to another thread while directing the browser to a status page. You could setup an Ajax request to periodically check on the status of the import and update a progress bar.</p>
<p>This solution is generally a bad idea. It&rsquo;s super easy to do and tests well in a development environment, but has scary consequences down the road, especially if you don&rsquo;t have a lot of server resources.</p>
<h2 id="solution-2-message-queuing">Solution 2: Message Queuing</h2>
<p><a href="http://en.wikipedia.org/wiki/Message_queue">Message queuing</a> is a very basic asynchronous method of storing items in a queue to be processed later.</p>
<p>So for this instance I created a model called Message that has three fields:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Message</span>(models<span style="color:#f92672">.</span>Model):
    user <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>ForeignKey(User)
    subject <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>)
    message <span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>TextField()
</code></pre></div><p>This allowed me to slurp in the list of ISBNs and break them out into 20 book chunks. Each chunk gets related to a user and a subject of &ldquo;book_import.&rdquo; Once it&rsquo;s finished I can send the user to a progress page where each chunk is processed one by one until they&rsquo;re gone. Here&rsquo;s a simple example of a progress view:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">book_import_progress</span>(request):
    message_list <span style="color:#f92672">=</span> Message<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>filter(user<span style="color:#f92672">=</span>request<span style="color:#f92672">.</span>user, subject<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;book_import&#39;</span>)
    handle_message(message_list[<span style="color:#ae81ff">0</span>])
    <span style="color:#66d9ef">if</span> len(message_list) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>:
  <span style="color:#66d9ef">return</span> render_to_response(<span style="color:#e6db74">&#39;books/progress.html&#39;</span>, {}, context_instance<span style="color:#f92672">=</span>RequestContext(request))
    <span style="color:#66d9ef">else</span>:
  <span style="color:#66d9ef">return</span> HttpResponseRedirect(<span style="color:#e6db74">&#39;/user/books&#39;</span>)
</code></pre></div><p>First we get a list of messages, then we process the first 20 books. If there are more messages to be processed we refresh the page otherwise we send the user to their books page.</p>
<p>Additionally it&rsquo;s super simple to Ajaxify the progress page by using Django&rsquo;s handy <code>request.is_ajax()</code> and returning a JSON object with info on the progress of the import. Message Queuing is pretty handy for a lot of situations and Amazon even has a service for it called <a href="http://www.amazon.com/Simple-Queue-Service-home-page/b?ie=UTF8&amp;node=13584001">Simple Queuing Service</a> (SQS).</p>
]]></content></entry><entry><title>Creating a basic API with Django</title><link rel="related" type="text/html" href="https://nathan.run/2008/creating-a-basic-api-with-django/"/><published>2008-08-11T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/creating-a-basic-api-with-django/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Creating a simple public API for your site is a lot easier than you may think with Django. You&rsquo;re basically just creating another view and serving it as XML or JSON instead of HTML.</p>
<h2 id="whats-public">What&rsquo;s public?</h2>
<p>Decide what you want to be public. The best answer is the stuff you&rsquo;re already displaying in your HTML templates. Then you need to create an entry in your url conf.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">url(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;^api/v1/(?P&lt;username&gt;[-\w]+)/notes/?$&#39;</span>, <span style="color:#e6db74">&#39;readernaut.api.views.user_notes&#39;</span>),
</code></pre></div><h2 id="create-the-view">Create the view</h2>
<p>In the case for Readernaut I wanted to provide an XML feed for users notes. Here is what the view looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">user_notes</span>(request, username):
  reader <span style="color:#f92672">=</span> get_object_or_404(User, username__iexact<span style="color:#f92672">=</span>username)
  note_list <span style="color:#f92672">=</span> Note<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>filter(user<span style="color:#f92672">=</span>reader)
  context <span style="color:#f92672">=</span> { <span style="color:#e6db74">&#39;reader&#39;</span>: reader, <span style="color:#e6db74">&#39;note_list&#39;</span>: note_list }
  <span style="color:#66d9ef">return</span> render_to_response(<span style="color:#e6db74">&#39;api/note_list.html&#39;</span>, context, context_instance<span style="color:#f92672">=</span>RequestContext(request), mimetype<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;application/xml&#39;</span>)
</code></pre></div><p>This is a simplified version of the view but, as you can see, you could easily add pagination and other hooks to handle ordering and such.</p>
<h2 id="create-the-template">Create the template</h2>
<p>The view is pointing to the template <code>api/note_list.html</code> so all we need to do is create that file and build out our XML schema.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
<span style="color:#f92672">&lt;notes</span> <span style="color:#a6e22e">version=</span><span style="color:#e6db74">&#34;1.0&#34;</span><span style="color:#f92672">&gt;</span>
  {% for note in note_list %}
  <span style="color:#f92672">&lt;note&gt;</span>
    <span style="color:#f92672">&lt;note_id&gt;</span>{{ note.id }}<span style="color:#f92672">&lt;/note_id&gt;</span>
    <span style="color:#f92672">&lt;user&gt;</span>
      <span style="color:#f92672">&lt;username&gt;</span>{{ note.user }}<span style="color:#f92672">&lt;/username&gt;</span>
    <span style="color:#f92672">&lt;/user&gt;</span>
    <span style="color:#f92672">&lt;book_edtion&gt;</span>
      <span style="color:#f92672">&lt;title&gt;</span>{{ note.book_edition }}<span style="color:#f92672">&lt;/title&gt;</span>
      <span style="color:#f92672">&lt;isbn&gt;</span>{{ note.book_edition.isbn }}<span style="color:#f92672">&lt;/isbn&gt;</span>
    <span style="color:#f92672">&lt;/book_edtion&gt;</span>
    <span style="color:#f92672">&lt;body</span> <span style="color:#a6e22e">class=</span><span style="color:#e6db74">&#34;inner&#34;</span><span style="color:#f92672">&gt;</span>

<span style="color:#f92672">&lt;header&gt;</span>   <span style="color:#f92672">&lt;h1&gt;&lt;a</span> <span style="color:#a6e22e">href=</span><span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">&gt;</span>Nathan Borror<span style="color:#f92672">&lt;/a&gt;&lt;/h1&gt;</span> <span style="color:#f92672">&lt;/header&gt;</span><span style="color:#75715e">&lt;![CDATA[{{ note.note }}]]&gt;</span><span style="color:#f92672">&lt;/body&gt;</span>
    <span style="color:#f92672">&lt;page_reference&gt;</span>{{ note.page_reference }}<span style="color:#f92672">&lt;/page_reference&gt;</span>
    <span style="color:#f92672">&lt;created&gt;</span>{{ note.created|date:&#34;Y-m-d G:i T&#34; }}<span style="color:#f92672">&lt;/created&gt;</span>
    <span style="color:#f92672">&lt;modified&gt;</span>{{ note.modified|date:&#34;Y-m-d G:i T&#34; }}<span style="color:#f92672">&lt;/modified&gt;</span>
  <span style="color:#f92672">&lt;/note&gt;</span>
  {% endfor %}
<span style="color:#f92672">&lt;/notes&gt;</span>
</code></pre></div><p>How you define your XML templates is up to you. I name my templates with the <code>.html</code> extension simply because my text editor highlights the syntax better than if it were XML. It doesn&rsquo;t matter because the mime-type dictates how the file is served up. Good luck!</p>
]]></content></entry><entry><title>Capistrano rules</title><link rel="related" type="text/html" href="https://nathan.run/2008/capistrano-rules/"/><published>2008-05-17T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/capistrano-rules/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>I&rsquo;ve grown tired of committing changes to my subversion repository, logging into my server, updating my live checkout, and restarting python processes. I finally decided to implement <a href="http://www.capify.org/">Capistrano</a> and eliminate this repetition.</p>
<p>Here are my repetitive set of commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ssh playgroundblues.com
$ cd ~/projects/playgroundblues
$ svn up
$ cd ~/www/playgroundblues.com/www
$ touch django.fcgi
</code></pre></div><p>Now, with the help of Capistrano, I just type:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cap deploy
</code></pre></div><p>You&rsquo;ll first need to <a href="http://www.capify.org/install">install Capistrano</a> which is as simple as <code>gem install -y capistrano</code>. Once that&rsquo;s complete you need to create a &ldquo;capfile&rdquo; which is where you&rsquo;ll define your tasks:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">task <span style="color:#e6db74">:deploy</span>, <span style="color:#e6db74">:hosts</span> <span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;username@playgroundblues.com&#34;</span> <span style="color:#66d9ef">do</span>
  run <span style="color:#e6db74">&#34;cd ~/projects/playgroundblues; svn up; cd ~/www/playgroundblues.com/www/; touch django.fcgi&#34;</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>The above will vary depending on your host and directory setup. After you save the above file and as long as you&rsquo;re in the directory where the capfile resides you can, in the terminal, type <code>cap deploy</code> and Capistrano does the rest. Bliss.</p>
]]></content></entry><entry><title>Aspen Simulator</title><link rel="related" type="text/html" href="https://nathan.run/2008/aspen-simulator/"/><published>2008-05-13T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/aspen-simulator/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>As much as I&rsquo;d like to blog about my trip to Austin and SXSW last week I&rsquo;m just too excited over the <a href="http://developer.apple.com/iphone/program/">iPhone SDK</a> goodies that dropped last Thursday.</p>
<p>You may be asking yourself, &ldquo;he&rsquo;s a web guy, why does he care?&rdquo; Well, there happens to be a beautiful gem tucked away called the Aspen Simulator.</p>
<p>This is a complete pixel and functionally perfect replica of the iPhone and it&rsquo;s fantastic for testing web apps. Before I was spending a lot of time back and forth between my iPhone and my desktop but since this thing is so identical I really don&rsquo;t have to own an iPhone (but I will anyway).</p>
<p>It&rsquo;s a little hard to find, but after installing the <a href="http://developer.apple.com/iphone/devcenter/">developer tools</a> look under / Developer / Platforms / AspenSimulator.platform / Developer / Applications.</p>
<h2 id="a-few-tricks">A few tricks</h2>
<p>If you want to do a two finger zoom just hold down the option key while click dragging. You can also rotate the the phone by using the command key and right left arrows. To lock the phone press command L. Still try to figure out how to do a two finger scroll.</p>
]]></content></entry><entry><title>Ah-ha Event Delegation</title><link rel="related" type="text/html" href="https://nathan.run/2008/ah-ha-event-delegation/"/><published>2008-05-05T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/ah-ha-event-delegation/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Wrapping my head around things like OOP took months. It&rsquo;s not because I&rsquo;m an idiot (I don&rsquo;t think) - it&rsquo;s just because I needed all the explanations to marinate before having an ah-ha! moment.</p>
<p>I had an ah-ha today, with regards to Event Delegation. I&rsquo;ve never seemed to completely understand events, yet I use them all the time. They&rsquo;re an essential aspect of Actionscript and Javascript and there are two basic ways of capturing events, Event Handling and Event Delegation.</p>
<p>Most of us, whether we realize it or not, are familiar with Event Handling. Imagine we have an unordered list with a class name <code>.nav</code> and each item has a link. For this example, I&rsquo;m going to use jQuery, so if you wanted to call a javascript function when the user clicks a link in the list, you&rsquo;d do the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;.nav a&#39;</span>).<span style="color:#a6e22e">each</span>(<span style="color:#66d9ef">function</span>() {
    <span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">this</span>).<span style="color:#a6e22e">click</span>(<span style="color:#a6e22e">handleClick</span>);
});

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">handleClick</span>(<span style="color:#a6e22e">event</span>) {
    <span style="color:#75715e">// fun stuff goes here
</span><span style="color:#75715e"></span>}
</code></pre></div><p>If you&rsquo;re jQuery savvy, the above code should be familiar. We&rsquo;re looping over all the anchor tags within the unordered list and assigning the function &ldquo;handleClick&rdquo; to the click event. Each time someone clicks a link, &ldquo;handleClick&rdquo; is called and the anchor tag is in the function scope. This is Event Handling.</p>
<p>Event Delegation makes things a little simpler by eliminating the need to loop over every anchor tag. We simply apply the click event to the unordered list like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#39;.nav&#39;</span>).<span style="color:#a6e22e">click</span>(<span style="color:#a6e22e">handleClick</span>);
</code></pre></div><p>Since the click event is registered with the unordered list, it gets fired off when anything inside the list is clicked. The scope of the handleClick function is set to the <code>&lt;ul&gt;</code> but if you want to target the anchor tag below the mouse click, you use <code>event.target</code>. This is Event Delegation.</p>
<p>Both are very powerful but in most instances Event Delegation is going to require less code while boosting performance. Many thanks to Jacob Kaplan-Moss for making this ah-ha moment possible.</p>
]]></content></entry><entry><title>Gadget fast</title><link rel="related" type="text/html" href="https://nathan.run/2008/gadget-fast/"/><published>2008-04-18T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/gadget-fast/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>My iPhone and laptop will be unplugged starting Friday evening for two days. I&rsquo;ve let the fog of distractions generated by these two devices grow too thick so for the next few days they&rsquo;ll be turned off.</p>
<p>It doesn&rsquo;t stop there. The following week Twitter, Flickr, an my feed reader will be muted. I have nothing against these services, but it&rsquo;s time to step back and take the pulse of things around me and see if I&rsquo;m missing something.</p>
<p>I used to do more gadget/service fasting and I&rsquo;m well over due. My plan is to do some brainstorming for a few projects currently on my plate and catch up on some reading, but more importantly, spend time with my girlfriend.</p>
<p>See you all next week!</p>
]]></content></entry><entry><title>Going mobile</title><link rel="related" type="text/html" href="https://nathan.run/2008/going-mobile/"/><published>2008-02-18T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/going-mobile/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>Over the weekend, I decided to whip up a mobile (iPhone) version of Playground Blues. I walked into Broadway Cafe around 3pm on Saturday, and by 5:30, I had m.playgroundblues.com. Here&rsquo;s how it went down.</p>
<h2 id="step-1">Step 1</h2>
<p>Since I&rsquo;m still using Dreamhost and FastCGI, I created my .htaccess file along with my dispatch.fcgi file for my new sub-domain as usual. Made one little change to my dispatch file: instead of having <code>DJANGO_SETTINGS_MODULE</code> pointing to playgroundblues.settings, I pointed it to playgroundblues.settings_mobile.</p>
<p>Then, in my project folder, I made a duplicate of my settings file and renamed it to <code>settings_mobile.py.</code> Let me emphasize again, this is a duplicate.</p>
<h2 id="step-2">Step 2</h2>
<p>Created a new templates folder and named it &ldquo;templates_mobile.&rdquo; Opened up my <code>settings_mobile.py</code> file and added a new line to the top of my <code>TEMPLATE_DIRS</code> tuple. This tells Django to first look in mobile templates, and if the template doesn&rsquo;t exist, fall back on regular site templates. (Remember, this is only for my mobile site.)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">TEMPLATE_DIRS <span style="color:#f92672">=</span> (
  <span style="color:#e6db74">&#34;/home/playgroundblues/templates_mobile/&#34;</span>,
  <span style="color:#e6db74">&#34;/home/playgroundblues/templates/&#34;</span>,
)
</code></pre></div><h2 id="step-3">Step 3</h2>
<p>In my new templates_mobile folder, I created a new base template called <code>base_mobile.html</code> which I&rsquo;ll use to extend in all my child templates instead of the main sites base.html. Then I went through the sites pages and recreated mirrored templates in the mobile folder. So <code>/templates/blog/post_detail.html</code> was overwritten by <code>/templates_mobile/blog/post_detail.html.</code> I stripped out extraneous content that was unnecessary for someone on the go, leaving core content and functionality.</p>
<p>The nice thing is if someone happens to creep into a section that you haven&rsquo;t gotten to (as long as you didn&rsquo;t override base.html), your site will display as it would on a computer proper. If there&rsquo;s a more succinct way of doing this, please let me know.</p>
]]></content></entry><entry><title>iPhone bookmark iconage</title><link rel="related" type="text/html" href="https://nathan.run/2008/iphone-bookmark-iconage/"/><published>2008-01-15T00:00:00-0800</published><author><name>Nathan Borror</name><uri>https://nathan.run</uri></author><id>https://nathan.run/2008/iphone-bookmark-iconage/</id><content type="html" xml:base="https://nathan.run/" xml:lang="en"><![CDATA[
        <p>If you&rsquo;re wondering how to control the icon that gets generated for your webpage with the new 1.1.3 iPhone release, look no further than Apple&rsquo;s iPhone Dev Center.</p>
<p>Apple has added a section called &ldquo;Create a WebClip Bookmark Icon&rdquo; and it calls for a 57x57 pixel icon. After some testing today I&rsquo;ve concluded this recommended sizing results in a fuzzy icon, largely due to the iPhone being a 163 ppi display.</p>
<p>Instead of sticking with the recommended sizing I bumped it up to 158x158. When this gets scaled you&rsquo;ll be left with a crisp icon that sits nicely amongst Apples crisp icons. Onward.</p>
]]></content></entry></feed>