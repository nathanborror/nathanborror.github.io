<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2008 on Nathan Borror</title><link>https://nathan.run/posts/2008/</link><description>Recent content in 2008 on Nathan Borror</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 31 Dec 2008 09:31:04 -0800</lastBuildDate><atom:link href="https://nathan.run/posts/2008/index.xml" rel="self" type="application/rss+xml"/><item><title>Save RAM with mobile middleware</title><link>https://nathan.run/posts/2008/save-ram-mobile-middleware/</link><pubDate>Wed, 07 Oct 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/save-ram-mobile-middleware/</guid><description>A while back I wrote an article on how to set up a mobile site with Django ../going-mobile. Currently I have a Slicehost account which includes 256MB of RAM. My resources are tight and I really dislike having another set of unnecessary Apache processes for a mobile site that, aside from different templates, is using the same code base. The solution is quite simple, write a middleware.
The following code checks the incoming request for &amp;rsquo;m' or &amp;lsquo;mobile&amp;rsquo; in the domain name.</description></item><item><title>What's next</title><link>https://nathan.run/posts/2008/whats-next/</link><pubDate>Fri, 12 Dec 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/whats-next/</guid><description>Does it make sense to reinvent the wheel every time we start a new project? No. My work echoes my past and I stand by it. Some say, &amp;ldquo;that looks like Readernaut&amp;rdquo; or &amp;ldquo;that looks like Playground Blues&amp;rdquo; and I say yes, they are me.
If it worked there it will work here. When a problem is solved I move on because each project has its fair amount of new problems and I&amp;rsquo;d rather spend time on new, more interesting problems.</description></item><item><title>Message Queuing imports</title><link>https://nathan.run/posts/2008/message-queuing-imports/</link><pubDate>Fri, 05 Sep 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/message-queuing-imports/</guid><description>Last week I ran into some problems dealing with large book imports on Readernaut. I tested the system for around 50-100 books but had no idea people would upload lists of 900+ books. This begged the question, how do you handle importing very large sets of data before the browser times out?
Brief example User uploads a list of 1000 ISBNs to be imported into their library. Each book, if not already in the system, needs to be imported via another service like Amazon.</description></item><item><title>Creating a basic API with Django</title><link>https://nathan.run/posts/2008/creating-basic-api-django/</link><pubDate>Mon, 11 Aug 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/creating-basic-api-django/</guid><description>Creating a simple public API for your site is a lot easier than you may think with Django. You&amp;rsquo;re basically just creating another view and serving it as XML or JSON instead of HTML.
What&amp;rsquo;s public? Decide what you want to be public. The best answer is the stuff you&amp;rsquo;re already displaying in your HTML templates. Then you need to create an entry in your url conf.
url(r&amp;#39;^api/v1/(?P&amp;lt;username&amp;gt;[-\w]+)/notes/?$&amp;#39;, &amp;#39;readernaut.api.views.user_notes&amp;#39;), Create the view In the case for Readernaut I wanted to provide an XML feed for users notes.</description></item><item><title>Capistrano rules</title><link>https://nathan.run/posts/2008/capistrano-rules/</link><pubDate>Sat, 17 May 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/capistrano-rules/</guid><description>I&amp;rsquo;ve grown tired of committing changes to my subversion repository, logging into my server, updating my live checkout, and restarting python processes. I finally decided to implement Capistrano and eliminate this repetition.
Here are my repetitive set of commands:
$ ssh playgroundblues.com $ cd ~/projects/playgroundblues $ svn up $ cd ~/www/playgroundblues.com/www $ touch django.fcgi Now, with the help of Capistrano, I just type:
$ cap deploy You&amp;rsquo;ll first need to install Capistrano which is as simple as gem install -y capistrano.</description></item><item><title>Aspen Simulator</title><link>https://nathan.run/posts/2008/aspen-simulator/</link><pubDate>Tue, 13 May 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/aspen-simulator/</guid><description>As much as I&amp;rsquo;d like to blog about my trip to Austin and SXSW last week I&amp;rsquo;m just too excited over the iPhone SDK goodies that dropped last Thursday.
You may be asking yourself, &amp;ldquo;he&amp;rsquo;s a web guy, why does he care?&amp;rdquo; Well, there happens to be a beautiful gem tucked away called the Aspen Simulator.
This is a complete pixel and functionally perfect replica of the iPhone and it&amp;rsquo;s fantastic for testing web apps.</description></item><item><title>Ah-ha Event Delegation</title><link>https://nathan.run/posts/2008/ah-ha-event-delegation/</link><pubDate>Mon, 05 May 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/ah-ha-event-delegation/</guid><description>Wrapping my head around things like OOP took months. It&amp;rsquo;s not because I&amp;rsquo;m an idiot (I don&amp;rsquo;t think) - it&amp;rsquo;s just because I needed all the explanations to marinate before having an ah-ha! moment.
I had an ah-ha today, with regards to Event Delegation. I&amp;rsquo;ve never seemed to completely understand events, yet I use them all the time. They&amp;rsquo;re an essential aspect of Actionscript and Javascript and there are two basic ways of capturing events, Event Handling and Event Delegation.</description></item><item><title>Gadget fast</title><link>https://nathan.run/posts/2008/gadget-fast/</link><pubDate>Fri, 18 Apr 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/gadget-fast/</guid><description>My iPhone and laptop will be unplugged starting Friday evening for two days. I&amp;rsquo;ve let the fog of distractions generated by these two devices grow too thick so for the next few days they&amp;rsquo;ll be turned off.
It doesn&amp;rsquo;t stop there. The following week Twitter, Flickr, an my feed reader will be muted. I have nothing against these services, but it&amp;rsquo;s time to step back and take the pulse of things around me and see if I&amp;rsquo;m missing something.</description></item><item><title>Going mobile</title><link>https://nathan.run/posts/2008/going-mobile/</link><pubDate>Mon, 18 Feb 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/going-mobile/</guid><description>Over the weekend, I decided to whip up a mobile (iPhone) version of Playground Blues. I walked into Broadway Cafe around 3pm on Saturday, and by 5:30, I had m.playgroundblues.com. Here&amp;rsquo;s how it went down.
Step 1 Since I&amp;rsquo;m still using Dreamhost and FastCGI, I created my .htaccess file along with my dispatch.fcgi file for my new sub-domain as usual. Made one little change to my dispatch file: instead of having DJANGO_SETTINGS_MODULE pointing to playgroundblues.</description></item><item><title>iPhone bookmark iconage</title><link>https://nathan.run/posts/2008/iphone-bookmark-iconage/</link><pubDate>Tue, 15 Jan 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/iphone-bookmark-iconage/</guid><description>If you&amp;rsquo;re wondering how to control the icon that gets generated for your webpage with the new 1.1.3 iPhone release, look no further than Apple&amp;rsquo;s iPhone Dev Center.
Apple has added a section called &amp;ldquo;Create a WebClip Bookmark Icon&amp;rdquo; and it calls for a 57x57 pixel icon. After some testing today I&amp;rsquo;ve concluded this recommended sizing results in a fuzzy icon, largely due to the iPhone being a 163 ppi display.</description></item></channel></rss>