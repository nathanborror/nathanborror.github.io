<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2020 on Nathan Borror</title><link>https://nathan.run/posts/2020/</link><description>Recent content in 2020 on Nathan Borror</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 31 Dec 2020 09:31:04 -0800</lastBuildDate><atom:link href="https://nathan.run/posts/2020/index.xml" rel="self" type="application/rss+xml"/><item><title>macOS Facebook</title><link>https://nathan.run/posts/2021/macos-facebook/</link><pubDate>Tue, 16 Feb 2021 12:00:00 -0800</pubDate><guid>https://nathan.run/posts/2021/macos-facebook/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Had some free time during a long mandatory training session at work and started perusing Apple&rsquo;s<a href="https://developer.apple.com/design/resources/#macos-apps">macOS Sketch file</a> with all the components that go into making a desktop app. I love imagining how components come together to form something useful 🤓</p><p>The training session I was enduring had minimum time limits. For someone who reads fast and watches video at 2x I decided it would be fun to throw together a desktop version of Facebook between modules — the most<strong>BORING</strong> version possible with nothing fancy, just standard macOS components.</p><p><em>Disclaimer: This is just a fun exercise and a way for me to play with someone else&rsquo;s building blocks. A lot goes in to how and why Facebook is the way it is today and teams of people are sweating the details.</em></p><p>When you boil Facebook down it&rsquo;s not<em>that</em> complicated. There are<strong>A LOT</strong> of interactions, but everything can pretty easily be assigned a component that&rsquo;s super familiar to people. Below are basic replicas of News Feed, the Stories viewer and Messenger. The sidebar acts as a great home for most of the ever-growing navigation.</p><figure><a href="/screenshots/2021-04-08-macos-facebook-mini.png"><img src="/screenshots/2021-04-08-macos-facebook-mini.png"/></figure><p>The composer dropdown can show all the possible things a person can create, along with a clean interface for uploading photos and writing text posts. Sorta feels like sending an email 💌 Unseen notifications and messages could persist in the right collapsable sidebar.</p><figure><a href="/screenshots/2021-04-08-macos-facebook-compose.png"><img src="/screenshots/2021-04-08-macos-facebook-compose.png"/></figure><p>Things get super fun in Settings / Preferences. Facebook settings are notoriously complicated as the product has grown over the years. App settings have been an indicator for me how much a developer cares about their product and<code>[cmd+,]</code> is one of the first key commands I use after installing a new app. Most of Facebook&rsquo;s settings can be organized well using standard layouts and components. It&rsquo;s surprisingly clear how they all feel, probably because long-time Mac users are so familiar with these interactions.</p><figure><a href="/screenshots/2021-04-08-macos-facebook-settings.png"><img src="/screenshots/2021-04-08-macos-facebook-settings.png"/></figure><p>Finally, here&rsquo;s the basic interface, the thing we all end up scrolling most of the day. I like how boring it looks, how it puts more emphasis on content wile making it feel like it&rsquo;s easier to navigate.</p><figure><a href="/screenshots/2021-04-08-macos-facebook.png"><img src="/screenshots/2021-04-08-macos-facebook.png"/></figure><h3 id="takeaways">Takeaways</h3><ol><li>Multi-color iconography make an interface look too busy. The monochromatic and tint color strategy with macOS helps signify where interaction is possible while receding into background.</li><li>The density of macOS is something I didn&rsquo;t realize I valued so much when compared to the latest version of Facebook where things seem way more spaced out than previous iterations.</li><li>Component libraries are kinda like alphabets, once you learn letters and grammar you can write great prose. Stability is key so people aren&rsquo;t constantly having to re-learn fundamentals.</li></ol>
]]></content></item><item><title>Running Cone Peak Trails</title><link>https://nathan.run/posts/2019/running-cone-peak-trails/</link><pubDate>Mon, 02 Dec 2019 12:00:00 -0800</pubDate><guid>https://nathan.run/posts/2019/running-cone-peak-trails/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p><em>Vincente Flat Trail → Cone Peak Rd → Cone Peak Trail ◭ Cone Peak Trail → Cone Peak Rd → Vincente Flat Trail</em></p><figure class="small right hang"><a href="/photos/IMG_0392.png"><img src="/photos/IMG_0392.png"/></figure><p>Last Sunday I packed up all my running gear for another long and steep trail run. Nate recently acquired an old van from the 90s that would be our ride to Big Sur. Old vehicles kinda put me on edge but this one felt oddly familiar because growing up at Lake of the Ozarks we had a van like this so all kinds of memories were lighting up.</p><p>The drive to Big Sur can be a little boring until you get closer to Monterey where the coast begins to interrupt conversations. We stopped in Carmel for coffee and a walk on the white sands. A sociable red lab was grabbing the attention of every person and dog walking by, cementing my love for red labradors.</p><p>We continued down Highway 1 to Big Sur for some lunch at a bakery. Ordering expensive avocado toast in Northern California might be the most cliché thing you can do, but it&rsquo;s so good!</p><figure class="small left hang"><a href="/photos/IMG_0409.png"><img src="/photos/IMG_0409.png"/></figure><p>We made our way to a campground just before sunset and walked around looking for sea otters and whales. We saw two spouts far north of us, an occasional tail, more spouts &ndash; my second time seeing whales in California. A little trail guided us down to the shore with an arched rock framing the sunset.</p><p>Nate cooked dinner from the back of the van before we got some rest. We were about three days from a New Moon and the Milky Way was smeared across the sky. I hadn&rsquo;t seen stars like that in years.</p><p><figure><a href="/photos/IMG_0439.png"><img src="/photos/IMG_0439.png"/></figure><figure><a href="/photos/IMG_0442.png"><img src="/photos/IMG_0442.png"/></figure><figure><a href="/photos/IMG_0452.png"><img src="/photos/IMG_0452.png"/></figure><figure><a href="/photos/IMG_0475.png"><img src="/photos/IMG_0475.png"/></figure><figure><a href="/photos/IMG_0487.png"><img src="/photos/IMG_0487.png"/></figure></p><p>Monday morning came fast, Nate made a caffeine concoction of instant coffee, black tea and chai to get us moving. We didn&rsquo;t waste much time moving the van to the trailhead. I love just getting up and going in the morning, leaving no room for hesitation.</p><figure class="medium right hang"><a href="/photos/IMG_0510.png"><img src="/photos/IMG_0510.png"/></figure><p>Vincente Flat Trail was a constant but not exhausting climb. I have a tendency to focus too much on the immediate path ahead so each time I looked up the increasingly vast coastal scenery would be overwhelming. The temptation to pull out my camera was hard to resist.</p><p>Aside from the scenery some of my favorite moments were descending into the valleys with streams and the smell of damp forrest. There were a few campers that morning so with quiet feet we moved through campsites and greeted sleepy eyes. One valley felt like an obstacle course with fallen trees and hard to see paths, luckily Nate was familiar with the area and guided us through with ease.</p><p><figure><a href="/photos/IMG_0525.png"><img src="/photos/IMG_0525.png"/></figure><figure><a href="/photos/IMG_0529.png"><img src="/photos/IMG_0529.png"/></figure><figure><a href="/photos/IMG_0532.png"><img src="/photos/IMG_0532.png"/></figure></p><p>I&rsquo;m still pretty new to long distance and trail running so it was nice to have her keeping conversation pace and giving me subtle cues to eat when she ate. Runs like this are a great way to get to know someone.</p><p>We reached the summit after passing a couple volunteer park rangers. The wind was fierce so we didn&rsquo;t waste much time. After some chit-chat with the volunteers we made our descent. Most of it felt like a controlled fall, Nate bombs down hills and I could tell she was enjoying this part. My quads were on fire but determined to keep up.</p><p><figure><a href="/photos/IMG_0551.png"><img src="/photos/IMG_0551.png"/></figure><figure><a href="/photos/IMG_0553.png"><img src="/photos/IMG_0553.png"/></figure></p><p>At around mile 15 I was beginning to feel pretty exhausted. It was becoming clear I had not eaten enough on the way up. Around Mile 17 I ran out of water and hesitated to fill up at a stream. Lesson learned: when faced with stream water vs no water, always chose stream water. I honestly don&rsquo;t even remember the final mile because my body just took over and did everything it could to finish. Once we reached the van I totally spaced out chugging water in the front seat. Nate handed me a tangerine that lit up my tastebuds and snapped me back into existence.</p><p>We ran 21 miles up 6,782 feet over the course of about five and a half hours. This was my longest and highest run to date. Pretty sure I rode an endorphin high for the next three days!</p>
]]></content></item><item><title>Running Muir Woods Trails</title><link>https://nathan.run/posts/2019/running-muir-woods-trails/</link><pubDate>Fri, 08 Nov 2019 12:00:00 -0800</pubDate><guid>https://nathan.run/posts/2019/running-muir-woods-trails/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p><em>Dipsea → Sun Trail → Redwood Trail → Panoramic Trail → Ocean View Trail → Matt Davis Trail → Old Mine Trail → Coastal Trail → Redwood Creek Trail → Ben Johnson Trail → Hillside Trail → Dipsea</em></p><p>Woke up around 5AM yesterday anxious to get on the trail. After some morning prep I walked outside to my car and immediately felt the cold air. Almost nine years of Northern California has decimated my resolve towards cold temperatures and there&rsquo;s only one way to warm up this morning!</p><p>The short drive to Mill Valley is one of my favorites. The Golden Gate Bridge will forever symbolize adventure to me. Anything I&rsquo;ve ever done up north has felt like an escape with the Bridge as my welcoming party.</p><figure class="small right hang"><a href="/photos/IMG_0259.png"><img src="/photos/IMG_0259.png"/></figure><p>Arriving at the trailhead a little early meant I could grab an espresso at Equator. A couple old men sat inside sipping coffee in the comfort of the morning&rsquo;s newspaper. I was hoping the cafe would be warm, a last minute reprieve from the cold, but they had the doors and windows wide open signaling to me to just get on with it.</p><p>With a small pack and gloves I tied on a green bandana and took off for the Dipsea stairs. The roughly 700 foot climb is just the warm up I needed although a bit dizzying at times. Sun Trail was a nice change of pace with golden views of the western valley as the sun rose. Little birds hang out in the bushes along this trail, as I passed they&rsquo;d shuffle around nervously.</p><figure class="small left hang"><a href="/photos/IMG_0260.png"><img src="/photos/IMG_0260.png"/></figure><p>Sun Trail turns into Redwood Trail pretty quickly as I darted through some damper paths with trees holding the sun at bay. Poison oak was everywhere which always makes me a little cautious. Panoramic and Ocean View Trails lived up to their names as the steady climb continued. Through all my excitement I kept having to remind myself to slow down, this wasn&rsquo;t a typical 10K run today.</p><p>Matt Davis Trail was the first stretch where I could forget about the map and relax a little. After cutting across Panoramic Highway I enjoyed some much earned downhill. The Old Mine Trail felt like a luxury with its plentiful paths, a nice reward for the 1,500 foot climb.</p><p>The absence of fog created some breathtaking views from the Coastal Trail. At first I was a little put off seeing the city skyline I was attempting to escape, but the overwhelming layers of nature&rsquo;s skyline helped make the city look less significant.</p><figure class="medium right hang"><a href="/photos/IMG_0305.png"><img src="/photos/IMG_0305.png"/></figure><p>The switchbacks of Heather Cutoff created a zen-like descent into the valley. Wind was blocked by warm hills, all I could hear were birds chirping and careful footsteps. Each sharp turn marked by big boulders forced me to slow and focus on movement.</p><p>Redwood Creek Trail was all smells and chilly. Tried to enjoy it knowing I was about to make a steep thousand foot climb. The Dipsea and Deer Park Fire Road weave back and forth to create a confusing path. At times I&rsquo;d realize I was on one when my map said I should be on the other but it didn&rsquo;t matter. The climb was mentally challenging so I tried to distract myself with some calories and a methodical water routine. Reaching my whits end I saw a little grove of redwoods reminding me why I love this area so much. Those towering works of nature distracted me from the exhaustion and set me up for an invigorating turn onto the Ben Johnson Trail.</p><figure><a href="/photos/IMG_0330.png"><img src="/photos/IMG_0330.png"/></figure><p>The descent into Muir Woods engaged all senses and eliminated any doubt about completing this journey. It was hard not to greet each sleepy eyed tourist with enthusiasm along Hillside Trail. I had already completed my three hour goal for the day and the rest was a bonus ride. Exiting the park put me face-to-face with yet another Dipsea climb, the last before reuniting with the stairs. The struggle up to Panoramic Highway took every last bit of energy. Approaching the stairs down to Mill Valley signaled the completion of one of the best mornings I&rsquo;ve had in California.</p><figure><a href="/photos/IMG_0331.png"><img src="/photos/IMG_0331.png"/></figure><p>I was able to run 18 miles over the course of three and a half hours, exceeding my goal for the day and setting a personal record of distance and time. I&rsquo;ve got a little over a month to work up to six hours and hopefully 30 miles before the New Year&rsquo;s run. This journey reminds me of a William James quote that Scott Jurek likes to preach:</p><blockquote><p>&ldquo;Beyond the very extreme of fatigue and distress, we may find amounts of ease and power we never dreamed ourselves to own; sources of strength never taxed at all because we never push through the obstruction.&rdquo;</p></blockquote>
]]></content></item><item><title>Blind spots</title><link>https://nathan.run/posts/2015/blind-spots/</link><pubDate>Sat, 14 Feb 2015 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2015/blind-spots/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Hours of my youth were lost to a game called<a href="http://en.wikipedia.org/wiki/Age_of_Empires">Age of Empires.</a> This game was crack cocaine for kids and should have been illegal in some states. Each new game plopped you in the middle of nowhere with an axe, a small hut and a goat or pig nearby. You could only see the little parcel of land around you, everything else was pitch black. As you wandered around the world revealed itself. Move east and you’d discover a forest, move west and you’d stumble on some gold or more pigs (is there a difference?), move far enough south and you might discover an enemy empire, one you weren’t prepared for. This is how the game went — hours of constant struggle balancing exploration with empire building. You had to both know what was out there and be prepared to face it when it came to your little hut.</p><p>We exist in a pretty weird time when you think about it. It’s impossible for some to imagine, but there was a time when the Internet wasn’t a thing. There was even a time when books weren’t a thing 😮. We actually depended on others to bring us information through their experience and stories. The outside world was largely dark and unknown. We now occupy a world where there are no excuses, everything is exposed. We quickly went from acceptable ignorance to “why don’t you know, are you living under a rock?”</p><p>The upside of all this exposure is we’re closer to what game theorists call<a href="http://en.wikipedia.org/wiki/Complete_information">complete information.</a> It’s when all participants in a game or activity have access to the same knowledge. The trick is making an effort to track it all down. Every problem you face has a dark corner, every skill you possess has a weak understanding, every proposal you’ve made has a flawed point. We all end up accepting varying degrees of unfit aspects of our work and lives. Uncovering these sooner can save money and often personal anguish — it’s also rewarding as hell.</p><p><a href="http://hyperphysics.phy-astr.gsu.edu/hbase/vision/rodcone.html">Eyes are pretty fascinating</a> (if you haven’t seen Neil deGrasse Tyson explain the evolution of the eye in Cosmos I suggest you drop everything). Eyes have two main receptors: cones and rods (some of you probably remember this from high school biology). Rods are more prevalent but they aren’t responsible for seeing color, that’s the job of cones. Most of the color sensitive cones are located in a very small patch at the center of the eye. Rods however, are concentrated around the eye and take the lead at providing us with peripheral vision and an ability to see in the dark. They’re highly tuned to sensing motion, motion that could vary well be a predator trying to eat us. This is evolutions attempt at eliminating a blind spot that’s the difference between survival and extinction.</p><p>I wish life had the “reveal map”<a href="http://www.ign.com/cheats/games/age-of-empires-pc-3020">cheat code</a> or the “big daddy” rocket launching cars but it doesn’t. While these give you a few hours of your life back and some zeus-like control over “the game” they also make it really boring. So what are your blind spots? It’s worth taking a moment.</p>
]]></content></item><item><title>Self-Driving Vagabonds</title><link>https://nathan.run/posts/2015/self-driving-vagabonds/</link><pubDate>Sat, 14 Feb 2015 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2015/self-driving-vagabonds/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p><strong>14 February 2015</strong> — Self-driving cars are going to change the world  —  not many folks will disagree. It’s beginning to feel like our space race, the next leap towards a more efficient future.<a href="https://plus.google.com/+GoogleSelfDrivingCars/">Google’s got prototypes,</a><a href="http://en.wikipedia.org/wiki/Autonomous_cruise_control_system">Mercedes-Benz and Volvo have adaptive cruise control,</a><a href="http://www.theverge.com/2014/10/17/6982289/tesla-autopilot-is-a-non-revolution-for-self-driving-cars">Tesla almost has autopilot</a> and<a href="http://www.wsj.com/articles/apples-titan-car-project-to-challenge-tesla-1423868072">Apple’s leaking.</a></p><p>Great, but these are baby steps when it comes to experience. Of course, solving the intelligence bit is really hard but the way we experience this future is where we’re gonna need to decide what type of world we want to live in. I personally don’t want to spend longer than 10 minutes in something the size of a Smart car. And why cars?</p><p>My commute is about 45 minutes from Palo Alto to San Francisco. It’s usually fine, I get to listen to audio-books and read or work when I take the train. How could this be improved? I’ve always wanted an<a href="http://www.airstream.com/travel-trailers/sport/">Airstream Sport</a> but the thought of hauling it around and only getting to use it parked seems lame. However, a self-driving Airstream would be sick! I could spend my time much like I spend it at home. Make breakfast, have coffee, read and maybe even get a little work done. All from 130 square feet of comfort.</p><p>Why stop there? I’m not married, I don’t have kids, so why couldn’t this be home? A home that knows where I need to be and where I like to be.</p><p>Every evening would be spent at a new location: in the mountains, on a beach, in a forrest, at my favorite self-driving home neighborhood with my favorite self-driving food trucks nearby. While sleeping the home gently starts taking me to work. I wake up, shower, and have coffee just before arriving. At the end of the day my home arrives after taking care of a few upgrades and another journey awaits. This could spawn whole worlds of destinations catering to a mobile lifestyle. People could personalize their homes and share their favorite drives and destinations.</p><p>Stationary homes would feel so boring! There are so many things to rethink when we take on this vagabond lifestyle. What if your home knew about impending bad weather? How would mail or taxes work? At this point there’s no doubt that mobile is<a href="http://a16z.com/2014/10/28/mobile-is-eating-the-world/">eating the world </a> —  could this also apply to our home and our current way of life?</p>
]]></content></item><item><title>Imitation as a Tool</title><link>https://nathan.run/posts/2014/imitation/</link><pubDate>Fri, 14 Feb 2014 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2014/imitation/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>&ldquo;Imitation is the sincerest form of flattery.&rdquo; We&rsquo;ve all heard this, it&rsquo;s how the level headed react to “copycats” or &ldquo;ripoffs.&rdquo; The truth is imitation is natural. We may not like to admit it but we&rsquo;re all skilled imitators. Without it there would be no way to talk with one another or possess similar value systems.</p><p>There&rsquo;s a famous chapter in Richard Dawkin&rsquo;s The Selfish Gene where he coins the term &lsquo;meme&rsquo; to explain a non-biological form of evolution — an evolution of culture from one &lsquo;survival machine&rsquo; to another. In the beginning of the chapter he uses saddlebacks, a New Zealand bird, as an example. At the time saddlebacks collectively possessed a total of about nine distinct songs. There were dialects depending on where the birds spent most of their time but as birds were born they would adopt the songs of their neighbors. The &lsquo;song pool&rsquo; basically stayed the same but occasionally something rare happened — a new song was born — by mistake! While imitating other birds the transmission wasn&rsquo;t always perfect, a mistake created an anomaly thus breathing new life into a slightly altered song.</p><p>After reading this chapter I had to take a moment to process. What it means is most of what we consider “new” or “original” is really just an anomaly in the transmission of what we already know. The creative process is a mixed bag of mistakes discovered during the process of imitation.</p><p>This leads me to believe imitation is possibly the single most important tool in the creative process. Want to play like Roger Federer? Practice his every move. Want to write with the same gusto as Hemingway? Study every one of his books. In love with the performance of Calder&rsquo;s mobiles? Study his process and buy some wire. Think Flappy Bird is cool? Learn SpriteKit and start coding.</p><p>Imitation is indeed flattering but it&rsquo;s also a means to understanding and more importantly an opportunity for making mistakes — mistakes that open up whole new worlds. People always ask me, “how do I become a better designer” or “how can I be more creative?” Here&rsquo;s my answer: identify the work you love, study it, imitate it, remix it, and most importantly make mistakes along the way.</p>
]]></content></item><item><title>My experience learning iOS</title><link>https://nathan.run/posts/2013/learning-ios/</link><pubDate>Wed, 09 Oct 2013 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2013/learning-ios/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Twice while living in Kansas I attempted to learn Objective-C and Cocoa. Getting past the first few chapters was pretty mind numbing. It didn’t really have anything to do with the difficulty curve. I already knew other languages—Python, Javascript—and didn’t really have a reason to learn something else.</p><p>The third time I tried was early 2012 when I started reading<a href="http://www.amazon.com/dp/0321821521/">iOS Programming</a>. This time I needed a project or I’d fail yet again. Picking a project at the time was pretty easy. My friends and I were having fun with Snapchat but there were some things I wanted to do differently so I spec’d a few things out and used it as my starter project.</p><p>Every morning I’d sit on my little balcony with an espresso and this book. First I’d read through a couple chapters then I’d read through each one again with my laptop to build out the examples. This learn then do process turned out to be the best way work through the book.</p><p>Once I felt comfortable implementing parts of my side-project I would build out the inbox then the camera flow. The chapter on Archiving taught me how to save content so the data wouldn’t disappear when the app was force-quit. It took me a few months to get to a place where I had something I could actually use. Over some coffee one Saturday I used<a href="http://www.raywenderlich.com/32960/apple-push-notification-services-in-ios-6-tutorial-part-1">this tutorial</a> to learn how to do push notifications and adapted<a href="http://nathan.run/posts/2012/push.html">this</a> the tutorial to use Python instead of PHP. That was fun!</p><p>Later in the year some friends found out about my little side project and we decided it would be fun to build out and share with more people. It came together<strong>very</strong> quickly and we learned a lot along the way. We called it<a href="https://itunes.apple.com/us/app/facebook-poke/id588594730">Poke</a>.</p><p>Lately I’ve been spending most of my time building out little prototypes as a means to test out ideas for other projects. Mastering Views and gaining a solid understanding of animation has made it easier to express different interactions. Creating<a href="https://github.com/nathanborror/Xcode-Snippets">snippets</a> to fit my workflow turned out to reduce a lot of repetitive typing and save time. Sharing prototypes isn’t easy though, the best thing out there is<a href="https://github.com/search?l=Objective-C&amp;q=%40nathanborror&amp;ref=searchresults&amp;type=Repositories">this</a> but it requires people to have a developer account and a basic understanding of Xcode. It would be great to point people to a URL so they could download an app just as easy as loading a webpage.</p><p>It’s admittedly not the easiest way to build prototypes but it’s more fun than anything else I’ve used in the past. If you’re at all curious and have something you want to build you shouldn’t be afraid to learn iOS.</p>
]]></content></item><item><title>Obsolescence</title><link>https://nathan.run/posts/2013/obsolescence/</link><pubDate>Sat, 27 Apr 2013 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2013/obsolescence/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>We’ve witnessed a lot of products in our lifetimes. Some have faded away without even realizing it. Products like fax machines, AOL, desktop computers, atlases, home telephones. Sure, some of us still use these but they’ve all been replaced with better alternatives.</p><p>The best companies and people are capable of predicting when these shifts happen — some even have the capacity to obsolesce their own products. They understand if they don’t, someone else will. It takes creativity to look at what we consider state-of-the-art and question its future position in the world.</p><p>Take any product and ask yourself, “what would the world be like if this product was replaced by something better?” Here’s an easy example: the laptop. The laptop singlehandedly crushed the desktop computer — who uses a desktop computer? The laptop clearly won, and for very obvious reasons. Now lets imagine it’s 2020 and the laptop is dead — no one needs them anymore — everyone is using tablets! iPads are already demonstrating an efficiency at general tasks people once performed on their laptop so this sounds like an easy bet.</p><p>Here’s where the thought experiment gets challenging. We now have to ask ourselves, “how did this transition fully materialize?” Today tablets get you about 80% of the way with most tasks. How did the 20% make itself accessible to this form? It’s probably safe to say the remaining tasks are a rats nest of edge-cases, situations that span a multitude of professions. However, there is one very important task which can’t go unnoticed: application development. You can’t have a world without laptops if you depend on them for driving the development of new software on tablets. Following this logic further, you can’t have this world without advancing the process of programming, without breaking new ground in how we build software. If you want to live in a world where laptops are truly unnecessary then you have to create an environment in which your product lacks any dependancies on its predecessor. It must offer a better and more compelling experience than any pervious offering.</p><p>We could probably spend hours pondering a transition like the one above or we could plan for it. What products do you depend on today? When and how will they become obsolete? Will what you’re working on be a contributing factor in their demise? Are you willing to usher in these transitions?</p>
]]></content></item><item><title>State Machine</title><link>https://nathan.run/posts/2013/solvable-problems/</link><pubDate>Sun, 03 Mar 2013 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2013/solvable-problems/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Last year Philips introduced<a href="http://www.meethue.com/">Hue</a>, a dead simple way to automate all your home lighting. After living with it for a few months and buying into Sonos — a wireless multi-room audio setup—I&rsquo;m beginning to realize how accessible home automation is becoming. They&rsquo;ve both forgotten one thing though, automation.</p><blockquote><p>Automation is the use of machines, control systems and information technologies to optimize productivity in the production of goods and delivery of services. — Wikipedia</p></blockquote><p>The only real innovation Philips has made is the ability to turn all my lights on and off from a single source, my phone. This is definitely an improvement but unnecessary. Same for Sonos, pausing at my door while juggling two apps to turn off music and lights does not live up to the term, “automation.”</p><p>Around 2003 I had a Sony Ericsson phone along with a piece of software called<a href="http://www.salling.com/clicker/mac/index.php">Salling Clicker</a>. At the time you could do some pretty cool tricks, one of which was pause iTunes when you and your phone walked far enough away from your computer. It was pretty buggy and never ended up being useful but they had the right idea a decade ago.</p><p>Physical awareness coupled with a sense of state is key to real automation. A lot of it boils down to just knowing when to turn something on or off. All we really need is an API which could tell a system when I&rsquo;m at work, home, running, walking, traveling, or at a stand - still. Then systems could react accordingly without any input.</p>
]]></content></item><item><title>Today</title><link>https://nathan.run/posts/2013/today/</link><pubDate>Sat, 12 Jan 2013 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2013/today/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I&rsquo;ve never been fond of arbitrary markers in time. Holidays, birthdays, anniversaries, they all seem odd to me and I&rsquo;ve never been one to celebrate them. Every day should be special and accomplishments, small and large should be relished, not random days.</p><p>As you would correctly suspect I don&rsquo;t do resolutions. But I do think constantly about a question Buckminster Fuller used to ask his grandson, &ldquo;What is the most important thing we could be thinking about today?&rdquo;</p>
]]></content></item><item><title>Ghetto Facebook Registration with Django</title><link>https://nathan.run/posts/2012/facebook-registration/</link><pubDate>Mon, 08 Oct 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2012/facebook-registration/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I&rsquo;m going to quickly walk you through how to build a
server-side Facebook registration flow with Django. This is really basic and
doesn&rsquo;t rely on special libraries aside from httplib2 and urlib which are pretty
standard.</p><p>First you need to<a href="https://developers.facebook.com/apps">create an app.</a> I set my App Domain to<code>localhost</code> and
Site URL to<code>http://localhost:8000</code> for development purposes. You&rsquo;ll probably
need to do the same if you&rsquo;re using Django&rsquo;s built in development server. Copy
over your App ID and App Secret into your<code>settings.py</code> file:</p><pre tabindex="0"><code>FACEBOOK_APP_ID = 'YOUR_FACEBOOK_APP_ID'
FACEBOOK_SECRET_KEY = 'YOUR_FACEBOOK_APP_SECRET'</code></pre><p>Now lets add a login button to your site, you can put this anywhere:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">a</span><span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">"ui-button"</span><span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">"https://www.facebook.com/dialog/oauth?</span><span style="color:#e6db74"> client_id=YOUR_FACEBOOK_APP_ID</span><span style="color:#e6db74"> &amp;amp;redirect_uri=http://localhost:8000/facebook/"</span>>Log In with Facebook&lt;/<span style="color:#f92672">a</span>></code></pre></div><p>Don&rsquo;t forget to replace YOUR_FACEBOOK_APP_ID with your App ID. It&rsquo;s
okay if this is hardcoded. Just make sure you don&rsquo;t accidentally expose your App
Secret, this should not be used publicly.</p><p>You&rsquo;ll notice we put<code>http://localhost:8000/facebook/</code> as our redirect URI in
the button above. Now we need to create a view to handle this request because
Facebook will hand us a &ldquo;code&rdquo; at that location which is what we&rsquo;ll need to
retrieve an access token for the user, thus completing the process. Add the
following to your<code>urls.py</code>:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">url(<span style="color:#e6db74">r</span><span style="color:#e6db74">'^facebook/$'</span>,<span style="color:#e6db74">'views.facebook'</span>),</code></pre></div><p>Now add the following to your<code>views.py</code>:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> httplib2<span style="color:#f92672">import</span> urllib<span style="color:#f92672">from</span> django.http<span style="color:#f92672">import</span> HttpResponseRedirect<span style="color:#f92672">from</span> django.conf<span style="color:#f92672">import</span> settings<span style="color:#f92672">from</span> django.contrib.auth.models<span style="color:#f92672">import</span> User<span style="color:#f92672">from</span> django.contrib.auth<span style="color:#f92672">import</span> authenticate, login<span style="color:#f92672">from</span> django.utils<span style="color:#f92672">import</span> simplejson<span style="color:#66d9ef">as</span> json<span style="color:#f92672">from</span> profiles.models<span style="color:#f92672">import</span> Profile<span style="color:#66d9ef">def</span><span style="color:#a6e22e">facebook</span>(request):
params<span style="color:#f92672">=</span> {<span style="color:#e6db74">'client_id'</span>: settings<span style="color:#f92672">.</span>FACEBOOK_APP_ID,<span style="color:#e6db74">'redirect_uri'</span>:<span style="color:#e6db74">'http://localhost:8000/registration/facebook/'</span>,<span style="color:#e6db74">'client_secret'</span>: settings<span style="color:#f92672">.</span>FACEBOOK_SECRET_KEY,<span style="color:#e6db74">'code'</span>: request<span style="color:#f92672">.</span>GET[<span style="color:#e6db74">'code'</span>]
}
http<span style="color:#f92672">=</span> httplib2<span style="color:#f92672">.</span>Http(timeout<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
response, content<span style="color:#f92672">=</span> http<span style="color:#f92672">.</span>request(<span style="color:#e6db74">'https://graph.facebook.com/oauth/access_token?</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">'</span><span style="color:#f92672">%</span> urllib<span style="color:#f92672">.</span>urlencode(params))<span style="color:#75715e"># Find access token and expire (this is really gross)</span>
params<span style="color:#f92672">=</span> content<span style="color:#f92672">.</span>split(<span style="color:#e6db74">'&amp;'</span>)
ACCESS_TOKEN<span style="color:#f92672">=</span> params[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">'='</span>)[<span style="color:#ae81ff">1</span>]
EXPIRE<span style="color:#f92672">=</span> params[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">'='</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#75715e"># Get basic information about the person</span>
response, content<span style="color:#f92672">=</span> http<span style="color:#f92672">.</span>request(<span style="color:#e6db74">'https://graph.facebook.com/me?access_token=</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">'</span><span style="color:#f92672">%</span> ACCESS_TOKEN)
data<span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(content)<span style="color:#75715e"># Try to find existing profile, create a new user if one doesn't exist</span><span style="color:#66d9ef">try</span>:
profile<span style="color:#f92672">=</span> Profile<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>get(facebook_uid<span style="color:#f92672">=</span>data[<span style="color:#e6db74">'id'</span>])<span style="color:#66d9ef">except</span> Profile<span style="color:#f92672">.</span>DoesNotExist:
user<span style="color:#f92672">=</span> User<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>create_user(data[<span style="color:#e6db74">'username'</span>], data[<span style="color:#e6db74">'email'</span>], data[<span style="color:#e6db74">'id'</span>])
profile<span style="color:#f92672">=</span> user<span style="color:#f92672">.</span>get_profile()
profile<span style="color:#f92672">.</span>facebook_uid<span style="color:#f92672">=</span> data[<span style="color:#e6db74">'id'</span>]<span style="color:#75715e"># Update token and expire fields on profile</span>
profile<span style="color:#f92672">.</span>facebook_access_token<span style="color:#f92672">=</span> ACCESS_TOKEN
profile<span style="color:#f92672">.</span>facebook_access_token_expires<span style="color:#f92672">=</span> EXPIRE
profile<span style="color:#f92672">.</span>save()<span style="color:#75715e"># Authenticate and log user in</span>
user<span style="color:#f92672">=</span> authenticate(username<span style="color:#f92672">=</span>profile<span style="color:#f92672">.</span>user<span style="color:#f92672">.</span>username, password<span style="color:#f92672">=</span>profile<span style="color:#f92672">.</span>facebook_uid)
login(request, user)<span style="color:#66d9ef">return</span> HttpResponseRedirect(<span style="color:#e6db74">'/'</span>)</code></pre></div><p>One thing you&rsquo;ll immediately notice is I&rsquo;m importing a Profile model. All you
need to do here is create a profiles app that has a single model with a foreign
key to a user and some fields to store our access token and when that token
expires:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> django.db<span style="color:#f92672">import</span> models<span style="color:#f92672">from</span> django.contrib.auth.models<span style="color:#f92672">import</span> User<span style="color:#66d9ef">class</span><span style="color:#a6e22e">Profile</span>(models<span style="color:#f92672">.</span>Model):
user<span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>ForeignKey(User, unique<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
facebook_uid<span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>PositiveIntegerField(blank<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
facebook_access_token<span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(blank<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">255</span>)
facebook_access_token_expires<span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>PositiveIntegerField(blank<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, null<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)</code></pre></div><p>And then add the following to your settings.py so you can use the &ldquo;get_profile()&rdquo;
convenience method on user objects:</p><pre tabindex="0"><code>AUTH_PROFILE_MODULE = 'profiles.profile'</code></pre><p>There you have it. A really hacky Facebook registration flow for Django.</p><p><em>Some will probably notice I didn&rsquo;t use the word OAuth anywhere in this post.
Every time I see that term my eyes gloss over and my buzzword bullshit detector
flips on. OAuth is a very simple concept that&rsquo;s often over explained—hopefully
people can run through this tutorial and grasp what&rsquo;s happening by just looking
at the code.</em></p>
]]></content></item><item><title>Setting up Apple Push Notifications</title><link>https://nathan.run/posts/2012/push/</link><pubDate>Sat, 15 Sep 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2012/push/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>While trying to figure this out I came across<a href="http://www.raywenderlich.com/3443/apple-push-notification-services-tutorial-part-12">a great article by Matthijs
Hollemans</a>. I suggest following it if you&rsquo;re interested in an in-depth tutorial. What
follows is a more concise version of that article and instead of using PHP I&rsquo;m
using a variant of<a href="http://www.cktsoi.com/2012/02/sending-apple-push-notification-in-python/">Jacky Tsoi&rsquo;s Python script</a>.
This is pretty tedious and there are a lot of steps you have to get right in
order for this to work properly so hang in there.</p><p>You&rsquo;re going to need an iOS device, testing pushes cannot be done in the
simulator. You&rsquo;ll also need an iOS Developer Program membership and eventually a
server but for our purposes we&rsquo;ll just be using your local machine.</p><p>Payload: Pushes are just JSON sent from a server, a simple example looks like this:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{<span style="color:#f92672">"aps"</span>: {<span style="color:#f92672">"alert"</span>:<span style="color:#e6db74">"Hello world"</span>,<span style="color:#f92672">"sound"</span>:<span style="color:#e6db74">"default"</span>,<span style="color:#f92672">"badge"</span>:<span style="color:#ae81ff">1</span>
}
}</code></pre></div><p>The max size of a push is 256 bytes so don&rsquo;t get carried away—it&rsquo;s good to
remove all whitespace if you can.</p><h2 id="generate-a-certificate-signing-request">Generate a Certificate Signing Request</h2><ol><li>Open Keychain and navigate to Keychain Access > Certificate Assistant >
Request a Certificate From a Certificate Authority</li><li>Enter your Email, a Common Name &ldquo;PushNotifs&rdquo; (this can be anything you want),
and check Saved to disk</li><li>Click Continue and name the file &ldquo;PushNotifs.certSigningRequest&rdquo;</li><li>Find &ldquo;PushNotifs&rdquo; in the Keys section of Keychain, right click on the private
key and choose Export</li><li>Save the private key as PushNotifsKey.p12 and choose a good passphrase</li></ol><h2 id="app-id-and-ssl-certificate">App ID and SSL Certificate</h2><p>We need an App ID and SSL certificate from<a href="https://developer.apple.com/ios/manage/overview/index.action">Apple&rsquo;s iOS Provisioning Portal</a>.
Each push app needs its own App ID, you cannot use a wildcard ID.</p><ol><li>Click App IDs in the iOS Provisioning Portal sidebar and click the New App
ID button</li><li>Enter &ldquo;PushNotifs&rdquo; as the description and &ldquo;com.nathanborror.PushNotifs&rdquo; as
the Bundle Identifier (replace &lsquo;nathanborro&rsquo; with something more appropriate
for yourself)</li><li>After clicking Submit click configure next to the App ID we just made on the
resulting screen</li><li>Check &ldquo;Enable for Apple Push Notification service&rdquo; and click configure for
&ldquo;Development Push SSL Certificate&rdquo;</li><li>This first screen walks you through how to generate a Certificate Signing
Request which we already did so you can click Continue</li><li>On the next screen add the certificate we made earlier,
&ldquo;PushLook.certSigningRequest&rdquo; and click Generate</li><li>Wait for Apple to generate the SSL certificate then click Continue.</li><li>Download the certificate and click Done</li></ol><p>Keep these three files in a safe place. Development certificates are ephemeral
so you&rsquo;ll need to renew them every three months. Production certs last a year.</p><h2 id="ssl-pem-creation">SSL .pem Creation</h2><p>We need to create a .pem file to be used on our server. Using Terminal navigate
to the folder with these three files in it and convert the .cer file to a .pem
file:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ openssl x509 -in aps_developer_identity.cer -inform DER -out PushNotifsCert.pem -outform PEM<span style="color:#75715e"># Now convert your private key to a .pem file:</span>
$ openssl pkcs12 -nocerts -out PushNotifsKey.pem -in PushNotifsKey.p12<span style="color:#75715e"># You'll be asked to enter the password we created earlier and then you'll be prompted to enter a new pass phrase for .pem file. Now combine the certificate and key into a single file</span>
$ cat PushNotifsCert.pem PushNotifsKey.pem > ck.pem<span style="color:#75715e"># To test the connection</span>
$ openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert PushNotifsCert.pem -key PushNotifsKey.pem</code></pre></div><p>You should see some output and be able to type a few characters, press enter and
the server should disconnect. Openssl will let you know if there was a problem
connecting.</p><h2 id="provisioning-profile">Provisioning Profile</h2><p>Head back to Apple&rsquo;s Provisioning Portal, click Provisioning in the sidebar then
click New Profile. I chose &ldquo;PushNotifs Development&rdquo; as my Profile Name, check
your certificate, choose the App ID we just created, then choose the devices you
plan to develop with. Refresh the page until you see a Download button next to
the profile we just made and click it. Open the downloaded file so it gets added
to Xcode.</p><h2 id="basic-push-app">Basic Push App</h2><p>Start a new project in Xcode, pick the Empty Application template and name it
PushNotifs (or whatever you named your App ID earlier, they should match up). in
AppDelegate.m add the following:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">- (<span style="color:#66d9ef">BOOL</span>)<span style="color:#a6e22e">application:</span>(UIApplication<span style="color:#f92672">*</span>)application<span style="color:#a6e22e">didFinishLaunchingWithOptions:</span>(NSDictionary<span style="color:#f92672">*</span>)launchOptions {
self.window<span style="color:#f92672">=</span> [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];<span style="color:#75715e">// Override point for customization after application launch.</span><span style="color:#75715e"/> self.window.backgroundColor<span style="color:#f92672">=</span> [UIColor whiteColor];
[self.window makeKeyAndVisible];<span style="color:#75715e">// Let the device know you want to receive push notifications</span><span style="color:#75715e"/> [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeBadge<span style="color:#f92672">|</span> UIRemoteNotificationTypeSound<span style="color:#f92672">|</span> UIRemoteNotificationTypeAlert)];
UIRemoteNotificationTypeAlert YES;
}</code></pre></div><p>Now try building and running. It won&rsquo;t work in the simulator because it doesn&rsquo;t
support push so you&rsquo;ll need to run this on a device. You should get an alert
asking you to allow push notifications. Before we move on add the following to
AppDelegate.m:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">application:</span>(UIApplication<span style="color:#f92672">*</span>)application<span style="color:#a6e22e">didRegisterForRemoteNotificationsWithDeviceToken:</span>(NSData<span style="color:#f92672">*</span>)deviceToken {
NSLog(<span style="color:#e6db74">@"Token: %@"</span>, deviceToken);
}
- (<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">application:</span>(UIApplication<span style="color:#f92672">*</span>)application<span style="color:#a6e22e">didFailToRegisterForRemoteNotificationsWithError:</span>(NSError<span style="color:#f92672">*</span>)error {
NSLog(<span style="color:#e6db74">@"Failed to aquire push token. Error: %@"</span>, [error localizedDescription]);
}</code></pre></div><p>Now when you run this you should see a device token in the debug output. Keep
this handy for the next portion.</p><h2 id="server-side">Server Side</h2><p>Now we need a simple script we can use on our server that connects to APN and
sends push notifications for us. I&rsquo;m going to use Python for this but you can
use whatever you want. Create a new file called push.py in the same directory
you put the ck.pem file we created earlier and write the following:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span><span style="color:#f92672">import</span> ssl<span style="color:#f92672">import</span> json<span style="color:#f92672">import</span> socket<span style="color:#f92672">import</span> struct<span style="color:#f92672">import</span> binascii
TOKEN<span style="color:#f92672">=</span><span style="color:#e6db74">'YOUR_APPS_PUSH_TOKEN'</span>
PAYLOAD<span style="color:#f92672">=</span> {<span style="color:#e6db74">'aps'</span>: {<span style="color:#e6db74">'alert'</span>:<span style="color:#e6db74">'Hello Push!'</span>,<span style="color:#e6db74">'sound'</span>:<span style="color:#e6db74">'default'</span>
}<span style="color:#66d9ef">def</span><span style="color:#a6e22e">send_push</span>(token, payload):<span style="color:#75715e"># Your certificate file</span>
cert<span style="color:#f92672">=</span><span style="color:#e6db74">'ck.pem'</span><span style="color:#75715e"># APNS development server</span>
apns_address<span style="color:#f92672">=</span> (<span style="color:#e6db74">'gateway.sandbox.push.apple.com'</span>,<span style="color:#ae81ff">2195</span>)<span style="color:#75715e"># Use a socket to connect to APNS over SSL</span>
s<span style="color:#f92672">=</span> socket<span style="color:#f92672">.</span>socket()
sock<span style="color:#f92672">=</span> ssl<span style="color:#f92672">.</span>wrap_socket(s, ssl_version<span style="color:#f92672">=</span>ssl<span style="color:#f92672">.</span>PROTOCOL_SSLv3, certfile<span style="color:#f92672">=</span>cert)
sock<span style="color:#f92672">.</span>connect(apns_address)<span style="color:#75715e"># Generate a notification packet</span>
token<span style="color:#f92672">=</span> binascii<span style="color:#f92672">.</span>unhexlify(token)
fmt<span style="color:#f92672">=</span><span style="color:#e6db74">'!cH32sH</span><span style="color:#e6db74">{0:d}</span><span style="color:#e6db74">s'</span><span style="color:#f92672">.</span>format(len(payload))
cmd<span style="color:#f92672">=</span><span style="color:#e6db74">'</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">'</span>
message<span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>pack(fmt, cmd, len(token), token, len(payload), payload)
sock<span style="color:#f92672">.</span>write(message)
sock<span style="color:#f92672">.</span>close()<span style="color:#66d9ef">if</span> __name__<span style="color:#f92672">==</span><span style="color:#e6db74">'__main__'</span>:
send_push(TOKEN, json<span style="color:#f92672">.</span>dumps(PAYLOAD))</code></pre></div><p>Now you should be able to run:<code>$ python push.py</code></p><p>Enter your pass phrase and you should receive a push notification on your device.
If you would like to remove the pass-phrase you can do so by running:<code>openssl rsa -in PushNotifsKey.pem -out PushNotifsKey.pem</code></p>
]]></content></item><item><title>Sending Multipart Forms with Objective-C</title><link>https://nathan.run/posts/2012/objc-multipart-forms/</link><pubDate>Wed, 12 Sep 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2012/objc-multipart-forms/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>It took me a few evenings to figure this out so I&rsquo;m writing a quick explanation
based on what I&rsquo;ve found to work. My use-case is pretty simple, I want to POST
some data to a form on a server from an iOS app I&rsquo;m building. I&rsquo;ll be using
NSURLRequest to build the request object and NSURLConnection to make the actual
connection to the server.</p><p>The first thing we need to understand is how Multipart Form requests should be
structured. The<a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">spec document</a>
explains these in detail so I&rsquo;m just going to show at a high level how this is
structured. To get started lets create an NSMutableURLRequest:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">NSURL<span style="color:#f92672">*</span>url<span style="color:#f92672">=</span> [NSURL URLWithString:<span style="color:#e6db74">@"http://example.com/form/"</span>];
NSMutableURLRequest<span style="color:#f92672">*</span>request<span style="color:#f92672">=</span> [NSMutableURLRequest requestWithURL:url];
[request setHTTPMethod:<span style="color:#e6db74">@"POST"</span>];</code></pre></div><p>Now we need to define the content-type and a boundary string. I&rsquo;m not really
sure what a boundary string is, it just needs to be consistently represented
throughout the request.</p><pre tabindex="0"><code>Content-Type: multipart/form-data; boundary=YOUR_BOUNDARY_STRING</code></pre><p>To do this in objective-c we need to write the following:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">NSURL<span style="color:#f92672">*</span>url<span style="color:#f92672">=</span> [NSURL URLWithString:<span style="color:#e6db74">@"http://example.com/form/"</span>];
NSMutableURLRequest<span style="color:#f92672">*</span>request<span style="color:#f92672">=</span> [NSMutableURLRequest requestWithURL:url];
[request setHTTPMethod:<span style="color:#e6db74">@"POST"</span>];
NSString<span style="color:#f92672">*</span>boundary<span style="color:#f92672">=</span><span style="color:#e6db74">@"YOUR_BOUNDARY_STRING"</span>;
NSString<span style="color:#f92672">*</span>contentType<span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#e6db74">@"multipart/form-data; boundary=%@"</span>, boundary];
[request addValue:contentType forHTTPHeaderField:<span style="color:#e6db74">@"Content-Type"</span>];</code></pre></div><p>Now let&rsquo;s get look at the request body. Here&rsquo;s a simple example of how it needs
to look to the server:</p><pre tabindex="0"><code>--YOUR_BOUNDARY_STRING
Content-Disposition: form-data; name="photo"; filename="calm.jpg"
Content-Type: image/jpeg
YOUR_IMAGE_DATA_GOES_HERE
--YOUR_BOUNDARY_STRING
Content-Disposition: form-data; name="message"
My first message
--YOUR_BOUNDARY_STRING
Content-Disposition: form-data; name="user"
1
--YOUR_BOUNDARY_STRING</code></pre><p>I&rsquo;m sending over three variables: an image named photo, a string named message,
and an integer named user. It&rsquo;s important to note the linebreaks and the dashes
before the boundary string. These must be included in order to build a good
request. Now lets write some objective-c:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">NSString<span style="color:#f92672">*</span>boundary<span style="color:#f92672">=</span><span style="color:#e6db74">@"YOUR_BOUNDARY_STRING"</span>;
NSString<span style="color:#f92672">*</span>contentType<span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#e6db74">@"multipart/form-data; boundary=%@"</span>, boundary];
[request addValue:contentType forHTTPHeaderField:<span style="color:#e6db74">@"Content-Type"</span>];
NSMutableData<span style="color:#f92672">*</span>body<span style="color:#f92672">=</span> [NSMutableData data];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@"</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">"</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@"Content-Disposition: form-data; name=</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">photo</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">; filename=</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">%@.jpg</span><span style="color:#ae81ff">\"\r\n</span><span style="color:#e6db74">"</span>, self.message.photoKey] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[<span style="color:#e6db74">@"Content-Type: application/octet-stream</span><span style="color:#ae81ff">\r\n\r\n</span><span style="color:#e6db74">"</span> dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[NSData dataWithData:imageData]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@"</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">"</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@"Content-Disposition: form-data; name=</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">message</span><span style="color:#ae81ff">\"\r\n\r\n</span><span style="color:#e6db74">%@"</span>, self.message.message] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@"</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">"</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@"Content-Disposition: form-data; name=</span><span style="color:#ae81ff">\"</span><span style="color:#e6db74">user</span><span style="color:#ae81ff">\"\r\n\r\n</span><span style="color:#e6db74">%d"</span>,<span style="color:#ae81ff">1</span>] dataUsingEncoding:NSUTF8StringEncoding]];
[body appendData:[[NSString stringWithFormat:<span style="color:#e6db74">@"</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">--%@</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">"</span>, boundary] dataUsingEncoding:NSUTF8StringEncoding]];
[request setHTTPBody:body];</code></pre></div><p>Now all we need to do is make a connection to the server and send the request:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-objc" data-lang="objc">[request setHTTPBody:body];
NSURLResponse<span style="color:#f92672">*</span>response;
NSError<span style="color:#f92672">*</span>error;
[NSURLConnection sendSynchronousRequest:request returningResponse:<span style="color:#f92672">&amp;</span>response error:<span style="color:#f92672">&amp;</span>error];</code></pre></div><p>That&rsquo;s it. A more detailed explanation of the request formatting can be found<a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">here</a>.</p><p>If you&rsquo;re curious, I&rsquo;m posting to a Django app I was running locally so I could
use<a href="http://pypi.python.org/pypi/ipdb">ipdb</a> and<a href="http://ipython.org">iPython</a> to inspect the process and see what my app was
posting. Then I compared that to a post request generated by a testcase I knew
worked.</p>
]]></content></item><item><title>Getting Started with MQTT</title><link>https://nathan.run/posts/2012/mqtt/</link><pubDate>Sun, 22 Jul 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2012/mqtt/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I wanted to play around with MQTT this evening so I put together a little
tutorial on how to get started using Ubuntu and Mosquitto (<a href="http://mosquitto.org">http://mosquitto.org</a>).</p><h2 id="installing-mosquitto">Installing Mosquitto</h2><p>Enter the following into your terminal. Remember to replace<code>YOUR_UBUNTU_VERSION_HERE</code> with the version of ubuntu you&rsquo;re using, I was using
Maverick Meerkat at the time so I replaced it with just maverick. First add the
following two lines to<code>/etc/apt/sources.list</code></p><pre tabindex="0"><code>deb http://ppa.launchpad.net/mosquitto-dev/mosquitto-ppa/ubuntu YOUR_UBUNTU_VERSION_HERE main
deb-src http://ppa.launchpad.net/mosquitto-dev/mosquitto-ppa/ubuntu YOUR_UBUNTU_VERSION_HERE main</code></pre><p>Then we need to verify the newly added packages
(<a href="https://help.launchpad.net/Packaging/PPA/InstallingSoftware#On_older_.28pre_9.10.29_Ubuntu_systems)">https://help.launchpad.net/Packaging/PPA/InstallingSoftware#On_older_.28pre_9.10.29_Ubuntu_systems)</a>:</p><pre tabindex="0"><code>$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 262C4500</code></pre><p>Lets update Aptitude so we have the latest packages to choose from:</p><pre tabindex="0"><code>$ sudo aptitude update</code></pre><p>And now lets install the Mosquitto server and clients:</p><pre tabindex="0"><code>$ sudo aptitude install mosquitto
$ sudo aptitude install mosquitto-clients</code></pre><h2 id="subscribing-to-a-topic">Subscribing to a Topic</h2><pre tabindex="0"><code>$ mosquitto_sub -d -t hello/world</code></pre><p>Mosquitto uses slashes as a way to organize topics. It also provides ways to
subscribe to groups of topics if you dig around their documentation.</p><h2 id="publishing-to-a-topic">Publishing to a Topic</h2><p>In another terminal window execute:</p><pre tabindex="0"><code>$ mosquitto_pub -d -t hello/world -m "Hello World"</code></pre><p>You should see the text &ldquo;Hello World&rdquo; in the other window.</p><p>To get the full effect you can install Mosquitto on your Mac using Homebrew
(<a href="https://github.com/mxcl/homebrew">https://github.com/mxcl/homebrew</a>) and then connect to your Ubuntu machine&hellip;</p><pre tabindex="0"><code>$ mosquitto_sub -h YOUR_HOST_IP_ADDRESS -d -t hello/world</code></pre><p>You should now see messages from your host sent to your local machine. You&rsquo;ll
probably need to open up port 1883 on your Ubuntu machine to make this actually
work. I just used iptables to do so:</p><pre tabindex="0"><code>sudo iptables -A INPUT -p tcp -m tcp --dport 1883 -j ACCEPT</code></pre>
]]></content></item><item><title>Simple Panic</title><link>https://nathan.run/posts/2012/simple-panic/</link><pubDate>Sun, 22 Jul 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2012/simple-panic/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Today I posted a public photo of how nicely done a bank start-up&rsquo;s packaging was and didn&rsquo;t realize my card number was in plain view. Now, I&rsquo;m a pretty rational individual so I did what everyone else would have done which is call the customer service number on the back of the card. Apparently they have Sundays off so I had to leave two anxious messages on their answering machine.</p><p>They promptly called and I was so agitated I messed up my birthdate during the identity verification process. Upon explaining what happened the support person said I wasn&rsquo;t the first, which didn&rsquo;t surprise me due to the very photogenic packaging.</p><p>When I first opened it I thought, &ldquo;wow they&rsquo;re serious, I bet a lot of people are posting photos of this which could be a great awareness strategy.&rdquo; The packaging is square, which stands out among other mail, laser etched high quality cardboard with a big blue rubber band holding a clean white bank card. Move the rubber band just a half centimeter south and the card number would be completely covered, avoiding this whole situation. If this isn&rsquo;t a great case for Defensive Design&hellip;</p><p>This got me thinking about start-ups moving into established territory like banking.<a href="https://twitter.com/nathanborror/status/225268922176380929">I mentioned last week,</a> the scariest thing about [bank start-up] is giving them money — not because I don&rsquo;t think they&rsquo;ll lose it, they are backed by the FDIC, but because I don&rsquo;t think they&rsquo;ve experienced what established banks have. Customer service is quite possibly their only hope, which underlines how crucial around the clock support is. If that brave Sunday afternoon support guy hadn&rsquo;t called when he did I probably would have given up on them come Monday.</p><ol><li>Except when I&rsquo;m hungry. You should have seen this post before lunch.</li><li>It&rsquo;s worth noting I still haven&rsquo;t deposited any money into this account, therefore my panic may have been a little preemptive (possibly due to hunger). However, anytime I see the word Visa on a plastic card with my name on it I assume charges can be made.</li></ol>
]]></content></item><item><title>Adams and Jefferson</title><link>https://nathan.run/posts/2012/adams-jefferson/</link><pubDate>Wed, 04 Jul 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2012/adams-jefferson/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>One hundred and eighty six years ago both Thomas Jefferson and John Adams passed
away on this day, exactly fifty years after the adoption of the Declaration of
Independence.</p><p>It’s hard to ignore the coincidence of this timing.</p><p>A couple summers back I bought an old book containing a eulogy given by Daniel
Webster in August of 1826—I think this sums it up nicely:</p><blockquote><p>No two men now live, fellow-citizens, perhaps it may be doubted whether any two
men have ever lived in one age, who, more than those we now commemorate, have
impressed on mankind their own sentiments in regard to politics and government,
infused their own opinions more deeply into the opinions of others, or given a
more lasting direction to the current of human thought. Their work doth not
perish with them.</p></blockquote><blockquote><p>No age will come in which the American Revolution will appear less than it is,
one of the greatest events in human history. No age will come in which it
shall cease to be seen and felt, on either continent, that a mighty step, a
great advance, not only in American affairs, but in human affairs, was made on
the 4th of July, 1776.</p></blockquote><p>&ndash; Shewmaker,<a href="http://www.dartmouth.edu/~dwebster/speeches/adams-jefferson.html">104-113</a></p>
]]></content></item><item><title>A private afterlife</title><link>https://nathan.run/posts/2012/private-afterlife/</link><pubDate>Wed, 14 Mar 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2012/private-afterlife/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I spent a while last weekend thinking about death and privacy—for no particular
reason aside from taking notice of a couple books I own:</p><ul><li><a href="http://readernaut.com/books/0807842303/">The Adams Jefferson Letters</a></li><li><a href="http://readernaut.com/books/0670021946/">Jack Kerouac and Allen Ginsberg: The Letters</a></li><li><a href="http://readernaut.com/books/006171142X/">Rub Out the Words: The Letters of William S. Burroughs</a></li></ul><p>There are countless collections of correspondence floating around from a time
when an envelope was considered a form of privacy. In many cases privacy died
with the individual. Today we converse within systems where death has no effect
on privacy and this seems very unfortunate. We&rsquo;ve created an environment where
insight is forever locked-up.</p>
]]></content></item><item><title>Less is more</title><link>https://nathan.run/posts/2009/less-more/</link><pubDate>Tue, 01 Dec 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/less-more/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Hopefully you read my previous post ../sass-isnt-me about Sass and CSS preprocessors and felt my angst toward learning a new syntax. I&rsquo;ve been using<a href="http://lesscss.org">LessCSS</a> for about a week and I&rsquo;m really impressed. For starters, no new syntax to learn. This is simply an augmentation of existing CSS syntax. You get mixins, nested rules, and most importantly, variables. You also get operations but I&rsquo;ve yet to find them that useful. Here&rsquo;s my critique:</p><p>Nested rules are so natural. CSS should have worked like this all along:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">a</span> {<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#ddd</span>;<span style="color:#960050;background-color:#1e0010">:hover</span><span style="color:#960050;background-color:#1e0010">{</span><span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#999</span>;
}<span style="color:#960050;background-color:#1e0010">}</span></code></pre></div><p>Compile time is pretty slow compared to Sass. This kinda sucks when you&rsquo;re in a flow, needing to see a change and having to wait 4-5 seconds for the new file. If you install the TextMate bundle it&rsquo;ll automatically compile on save which is handy.</p><p>Variables are worth every penny:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">@<span style="color:#66d9ef">borders</span><span style="color:#f92672">:</span> #ddd;<span style="color:#f92672">div</span> {<span style="color:#66d9ef">border</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span><span style="color:#66d9ef">solid</span><span style="color:#f92672">@</span>borders;
}</code></pre></div><p>That said, I wish they had taken into consideration<a href="http://disruptive-innovations.com/zoo/cssvariables/">David Hyatt and Daniel Glazman&rsquo;s CSS Variable proposal</a> since it&rsquo;s probably the closest thing to future reality.</p><p>There doesn&rsquo;t seem to be a way to access variables across imported stylesheets. I ended up importing a variables file on every page and my compressor removes the redundant generated styles but this is a temporary hack that I hope gets fixed.</p><p>Less really needs a decent TextMate syntax highlighter. I&rsquo;m hoping to set aside some time this weekend to see if I can contribute to this.</p><p>While I would love to say<code>border-radius: 4px;</code> and have it compile with the<code>-webkit</code>, and<code>-moz</code> equivalent, the syntax enables enough abstraction so you can create the following mixin:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">border-radius</span><span style="color:#f92672">(</span>@<span style="color:#66d9ef">radius</span><span style="color:#f92672">=</span><span style="color:#f92672">4px</span><span style="color:#f92672">)</span> {<span style="color:#f92672">-webkit-border-radius</span><span style="color:#f92672">:</span> @<span style="color:#66d9ef">radius</span>;<span style="color:#f92672">-moz-border-radius</span><span style="color:#f92672">:</span> @<span style="color:#66d9ef">radius</span>;<span style="color:#f92672">border-radius</span><span style="color:#f92672">:</span> @<span style="color:#66d9ef">radius</span>;
}<span style="color:#f92672">div</span> {<span style="color:#960050;background-color:#1e0010">.border-radius(8px)</span>;
}</code></pre></div><p>In conclusion this is the most intuitive preprocessor I&rsquo;ve found. The syntax additions fit right in with native language and teaching it is a breeze. If you get the itch to contribute head on over to<a href="http://github.com/cloudhead/less">http://github.com/cloudhead/less</a></p>
]]></content></item><item><title>Sass isn't for me</title><link>https://nathan.run/posts/2009/sass-isnt-me/</link><pubDate>Mon, 30 Nov 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/sass-isnt-me/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I&rsquo;ve been window shopping the CSS preprocessor world the last week or so.<a href="http://sass-lang.com">Sass</a> seems to be everyone&rsquo;s new bicycle but it hasn&rsquo;t won me over and here&rsquo;s why:</p><ul><li>It&rsquo;s a new syntax that I don&rsquo;t want to learn or support. I have an awesome job where we often hire new people and (hopefully) acquire new clients and the last thing I want is the added friction of having to teach (and sell) a new styling syntax.</li><li>It&rsquo;s a terrible idea for a CSS preprocessor to be whitespace sensitive. Don&rsquo;t get me wrong, I love whitespace sensitive languages. It&rsquo;s why I use Python and think YAML is a Zen like experience, however, I&rsquo;m one of those nut jobs that puts properties on a single line. I actually<em>do</em> this for readability. I can scan a document of single line CSS like nobodies business. Sass looks pretty on the tutorial pages restricted to five lines but when 622 lines of CSS balloons to 3,000+ my insides begin to hurt and so does my scroll wheel. A lot of zealots (I kid again) are going to say, &ldquo;But they&rsquo;re going to support native CSS syntax (<a href="http://nex-3.com/posts/83-sass-and-less">http://nex-3.com/posts/83-sass-and-less</a>) like LessCSS!&rdquo; That&rsquo;s great, why? They should have either started with this or not done it at all. Good luck supporting two syntaxes.</li><li>Why the frak do I need control directives in CSS? If I&rsquo;m using a @for loop to generate styles I&rsquo;m doing something very wrong. CSS is not a programming language, it&rsquo;s a style language and the preprocessor community should keep that in mind.</li></ul><p>My rants aside, we can learn a lot from Sass. Variables, mixins, and nested rules are a great idea and lead to cleaner code. Why can&rsquo;t we spice up CSS and make a preprocessor that just does a few things incredibly well?<a href="http://lesscss.org">LessCSS</a> has been a great example of this, but what about a preprocessor that compiles CSS3 down to CSS2? With any luck<strong>the preprocessor community has the potential to greatly influence the CSS language</strong> by showing the W3C how people want to use it. This is a better direction than creating unnecessary friction by devising a completely new syntax for everyone to adopt.</p>
]]></content></item><item><title>Curiosity rewarded the cat</title><link>https://nathan.run/posts/2009/curiosity-rewarded-cat/</link><pubDate>Fri, 20 Nov 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/curiosity-rewarded-cat/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Good user experience is often found in the most unassuming places. We have a new restaurant opening in my neighborhood this week and I&rsquo;ve been anticipating their arrival for a few weeks now. They officially open today but two days ago revealed a very important lesson in user experience.</p><p>Two days ago I was walking down the street this new restaurant is on to get lunch from a neighboring location. The lights were on and it looked like people were ordering and eating inside before their scheduled opening. This of course caught my interest so I took a closer look. The door said something like, &ldquo;Pardon us while we get ready for our grand opening. We hope to see you this Friday.&rdquo; For some reason I ignored the sign and went in anyway. I was greeted by a hostess asking me for my invitation. I had no invitation and said, &ldquo;sorry, I&rsquo;ll come back Friday.&rdquo; She quickly said, &ldquo;that&rsquo;s okay, join us for free lunch tomorrow and bring a friend&rdquo; and she handed me two invitations.</p><p>Don&rsquo;t punish curiosity, reward it. This is a great philosophy and something we should keep in the back of our minds when designing user experiences. I didn&rsquo;t walk away from that situation feeling stupid because I ignored the sign that clearly stated they weren&rsquo;t open yet. Instead I walked away excited to a) get to try this new restaurant a day early and b) get a free lunch. It was the kind of first impression any product or service should want to make.</p>
]]></content></item><item><title>Interface harmony</title><link>https://nathan.run/posts/2009/interface-harmony/</link><pubDate>Sun, 25 Oct 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/interface-harmony/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Interface consistency is one of those things that, if done correctly, should go unnoticed. I&rsquo;ve slowly been working on a new interface for a side project and thought it&rsquo;d be a treat to share my approach.</p><p>Interfaces evolve based on the needs of people using them. Each task may require a different element. Common elements include buttons, dialogs, drop-downs, select boxes, checkboxes, input fields, etc. These elements are like notes in a composition seeking harmony.</p><p>To ensure harmony I&rsquo;ll arrange my elements on a single canvas and show the different levels of interaction. By doing this I can easily spot inconstancies. This also helps build a style guide for future elements and interaction.</p><p>This is not groundbreaking by any means. Just thought I&rsquo;d share and help promote the practice :)</p>
]]></content></item><item><title>Save RAM with mobile middleware</title><link>https://nathan.run/posts/2008/save-ram-mobile-middleware/</link><pubDate>Wed, 07 Oct 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/save-ram-mobile-middleware/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>A while back I wrote an article on how to set up a mobile site with Django ../going-mobile. Currently I have a Slicehost account which includes 256MB of RAM. My resources are tight and I really dislike having another set of unnecessary Apache processes for a mobile site that, aside from different templates, is using the same code base. The solution is quite simple, write a middleware.</p><p>The following code checks the incoming request for &rsquo;m' or &lsquo;mobile&rsquo; in the domain name. If it exists the TEMPLATE_DIRS is replaced by a MOBILE_TEMPLATE_DIRS setting:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span><span style="color:#a6e22e">MobileMiddleware</span>(object):<span style="color:#66d9ef">def</span><span style="color:#a6e22e">process_request</span>(self, request):
domain<span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>META<span style="color:#f92672">.</span>get(<span style="color:#e6db74">'HTTP_HOST'</span>,<span style="color:#e6db74">''</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">'.'</span>)<span style="color:#66d9ef">if</span><span style="color:#e6db74">'m'</span><span style="color:#f92672">in</span> domain<span style="color:#f92672">or</span><span style="color:#e6db74">'mobile'</span><span style="color:#f92672">in</span> domain:
settings<span style="color:#f92672">.</span>TEMPLATE_DIRS<span style="color:#f92672">=</span> settings<span style="color:#f92672">.</span>MOBILE_TEMPLATE_DIRS<span style="color:#66d9ef">else</span>:
settings<span style="color:#f92672">.</span>TEMPLATE_DIRS<span style="color:#f92672">=</span> settings<span style="color:#f92672">.</span>DESKTOP_TEMPLATE_DIRS</code></pre></div><p>You&rsquo;ll notice this requires you to also have a DESKTOP_TEMPLATE_DIRS (or whatever you want to call it) so you can switch back to the desktop version.</p><p>If you&rsquo;re using any sort of caching you&rsquo;ll want be sure and change CACHE_MIDDLEWARE_KEY_PREFIX when you change to mobile templates and back again.</p><p>You&rsquo;ll probably want to place this middleware after Session and Authentication Middleware and before the Cache Middleware like so:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">MIDDLEWARE_CLASSES<span style="color:#f92672">=</span> (<span style="color:#e6db74">'django.contrib.sessions.middleware.SessionMiddleware'</span>,<span style="color:#e6db74">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,<span style="color:#e6db74">'playgroundblues.middleware.MobileMiddleware'</span>,<span style="color:#e6db74">'django.middleware.cache.UpdateCacheMiddleware'</span>,<span style="color:#e6db74">'django.middleware.common.CommonMiddleware'</span>,<span style="color:#e6db74">'django.middleware.cache.FetchFromCacheMiddleware'</span>,
)</code></pre></div><p>Go Green! Save RAM! (kidding)</p>
]]></content></item><item><title>Working with Python and RabbitMQ</title><link>https://nathan.run/posts/2009/working-django-and-rabbitmq/</link><pubDate>Wed, 20 May 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/working-django-and-rabbitmq/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I recently installed RabbitMQ to handle some message queuing needs at Readernaut
and thought I&rsquo;d share how everything came together. If you&rsquo;d like to learn more about RabbitMQ please<a href="http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/">read this.</a></p><p>To use RabbitMQ with python you need<a href="http://barryp.org/software/py-amqplib/">py-amqplib</a> because Rabbit uses the AMQP standard. To make amqplib a little easier to use I needed a simple script that did three things:</p><ul><li>Easy way to connect to RabbitMQ.</li><li>Easy way to pull stuff out of the queue.</li><li>Easy way to throw stuff into the queue.</li></ul><p><a href="http://github.com/ask/carrot">This project</a> which handles all this and much more but it&rsquo;s a little too complex for what I&rsquo;m doing. All I needed was something very small, straightforward, and EASY.</p><p>After staring at Carrot for a few days I decided to distill down what I needed
into a single script I&rsquo;m calling Flopsy. So here we go:</p><h2 id="step-1-set-global-variables">Step 1: Set global variables:</h2><p>And there we go! Flopsy weighs in at under 80 lines of code and it can be found on<a href="http://github.com/nathanborror/flopsy">Github.</a> Most of the above will make a lot more sense after reading<a href="http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/">Rabbits and Warrens</a> and investigating RabbitMQ.</p><h2 id="update">Update</h2><p>I just realized, this isn&rsquo;t at all Django specific so my title is a little misleading (changing). That said, you could most certainly use Flopsy with straight up Python :)</p>
]]></content></item><item><title>Capturing content in Django templates</title><link>https://nathan.run/posts/2009/capturing-content-django-templates/</link><pubDate>Sat, 28 Feb 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2009/capturing-content-django-templates/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>As a template designer there are times when you have structural code surrounding a block which is waiting on content from a child template. It may look something like:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span><span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">"content_title"</span>>
{% block content_title %}{% endblock %}
&lt;/<span style="color:#f92672">div</span>></code></pre></div><p>Sometimes this block is never filled so ideally I want the<code>DIV</code> element in this case gone. This isn&rsquo;t easy because there&rsquo;s no way to know whether content is headed towards the block so one solution that I&rsquo;ve used is:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% block content_title_wrapper %}
&lt;<span style="color:#f92672">div</span><span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">"content_title"</span>>
{% block content_title %}{% endblock %}
&lt;/<span style="color:#f92672">div</span>>
{% endblock %}</code></pre></div><p>This requires me to make an empty call to a wrapper block in a child template to clear out the div element. It&rsquo;s obviously gross because I end up with empty block calls all over child templates. Yuk!</p><p>Django community to the rescue! After asking around and some help from<a href="http://lazypython.blogspot.com/">Alex</a>,<a href="http://ericholscher.com/">Eric</a>, and<a href="http://traviscline.com/blog/">Travis</a> we stumbled upon<a href="http://www.djangosnippets.org/snippets/545/">Django Capture</a>, a django snippet created by kcarnold (Kenneth Arnold). Capture essentially takes a blob of content and makes it into a variable for you like so:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{% capture as content_title %}
{% block content_title %}{% endblock %}
{% endcapture %}
{% if content_title %}
&lt;<span style="color:#f92672">div</span><span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">"content_title"</span>>{{ content_title }}&lt;/<span style="color:#f92672">div</span>>
{% endif %}</code></pre></div><p>This eliminates the need for all those crufty wrappers in child templates. I&rsquo;m sure there are other uses for this too, one being the ability to print content multiple times on the page like pagination before and after lists. Kenneth originally used the example of capturing content for translations.</p><p>There&rsquo;s a<a href="http://code.djangoproject.com/ticket/6378">ticket open</a> with some thoughts on adding this functionality to the existing<code>with</code> tag which makes perfect sense. It&rsquo;d be great if we could hash this out and get it into Django proper because I&rsquo;m sure others would find it useful.</p>
]]></content></item><item><title>What's next</title><link>https://nathan.run/posts/2008/whats-next/</link><pubDate>Fri, 12 Dec 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/whats-next/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Does it make sense to reinvent the wheel every time we start a new project? No. My work echoes my past and I stand by it. Some say, &ldquo;that looks like Readernaut&rdquo; or &ldquo;that looks like Playground Blues&rdquo; and I say yes, they are me.</p><p>If it worked there it will work here. When a problem is solved I move on because each project has its fair amount of new problems and I&rsquo;d rather spend time on new, more interesting problems. This doesn&rsquo;t mean I don&rsquo;t improve on past solutions. Everything evolves.</p><p>We all bring our individual design style and solutions to the table. Projects are a collection of problems and if you quickly eliminate the solved problems you can dig your heals into the unsolved.</p>
]]></content></item><item><title>Message Queuing imports</title><link>https://nathan.run/posts/2008/message-queuing-imports/</link><pubDate>Fri, 05 Sep 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/message-queuing-imports/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Last week I ran into some problems dealing with large book imports on Readernaut. I tested the system for around 50-100 books but had no idea people would upload lists of 900+ books. This begged the question, how do you handle importing very large sets of data before the browser times out?</p><h2 id="brief-example">Brief example</h2><p>User uploads a list of 1000 ISBNs to be imported into their library. Each book, if not already in the system, needs to be imported via another service like Amazon.</p><h2 id="solution-1-threading">Solution 1: Threading</h2><p>Use threading to push off the long running process to another thread while directing the browser to a status page. You could setup an Ajax request to periodically check on the status of the import and update a progress bar.</p><p>This solution is generally a bad idea. It&rsquo;s super easy to do and tests well in a development environment, but has scary consequences down the road, especially if you don&rsquo;t have a lot of server resources.</p><h2 id="solution-2-message-queuing">Solution 2: Message Queuing</h2><p><a href="http://en.wikipedia.org/wiki/Message_queue">Message queuing</a> is a very basic asynchronous method of storing items in a queue to be processed later.</p><p>So for this instance I created a model called Message that has three fields:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span><span style="color:#a6e22e">Message</span>(models<span style="color:#f92672">.</span>Model):
user<span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>ForeignKey(User)
subject<span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>CharField(max_length<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>)
message<span style="color:#f92672">=</span> models<span style="color:#f92672">.</span>TextField()</code></pre></div><p>This allowed me to slurp in the list of ISBNs and break them out into 20 book chunks. Each chunk gets related to a user and a subject of &ldquo;book_import.&rdquo; Once it&rsquo;s finished I can send the user to a progress page where each chunk is processed one by one until they&rsquo;re gone. Here&rsquo;s a simple example of a progress view:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span><span style="color:#a6e22e">book_import_progress</span>(request):
message_list<span style="color:#f92672">=</span> Message<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>filter(user<span style="color:#f92672">=</span>request<span style="color:#f92672">.</span>user, subject<span style="color:#f92672">=</span><span style="color:#e6db74">'book_import'</span>)
handle_message(message_list[<span style="color:#ae81ff">0</span>])<span style="color:#66d9ef">if</span> len(message_list)<span style="color:#f92672">></span><span style="color:#ae81ff">0</span>:<span style="color:#66d9ef">return</span> render_to_response(<span style="color:#e6db74">'books/progress.html'</span>, {}, context_instance<span style="color:#f92672">=</span>RequestContext(request))<span style="color:#66d9ef">else</span>:<span style="color:#66d9ef">return</span> HttpResponseRedirect(<span style="color:#e6db74">'/user/books'</span>)</code></pre></div><p>First we get a list of messages, then we process the first 20 books. If there are more messages to be processed we refresh the page otherwise we send the user to their books page.</p><p>Additionally it&rsquo;s super simple to Ajaxify the progress page by using Django&rsquo;s handy<code>request.is_ajax()</code> and returning a JSON object with info on the progress of the import. Message Queuing is pretty handy for a lot of situations and Amazon even has a service for it called<a href="http://www.amazon.com/Simple-Queue-Service-home-page/b?ie=UTF8&amp;node=13584001">Simple Queuing Service</a> (SQS).</p>
]]></content></item><item><title>Creating a basic API with Django</title><link>https://nathan.run/posts/2008/creating-basic-api-django/</link><pubDate>Mon, 11 Aug 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/creating-basic-api-django/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Creating a simple public API for your site is a lot easier than you may think with Django. You&rsquo;re basically just creating another view and serving it as XML or JSON instead of HTML.</p><h2 id="whats-public">What&rsquo;s public?</h2><p>Decide what you want to be public. The best answer is the stuff you&rsquo;re already displaying in your HTML templates. Then you need to create an entry in your url conf.</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">url(<span style="color:#e6db74">r</span><span style="color:#e6db74">'^api/v1/(?P&lt;username>[-\w]+)/notes/?$'</span>,<span style="color:#e6db74">'readernaut.api.views.user_notes'</span>),</code></pre></div><h2 id="create-the-view">Create the view</h2><p>In the case for Readernaut I wanted to provide an XML feed for users notes. Here is what the view looks like:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span><span style="color:#a6e22e">user_notes</span>(request, username):
reader<span style="color:#f92672">=</span> get_object_or_404(User, username__iexact<span style="color:#f92672">=</span>username)
note_list<span style="color:#f92672">=</span> Note<span style="color:#f92672">.</span>objects<span style="color:#f92672">.</span>filter(user<span style="color:#f92672">=</span>reader)
context<span style="color:#f92672">=</span> {<span style="color:#e6db74">'reader'</span>: reader,<span style="color:#e6db74">'note_list'</span>: note_list }<span style="color:#66d9ef">return</span> render_to_response(<span style="color:#e6db74">'api/note_list.html'</span>, context, context_instance<span style="color:#f92672">=</span>RequestContext(request), mimetype<span style="color:#f92672">=</span><span style="color:#e6db74">'application/xml'</span>)</code></pre></div><p>This is a simplified version of the view but, as you can see, you could easily add pagination and other hooks to handle ordering and such.</p><h2 id="create-the-template">Create the template</h2><p>The view is pointing to the template<code>api/note_list.html</code> so all we need to do is create that file and build out our XML schema.</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version="1.0" encoding="utf-8"?></span><span style="color:#f92672">&lt;notes</span><span style="color:#a6e22e">version=</span><span style="color:#e6db74">"1.0"</span><span style="color:#f92672">></span>
{% for note in note_list %}<span style="color:#f92672">&lt;note></span><span style="color:#f92672">&lt;note_id></span>{{ note.id }}<span style="color:#f92672">&lt;/note_id></span><span style="color:#f92672">&lt;user></span><span style="color:#f92672">&lt;username></span>{{ note.user }}<span style="color:#f92672">&lt;/username></span><span style="color:#f92672">&lt;/user></span><span style="color:#f92672">&lt;book_edtion></span><span style="color:#f92672">&lt;title></span>{{ note.book_edition }}<span style="color:#f92672">&lt;/title></span><span style="color:#f92672">&lt;isbn></span>{{ note.book_edition.isbn }}<span style="color:#f92672">&lt;/isbn></span><span style="color:#f92672">&lt;/book_edtion></span><span style="color:#f92672">&lt;body</span><span style="color:#a6e22e">class=</span><span style="color:#e6db74">"inner"</span><span style="color:#f92672">></span><span style="color:#f92672">&lt;header></span><span style="color:#f92672">&lt;h1>&lt;a</span><span style="color:#a6e22e">href=</span><span style="color:#e6db74">"/"</span><span style="color:#f92672">></span>Nathan Borror<span style="color:#f92672">&lt;/a>&lt;/h1></span><span style="color:#f92672">&lt;/header></span><span style="color:#75715e">&lt;![CDATA[{{ note.note }}]]></span><span style="color:#f92672">&lt;/body></span><span style="color:#f92672">&lt;page_reference></span>{{ note.page_reference }}<span style="color:#f92672">&lt;/page_reference></span><span style="color:#f92672">&lt;created></span>{{ note.created|date:"Y-m-d G:i T" }}<span style="color:#f92672">&lt;/created></span><span style="color:#f92672">&lt;modified></span>{{ note.modified|date:"Y-m-d G:i T" }}<span style="color:#f92672">&lt;/modified></span><span style="color:#f92672">&lt;/note></span>
{% endfor %}<span style="color:#f92672">&lt;/notes></span></code></pre></div><p>How you define your XML templates is up to you. I name my templates with the<code>.html</code> extension simply because my text editor highlights the syntax better than if it were XML. It doesn&rsquo;t matter because the mime-type dictates how the file is served up. Good luck!</p>
]]></content></item><item><title>Capistrano rules</title><link>https://nathan.run/posts/2008/capistrano-rules/</link><pubDate>Sat, 17 May 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/capistrano-rules/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I&rsquo;ve grown tired of committing changes to my subversion repository, logging into my server, updating my live checkout, and restarting python processes. I finally decided to implement<a href="http://www.capify.org/">Capistrano</a> and eliminate this repetition.</p><p>Here are my repetitive set of commands:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ssh playgroundblues.com
$ cd ~/projects/playgroundblues
$ svn up
$ cd ~/www/playgroundblues.com/www
$ touch django.fcgi</code></pre></div><p>Now, with the help of Capistrano, I just type:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cap deploy</code></pre></div><p>You&rsquo;ll first need to<a href="http://www.capify.org/install">install Capistrano</a> which is as simple as<code>gem install -y capistrano</code>. Once that&rsquo;s complete you need to create a &ldquo;capfile&rdquo; which is where you&rsquo;ll define your tasks:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">task<span style="color:#e6db74">:deploy</span>,<span style="color:#e6db74">:hosts</span><span style="color:#f92672">=></span><span style="color:#e6db74">"username@playgroundblues.com"</span><span style="color:#66d9ef">do</span>
run<span style="color:#e6db74">"cd ~/projects/playgroundblues; svn up; cd ~/www/playgroundblues.com/www/; touch django.fcgi"</span><span style="color:#66d9ef">end</span></code></pre></div><p>The above will vary depending on your host and directory setup. After you save the above file and as long as you&rsquo;re in the directory where the capfile resides you can, in the terminal, type<code>cap deploy</code> and Capistrano does the rest. Bliss.</p>
]]></content></item><item><title>Aspen Simulator</title><link>https://nathan.run/posts/2008/aspen-simulator/</link><pubDate>Tue, 13 May 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/aspen-simulator/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>As much as I&rsquo;d like to blog about my trip to Austin and SXSW last week I&rsquo;m just too excited over the<a href="http://developer.apple.com/iphone/program/">iPhone SDK</a> goodies that dropped last Thursday.</p><p>You may be asking yourself, &ldquo;he&rsquo;s a web guy, why does he care?&rdquo; Well, there happens to be a beautiful gem tucked away called the Aspen Simulator.</p><p>This is a complete pixel and functionally perfect replica of the iPhone and it&rsquo;s fantastic for testing web apps. Before I was spending a lot of time back and forth between my iPhone and my desktop but since this thing is so identical I really don&rsquo;t have to own an iPhone (but I will anyway).</p><p>It&rsquo;s a little hard to find, but after installing the<a href="http://developer.apple.com/iphone/devcenter/">developer tools</a> look under / Developer / Platforms / AspenSimulator.platform / Developer / Applications.</p><h2 id="a-few-tricks">A few tricks</h2><p>If you want to do a two finger zoom just hold down the option key while click dragging. You can also rotate the the phone by using the command key and right left arrows. To lock the phone press command L. Still try to figure out how to do a two finger scroll.</p>
]]></content></item><item><title>Ah-ha Event Delegation</title><link>https://nathan.run/posts/2008/ah-ha-event-delegation/</link><pubDate>Mon, 05 May 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/ah-ha-event-delegation/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Wrapping my head around things like OOP took months. It&rsquo;s not because I&rsquo;m an idiot (I don&rsquo;t think) - it&rsquo;s just because I needed all the explanations to marinate before having an ah-ha! moment.</p><p>I had an ah-ha today, with regards to Event Delegation. I&rsquo;ve never seemed to completely understand events, yet I use them all the time. They&rsquo;re an essential aspect of Actionscript and Javascript and there are two basic ways of capturing events, Event Handling and Event Delegation.</p><p>Most of us, whether we realize it or not, are familiar with Event Handling. Imagine we have an unordered list with a class name<code>.nav</code> and each item has a link. For this example, I&rsquo;m going to use jQuery, so if you wanted to call a javascript function when the user clicks a link in the list, you&rsquo;d do the following:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">'.nav a'</span>).<span style="color:#a6e22e">each</span>(<span style="color:#66d9ef">function</span>() {<span style="color:#a6e22e">$</span>(<span style="color:#66d9ef">this</span>).<span style="color:#a6e22e">click</span>(<span style="color:#a6e22e">handleClick</span>);
});<span style="color:#66d9ef">function</span><span style="color:#a6e22e">handleClick</span>(<span style="color:#a6e22e">event</span>) {<span style="color:#75715e">// fun stuff goes here</span><span style="color:#75715e"/>}</code></pre></div><p>If you&rsquo;re jQuery savvy, the above code should be familiar. We&rsquo;re looping over all the anchor tags within the unordered list and assigning the function &ldquo;handleClick&rdquo; to the click event. Each time someone clicks a link, &ldquo;handleClick&rdquo; is called and the anchor tag is in the function scope. This is Event Handling.</p><p>Event Delegation makes things a little simpler by eliminating the need to loop over every anchor tag. We simply apply the click event to the unordered list like so:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">'.nav'</span>).<span style="color:#a6e22e">click</span>(<span style="color:#a6e22e">handleClick</span>);</code></pre></div><p>Since the click event is registered with the unordered list, it gets fired off when anything inside the list is clicked. The scope of the handleClick function is set to the<code>&lt;ul></code> but if you want to target the anchor tag below the mouse click, you use<code>event.target</code>. This is Event Delegation.</p><p>Both are very powerful but in most instances Event Delegation is going to require less code while boosting performance. Many thanks to Jacob Kaplan-Moss for making this ah-ha moment possible.</p>
]]></content></item><item><title>Gadget fast</title><link>https://nathan.run/posts/2008/gadget-fast/</link><pubDate>Fri, 18 Apr 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/gadget-fast/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>My iPhone and laptop will be unplugged starting Friday evening for two days. I&rsquo;ve let the fog of distractions generated by these two devices grow too thick so for the next few days they&rsquo;ll be turned off.</p><p>It doesn&rsquo;t stop there. The following week Twitter, Flickr, an my feed reader will be muted. I have nothing against these services, but it&rsquo;s time to step back and take the pulse of things around me and see if I&rsquo;m missing something.</p><p>I used to do more gadget/service fasting and I&rsquo;m well over due. My plan is to do some brainstorming for a few projects currently on my plate and catch up on some reading, but more importantly, spend time with my girlfriend.</p><p>See you all next week!</p>
]]></content></item><item><title>Going mobile</title><link>https://nathan.run/posts/2008/going-mobile/</link><pubDate>Mon, 18 Feb 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/going-mobile/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Over the weekend, I decided to whip up a mobile (iPhone) version of Playground Blues. I walked into Broadway Cafe around 3pm on Saturday, and by 5:30, I had m.playgroundblues.com. Here&rsquo;s how it went down.</p><h2 id="step-1">Step 1</h2><p>Since I&rsquo;m still using Dreamhost and FastCGI, I created my .htaccess file along with my dispatch.fcgi file for my new sub-domain as usual. Made one little change to my dispatch file: instead of having<code>DJANGO_SETTINGS_MODULE</code> pointing to playgroundblues.settings, I pointed it to playgroundblues.settings_mobile.</p><p>Then, in my project folder, I made a duplicate of my settings file and renamed it to<code>settings_mobile.py.</code> Let me emphasize again, this is a duplicate.</p><h2 id="step-2">Step 2</h2><p>Created a new templates folder and named it &ldquo;templates_mobile.&rdquo; Opened up my<code>settings_mobile.py</code> file and added a new line to the top of my<code>TEMPLATE_DIRS</code> tuple. This tells Django to first look in mobile templates, and if the template doesn&rsquo;t exist, fall back on regular site templates. (Remember, this is only for my mobile site.)</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">TEMPLATE_DIRS<span style="color:#f92672">=</span> (<span style="color:#e6db74">"/home/playgroundblues/templates_mobile/"</span>,<span style="color:#e6db74">"/home/playgroundblues/templates/"</span>,
)</code></pre></div><h2 id="step-3">Step 3</h2><p>In my new templates_mobile folder, I created a new base template called<code>base_mobile.html</code> which I&rsquo;ll use to extend in all my child templates instead of the main sites base.html. Then I went through the sites pages and recreated mirrored templates in the mobile folder. So<code>/templates/blog/post_detail.html</code> was overwritten by<code>/templates_mobile/blog/post_detail.html.</code> I stripped out extraneous content that was unnecessary for someone on the go, leaving core content and functionality.</p><p>The nice thing is if someone happens to creep into a section that you haven&rsquo;t gotten to (as long as you didn&rsquo;t override base.html), your site will display as it would on a computer proper. If there&rsquo;s a more succinct way of doing this, please let me know.</p>
]]></content></item><item><title>iPhone bookmark iconage</title><link>https://nathan.run/posts/2008/iphone-bookmark-iconage/</link><pubDate>Tue, 15 Jan 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2008/iphone-bookmark-iconage/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>If you&rsquo;re wondering how to control the icon that gets generated for your webpage with the new 1.1.3 iPhone release, look no further than Apple&rsquo;s iPhone Dev Center.</p><p>Apple has added a section called &ldquo;Create a WebClip Bookmark Icon&rdquo; and it calls for a 57x57 pixel icon. After some testing today I&rsquo;ve concluded this recommended sizing results in a fuzzy icon, largely due to the iPhone being a 163 ppi display.</p><p>Instead of sticking with the recommended sizing I bumped it up to 158x158. When this gets scaled you&rsquo;ll be left with a crisp icon that sits nicely amongst Apples crisp icons. Onward.</p>
]]></content></item><item><title>Flash, meet H.264</title><link>https://nathan.run/posts/2007/flash-meet-h264/</link><pubDate>Tue, 04 Dec 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/flash-meet-h264/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Adobe just<a href="http://www.adobe.com/aboutadobe/pressroom/pressreleases/200712/120407adobemoviestar.html">released</a> Update 3 of Flash Player 9. This is HUGE. Streaming video is no longer a laughing matter. Streaming High Definition video will become common place and it starts today.</p><p>Everyone talks about BlueRay and HD-DVD, but what they don&rsquo;t realize is they&rsquo;ve already been obsolesced before catching stride. VHS is dead, brick and mortar video rental is on life support, and DVD just checked in with chest pains.</p><h2 id="how-long-will-it-take">How long will it take?</h2><p>I give Adobe four months to capture 80% of the market share. It usually takes about a year to cover 90% of the web with a new Flash version, but once YouTube and MySpace deliver, the game&rsquo;s over.</p><h2 id="what-does-this-mean">What does this mean?</h2><p>It means you can cancel your cable. I recently did because I&rsquo;m getting most of my content from iTunes and YouTube. I paid around $100 a month for cable and watched nothing worthwhile. Now I could<strong>own</strong> around fifty shows a month for the same price &ndash; not to mention most of the stuff I like is free. Let&rsquo;s also not forget the portability factor :)
This is a huge step forward in providing tools to people who need them. Now go<a href="http://www.adobe.com/go/getflashplayer">upgrade</a>.</p>
]]></content></item><item><title>Django Basic Apps</title><link>https://nathan.run/posts/2007/django-basic-apps/</link><pubDate>Sun, 02 Dec 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/django-basic-apps/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I&rsquo;ve been working on abstracting some Django applications from past projects so they can effortlessly be plugged into future projects. I hate writing the same blog application repeatedly, so this is an attempt to make life easier. I think this will be a fun, little suite of plug-n-play Django apps that everyone can benefit from.</p><p>I&rsquo;m calling this suite Basic Apps with the hopes they&rsquo;ll live up to their name. They&rsquo;re freely distributed under the<a href="http://www.opensource.org/licenses/bsd-license.php">New BSD License</a> and hosted at Google Code. The goal is to use the month of December to get feedback from everyone and finalize the models, so<strong>beware of model changes.</strong>
The apps I&rsquo;ll be introducing today include Basic Blog, Basic Places, Basic People, Basic Library, and Basic Profiles. Before you run off keep in mind these are<em>basic</em> apps. You won&rsquo;t see anything earth shattering. The idea is to be simple and pluggable so when it comes time to add a blog or user profiles to your project you&rsquo;ve got a jumping off point. That said, I&rsquo;d like to provide a brief description of each app:</p><h2 id="basic-bloghttpcodegooglecompdjango-basic-blog"><a href="http://code.google.com/p/django-basic-blog/">Basic Blog</a></h2><p>This is a blog, nothing more nothing less. There is a Post model and a Category model. The dependancies include Django Comments and<a href="http://code.google.com/p/django-tagging/">Django Tagging</a>.</p><h2 id="basic-placeshttpcodegooglecompdjango-basic-places"><a href="http://code.google.com/p/django-basic-places/">Basic Places</a></h2><p>This app stores place information, (gasp!) The models include Place Type, City, Point, and Place. Django Tagging is the only dependancy.</p><h2 id="basic-peoplehttpcodegooglecompdjango-basic-people"><a href="http://code.google.com/p/django-basic-people/">Basic People</a></h2><p>This app stores people information. (you&rsquo;re kidding!) This app has nothing to do with Users. The people that go here are individuals that will never have access to your project. It is used heavily with the library app. The models include Person Type and Person.</p><h2 id="basic-libraryhttpcodegooglecompdjango-basic-library"><a href="http://code.google.com/p/django-basic-library/">Basic Library</a></h2><p>This actually contains three apps: Music, Movies, and Books. All three are independent and should be placed independently in your PYTHONPATH. Movies has one model, Movie. Books has two, Book and Publisher. Music has Label, Band, Album, and Song. All three depend on the Basic People app. They all have a Genre model to boot!</p><h2 id="basic-profileshttpcodegooglecompdjango-basic-profiles"><a href="http://code.google.com/p/django-basic-profiles/">Basic Profiles</a></h2><p>This app extends the Django User app, providing added user information. The models include Profile, Mobile Service, Link, Service, and Service Type.
All of these apps need Python 2.4 or higher and Django 0.97 or higher. If you have any feature requests or notice any issues please create a ticket on the corresponding Google Code site using the Issues tab. I&rsquo;ve also started a<a href="http://groups.google.com/group/django-basic-apps">Django Basic Apps</a> discussion over at Google Groups. Now, let&rsquo;s build some shit.</p>
]]></content></item><item><title>Django Sprint</title><link>https://nathan.run/posts/2007/django-sprint/</link><pubDate>Sat, 01 Dec 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/django-sprint/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Armed with high levels of legally addictive stimulants, silver laptops, and brilliant minds, Django will get even closer to 1.0<a href="http://www.djangoproject.com/weblog/2007/nov/07/sprint/">today</a>. If you have any interest in being apart of today&rsquo;s event, scurry over to the Django site and scan for tickets that catch your eye and expertise. Join us in IRC (irc.freenode.net) in the #django-sprint room or if you&rsquo;re lucky enough to live near Lawrence, Kansas come join us!</p>
]]></content></item><item><title>Juggling Django settings modules</title><link>https://nathan.run/posts/2007/juggling-django-settings-modules/</link><pubDate>Tue, 06 Nov 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/juggling-django-settings-modules/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>If you find yourself juggling multiple Django projects and constantly changing the DJANGO_SETTINGS_MODULE variable, try this simple shortcut.</p><p>Upon diving into a particular project I define an alias in my .bash_profile that gets me to the project directory in as few keystrokes as possible. For example, to get to my playgroundblues directory I simply type &lsquo;pb&rsquo; and I&rsquo;m in the root of playgroundblues.com. Here is the line of code in my .bash_profile:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">alias pb<span style="color:#f92672">=</span><span style="color:#e6db74">"cd /Working/www/playgroundblues.com/"</span></code></pre></div><p>Pretty straight forward, however, since I&rsquo;m going to that project I might as well set the DJANGO_SETTINGS_MODULE at the same time so I&rsquo;ve altered the line above to:</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">alias pb<span style="color:#f92672">=</span><span style="color:#e6db74">"cd /Working/www/playgroundblues.com/; export DJANGO_SETTINGS_MODULE=playgroundblues.settings"</span></code></pre></div><p>Now I&rsquo;m in the proper directory with the proper settings file is in focus. Bliss.</p>
]]></content></item><item><title>Care to scrum?</title><link>https://nathan.run/posts/2007/care-scrum/</link><pubDate>Wed, 17 Oct 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/care-scrum/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>We need more scrums and less meetings. A scrum (<a href="http://en.wikipedia.org/wiki/Stand-up_meeting">http://en.wikipedia.org/wiki/Stand-up_meeting</a>)
is a 5-10 minute stand-up meeting. About 80% of the meetings I&rsquo;ve ever attended
have included at least five people. Any meeting over three becomes a presentation
while one bloviates and others wander.</p><p>It&rsquo;s been a while since my last scrum. It included seven people, complete
participation, no dominance, one referee, and was contained within a 10 minute
package. Rather than walking away in a typical post-meeting cloud of confusion,
I left the scrum feeling clear and informed. It was the best mode of collaborative
communication I&rsquo;ve been a part of. Again, I say more scrums, less meetings.</p>
]]></content></item><item><title>Trials of the I-70 commute</title><link>https://nathan.run/posts/2007/trials-i-70-commute/</link><pubDate>Mon, 15 Oct 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/trials-i-70-commute/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>A while ago I began working back in the big city while remaining in modest
Lawrence. This required a 40 min. x 2 drive into the sun five days a week. It
wasn&rsquo;t so bad at first, but the race through traffic and mass of incandescent
gas started taking its toll.</p><p>I decided to evaluate what was wearing me out. The sun, for one, was melting my
retinas and giving me headaches. This stress could easily be eliminated with the
right shades, polarized to be exact. They immediately reduced eye strain and
lowered my stress level. I was still experiencing anxiety that led to being
drained at work and home. This had to be stemming from my colleagues on the road.</p><p>Driving I-70 during rush hour is like threading a needle. You&rsquo;re constantly
struggling to out-pace traffic so you can relax and cruise the rest of the way
home. Only problem is your cruising doesn&rsquo;t happen until the last 10-15 miles.
I averaged 80 to 85 mph and decided one day just go the speed limit, 70 mph.</p><p>The results were immediate. I didn&rsquo;t have to pass anyone! That alone leveled my
stress. Then I realized I wasn&rsquo;t getting into any traffic jams because they were
all hurdling past me. I could hold a steady cruising speed without having to
touch my brake. This also upped my miles per gallon giving me an extra trip on
a full tank.</p><p>The irony was seeing everyone who passed me at the toll booth or the first
stoplight, so I knew I wasn&rsquo;t losing any time.</p><p>After spreading the word about this revelation, a coworker was telling me about
some research comparing fluid dynamics and traffic waves (<a href="http://en.wikipedia.org/wiki/Traffic_wave)">http://en.wikipedia.org/wiki/Traffic_wave)</a>.
The Wikipedia page describes it best:</p><blockquote><p>A deeper understanding of traffic waves is a goal of the physical study of
traffic flow. When looking at traffic waves, the traffic itself can often be
looked at in a manner of fluid dynamics. It has been said that by knowing how
traffic waves are created, drivers can sometimes reduce their effects by
increasing vehicle headways and reducing the use of brakes, ultimately
alleviating traffic congestion for everyone in the area.</p></blockquote><p>So to my dear fellow I-70 commuters, you don&rsquo;t have to thank me; but just
remember who&rsquo;s making your life easier. See you at the toll booth!</p>
]]></content></item><item><title>Subliminal Culture</title><link>https://nathan.run/posts/2007/subliminal-culture/</link><pubDate>Fri, 21 Sep 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/subliminal-culture/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>Lately I&rsquo;ve been reading more of Lev Manovich&rsquo;s (<a href="http://www.manovich.com">http://www.manovich.com</a>)
Language of New Media. Manovich discusses the methods in which we access new
media. He mentions some research done by Paul Virilio on the collapsing effect
technology has on the distances between people and content. Before, if a person
wanted to see the works of Da Vinci they&rsquo;d have to travel to a book store or an
art museum. With the advent of new media it&rsquo;s as simple as pulling up a browser.</p><p>The consequences of this immediacy are somewhat evident. The moment of seeing a
work like Ginevra de Benci (<a href="https://en.wikipedia.org/wiki/Ginevra_de%27_Benci">https://en.wikipedia.org/wiki/Ginevra_de%27_Benci</a>)
on a screen is most likely followed up with going to Digg or checking email but
seeing this 15th century master work at the National Gallery
(<a href="http://en.wikipedia.org/wiki/National_Gallery_of_Art">http://en.wikipedia.org/wiki/National_Gallery_of_Art</a>) is followed with
indescribable emotions. The immediacy of content to some degree robs us of these
experiences, but we&rsquo;re still absorbing content on a subliminal level.</p><p>These fleeting moments of content absorption can heighten the experience of
standing in front of the real thing. By skimming da Vinci&rsquo;s Wikipedia entry I&rsquo;ll
have seen Ginevra and maybe even read a few lines about her so upon seeing the
piece in person I may have a slight familiarity which leads to a better
appreciation of the work thus heightening the experience. In advertising we call
this subliminal advertising and judging by this little experiment
(<a href="http://youtube.com/watch?v=ZyQjr1YL0zg)">http://youtube.com/watch?v=ZyQjr1YL0zg)</a>, it proves to be very effective.</p><p>Virilio seems to think the immediacy of the web will stunt peoples physical
interactions with content thus stunting reflection and critical thinking. I see
his point but I think it has the potential to heighten and increase our
experiences.</p>
]]></content></item><item><title>Manually Compressing PNGs</title><link>https://nathan.run/posts/2007/manually-compressing-pngs/</link><pubDate>Tue, 18 Sep 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/manually-compressing-pngs/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>With the advent of some very clean hacks to make PNGs work in IE I&rsquo;ve found
myself working them into my designs more. Using them has allowed me to achieve
some effects that were next to impossible with JPEGs and GIFs. The biggest
hurdle in using PNGs is their file size. The export tools in Photoshop tie your
hands behind your back, not allowing you to tweak anything that may lead to a
more compact file. Until Photoshop adds some functionality I think I may have a
handy solution.</p><p>To understand the solution we need to understand the composition of a PNG. The
most popular use case for PNG is it&rsquo;s levels of transparency (or alpha channel),
256 to be exact. Along with this it has a 24bit color palate. In photoshop there
are two settings in Save for Web, 8bit PNG and 24bit PNG. The 24bit is most
desirable because it enables the alpha channel. The PNG format has many many
other features but I&rsquo;m only going to focus on these few to move this post along.</p><p>So we can deduce from the above that we have an image with two qualities, 24bit
color and 256 alpha channel. Both are being compressed somewhat independently.
The only problem is, Photoshop doesn&rsquo;t let us change the compression on the
24bit part or on the alpha channel part. If we focus on compressing the 24bit
part we can potentially shave off a lot of the fat.</p><p>For this example I&rsquo;m going to use a box that has a lot of texture and a drop
shadow. To compress the inside part that doesn&rsquo;t have a drop shadow I&rsquo;m simply
going to select it, copy it, create a new document and paste it in. Then I&rsquo;m
going to use Save for Web to export it as a JPEG and use the photoshop
compression tools to make it an acceptable file size. Then I&rsquo;m going to open my
compressed JPEG that I just saved and copy it into my original document. After
lining things up with the compressed JPEG on top I&rsquo;m now ready to Save for Web
and use the PNG 24bit compression. The results are pretty dramatic. What
normally would be a 68k image is now a 48k. In some cases I&rsquo;ve cut files size
in half!</p><p>!http://playgroundblues.com/media/source/png_compress_tutorial.jpg</p><p>I&rsquo;d love to hear other techniques.</p>
]]></content></item><item><title>iPhone dead; $30 rental?</title><link>https://nathan.run/posts/2007/iphone-dead-30-rental/</link><pubDate>Wed, 15 Aug 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/iphone-dead-30-rental/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>This morning I woke up on my own. Normally I hear little crickets chirping around 7am which is my<a href="http://www.apple.com/iphone">iPhone</a> letting me know it&rsquo;s time to face the coming day. This morning, no crickets. At first I thought maybe the battery was flat, but that&rsquo;s not possible. I charged it the day before and didn&rsquo;t put it through any rigorous usage. So<a href="http://docs.info.apple.com/article.html?artnum=305743">iPhone CPR</a> commences.</p><p>First I try a hard restart, holding down the home and on/off button for a few seconds. No dice. Then I plug it in, nothing, another hard restart, nothing. Let it sit for a while plugged in, restart, nothing. She&rsquo;s flat-lined and any amount of resuscitation is not getting her little heart pumping again. By this point it&rsquo;s time for work.</p><p>I roll into work around 9am with a cold iPhone in my pocket. She still feels good but her soul is lost. 10am rolls around, I can&rsquo;t wait. I head to Apple Store on the Plaza hoping they can shock her back into existence. The Genius looks it over, does exactly what I did earlier that morning. Realizes he can&rsquo;t do much so offers to send it back to Apple for repair. This sucks, two days sans phone is not acceptable. I&rsquo;ve never had to send a phone in for repairs, I&rsquo;ve never had a phone just break. I<em>need</em> a phone at all times. I can&rsquo;t say for sure if this is Apple&rsquo;s fault but I know for a fact that I have not done anything out of the ordinary to cause my iPhone to die. So I&rsquo;m forced to pay $30 to rent a phone while mine is being repaired. This is lame.
Apple shouldn&rsquo;t be charging it&rsquo;s loyal $30 to rent an iPhone while theirs is being repaired, especially if the error is on Apple. This doesn&rsquo;t seem like good customer service to me. I would gladly put down a deposit for the rental but I should get that deposit back.</p><p>While my phone travels in her temporary sarcophagus to the bowels of Cupertino I&rsquo;m left with the sting of loosing $30 for an error that is undoubtedly Apples.<strong>grumble</strong>
I would like to thank the guys at the Apple Store, they were very cordial and accommodating.</p><h2 id="update-august-28-2007">Update: August 28, 2007</h2><p>I recieved my &ldquo;fixed&rdquo; phone in the mail via Apple. Only problem was the little guy refused to recognize my SIM card. I tried all sorts of things, even other SIM cards, nothing. Apple was kind enough to replace the phone. What a relief. After about two weeks of usage things were back to normal until this evening while browsing the web I was greeted with a colorful half streaked screen. I don&rsquo;t know about anyone else but the Aurora Borealis belongs in the sky, not on the lower half of my iPhone screen. My luck just gets better by the iPhone.</p>
]]></content></item><item><title>Blueprints are not final</title><link>https://nathan.run/posts/2007/blueprints-are-not-final/</link><pubDate>Fri, 10 Aug 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/blueprints-are-not-final/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>So apparently a little framework called Blueprint (<a href="http://bjorkoy.com/blueprint">http://bjorkoy.com/blueprint</a>)
has reared it&rsquo;s head, born from a few stylesheets that look very familiar. I&rsquo;m
somewhat conflicted with its release because I don&rsquo;t think it should be used.
Don&rsquo;t get me wrong, it&rsquo;s great, but don&rsquo;t use it.</p><p>About five or so months ago I was working on the Journal-World (<a href="http://www.ljworld.com">http://www.ljworld.com</a>)
redesign. News sites tend to be very column heavy and I was getting tired of
writing the same code over and over to accommodate for my design iterations.
One day Jeff (<a href="http://www.jeffcroft.com">http://www.jeffcroft.com</a>) and I discussed some ways to maximized
code reuse and speed up this process of going from Photoshop to markup. Later
that night I sketched out a method for easily defining grid structures and
columns. My attempt was pretty crude and over the next week or so it become a
lot more solid with the help of Jeff and Christian (<a href="http://mintchaos.com/)">http://mintchaos.com/)</a>.
After adding styles for type and common lists we had formed a pretty powerful
time saving solution. I could quickly prototype mockups in hours. The only
problem was it wasn&rsquo;t semantic. Things like span-4, unit, and block polluted
the HTML and CSS.</p><p>At first I was okay with this because my focus was getting the redesign on the
right track, however, looking back it was the wrong decision. Un-semantic code
goes against everything the Standards movement has fought for.</p><p>Do I shed a tear? No. I&rsquo;m not an elitist in this area anymore and I don&rsquo;t go
sniffing for validation errors because I value usability, style and harmony
more. But, the blatant un-semantic-ness of this framework still disgusts me.</p><p>So I was quite surprised and sickened to find out Olav launched this almost
identical framework, Blueprint. Don&rsquo;t get me wrong, it&rsquo;s great for prototyping
but don&rsquo;t settle for it. Good semantic names are worth every penny. Also,
frameworks don&rsquo;t belong in markup languages. They just don&rsquo;t.</p>
]]></content></item><item><title>First impressions</title><link>https://nathan.run/posts/2007/first-impressions/</link><pubDate>Sun, 01 Jul 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/first-impressions/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>How does a machine have soul? We could try and answer by throwing around terms like usefulness, elegance and grace but all our attempts would sound prosaic next to the device I recently became acquainted with. Run and hide Crackberry, the iPhone is here.</p><p>For people to be drooling over a 4.8 ounce device is not unfathomable especially coming from Apple. This is different. During my first hours with the iPhone I literally felt nervous. I felt like I didn&rsquo;t deserve this, it seemed unreal.</p><p>11:00am Saturday: Headed to the coffee house. Do I need my laptop or my notebook, or magazine? Was I really walking down the street listening to my phone? Wait&hellip; Whoa&hellip; phone call.<em>Pinch</em> Hello&hellip;<em>conversation</em> goodbye. Music!!!</p><p>Some of my friends think I&rsquo;m crazy but for a UI designer this is as close to nirvana as I&rsquo;ve ever experienced.</p><p>9:00pm Saturday: Driving to the liquor store. Wait, are they open? iPhone eight ball returns:<a href="http://www2.ljworld.com/marketplace/businesses/mass-beverage/">decidedly so</a>. Again&hellip; I&rsquo;m not worthy.</p><p>It&rsquo;s like those little knowledge cracks in your life are slowly getting sealed. Anything you wanted or needed to know is now within a few gestures. Why remember? Leave it up to the cloud, let your iPhone be your Receiver.</p><p>This device represents a new bar for<a href="http://en.wikipedia.org/wiki/Human-computer_interaction">HCI</a>. It also poses many exciting questions and possibilities. My only hope is that Apple will offer an SDK in the coming months so the collective can contribute. I have confidence the will. Need we be reminded where cover-flow came from? We definitely can&rsquo;t rely on the browser sandbox. It doesn&rsquo;t offer the same grace and fluidity applications garner.</p>
]]></content></item><item><title>The waves of creativity</title><link>https://nathan.run/posts/2007/waves-creativity/</link><pubDate>Thu, 17 May 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/waves-creativity/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>There are a lot of environmental factors that go into fostering a creative
environment. As creative persons mature, we become more in-tune with what works
best for us when it&rsquo;s time to dream up new ideas and solutions. Some of us trek
to coffeehouses while others listen to Bach, Satie or Mogwai. Whatever we do
we&rsquo;re all essentially trying to achieve a certain state of mind.</p><p>Before I go any further here is a quick explanation of the human brain by
neuronal scientist, Richard Restak (/people/richard-m-restak/):</p><p>My very basic understanding is that synapses are essentially electrochemical
connections that vibrate at varying frequencies. These frequencies can be
measured (<a href="http://en.wikipedia.org/wiki/Brainwaves">http://en.wikipedia.org/wiki/Brainwaves</a>) and grouped into four
different categories: Beta, Alpha, Theta and Delta.</p><p>By now you&rsquo;re probably wondering what the hell does this have to do with
creativity. Well let me quickly explain these four &ldquo;states of mind.&rdquo; Beta is
the frequency we find ourselves in all too often. It&rsquo;s associated with being
tense, alert, or afraid. Alpha is a state of relaxation without the loss of
awareness. Theta is a day dream state and Delta is a state of unconsciousness,
a sleep state.</p><p>When we seek out our ideal creative environments we are essentially trying to
lower our brainwaves from Beta to Alpha. This takes time and cannot be done
instantaneously. We can immediately go from Delta to Beta but not vise versa.
We have to be someplace familiar where we feel safe and secure. A place were we
can let our guard down.</p><p>Certain types of people exist in a constant state of Beta, some job types
require it. When you intermingle Beta&rsquo;s with Alpha&rsquo;s and Theta&rsquo;s you undoubtedly
create a source of tension. This is because the Beta&rsquo;s set the tone for the room
and raise everyone to their frequency. This is why you rarely see sales and
account management mixed with designers and illustrators.</p><p>Environment is worth more than any salary. I think most designers would agree
when I say I&rsquo;d much rather be making peanuts at a Googleplex than six figures
at Joe&rsquo;s Banner Ad Emporium.</p><p>More info can be found here:</p><ul><li>What are Brainwaves? (<a href="http://www.doctorhugo.org/brainwaves/brainwaves.html">http://www.doctorhugo.org/brainwaves/brainwaves.html</a>)</li><li>Mozart&rsquo;s Brain and the Fighter Pilot (<a href="http://www.amazon.com/exec/obidos/ASIN/0609604457">http://www.amazon.com/exec/obidos/ASIN/0609604457</a>)</li><li>Brainwave functions (<a href="http://brain.web-us.com/brainwavesfunction.htm">http://brain.web-us.com/brainwavesfunction.htm</a>)</li></ul><p>Disclaimer: I&rsquo;m no scientist. I just think this stuff is interesting and worth
spreading. Correct me in the comments if necessary.</p>
]]></content></item><item><title>Transmedia newspapers</title><link>https://nathan.run/posts/2007/transmedia-newspapers/</link><pubDate>Sun, 06 May 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/transmedia-newspapers/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I just finished reading chapter three of Convergence Culture (/library/books/convergence-culture/)
where Jenkins discusses transmedia storytelling. He focuses on the Matrix
franchise and how it basically rewrote the rules for Hollywoods future. It got
me thinking on my walk home from the coffeehouse, why aren&rsquo;t newspapers doing this?</p><p>We&rsquo;re all familiar with the Matrix and have varying depths of involvement with
it. Most of us have seen the first film, some the second and third but have any
of us played the video game, or seen the Animatrix, or been to Matrix Online
(<a href="http://www.matrixonline.com">http://www.matrixonline.com</a>)? It all represents facets of transmedia
storytelling, the very essence of convergence. Danny Bilson explains the
transmedia relationship between the Matrix film and its game:</p><p>The news is delivered in a parallel fashion which isn&rsquo;t going to last, in fact,
it&rsquo;s what&rsquo;s killing the old product. I can get the same Washington Post online
as I can from the printed version and it&rsquo;s obvious which one I choose. A
transmedia approach needs to replace the parallel delivery model. Give people
up-to-the-minute details online, then print in-depth coverage. Show me how it
relates to current culture with lessons and anecdotes, make it enjoyable and
interesting and if the package is pretty I&rsquo;ll proudly display it on my shelves.</p><p>Why don&rsquo;t newspapers live up to their medium? Print isn&rsquo;t bad, it&rsquo;s fantastic
with huge staying power but you&rsquo;ve gotta produce something I&rsquo;m gonna want to
keep around. I buy books because I want to savor them and I like the way they
look on my shelves. Stop being so throwaway. The print medium isn&rsquo;t dead but
delivering up-to-the-minute news with ink is on life support. The industry
really needs to rethink what gets inked and how their readers will savor it.</p><p>I&rsquo;m not suggesting in-depth storytelling should be relegated to print but it
kinda makes sense as a starting point. I flat out won&rsquo;t stare at a light-bulb
and read pages of a story even if it is interesting. There are things you can
do in print that you simply cannot do online and of you don&rsquo;t believe me get
your hands on a Cranbrook Academy of Art academic catalog.</p><p>A perfect example of news transmedia storytelling is the New York Times
Magazine. It&rsquo;s the only time I buy a newspaper and all I really want is the
magazine. It&rsquo;s kind of like a fortune cookie, I don&rsquo;t really enjoy the cookie
but I savor the fortune. The publication provides select stories that are well
thought out and insightful which usually draw from the previous weeks worth of
news bites. It features great illustrations and photographs. I could get it
online through their Times Select but I&rsquo;d rather not.</p>
]]></content></item><item><title>LJWorld redesign</title><link>https://nathan.run/posts/2007/ljworld-redesign/</link><pubDate>Wed, 02 May 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/ljworld-redesign/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>So for the past five months or so we&rsquo;ve been working on a redesign for the<a href="http://ljworld.com">Lawrence Journal-World</a>. For those of you that don&rsquo;t know, it&rsquo;s a daily newspaper that circulates the town of Lawrence, Kansas. It&rsquo;s quite small compared to surrounding markets which makes it very agile and free from shareholders and their evil agendas.</p><p>I had a feeling this project would be special and challenging but I had no idea of the scale. Turns out, around the same time I was tasked with designing<a href="http://ljworld.com/marketplace">Marketplace</a>, a directory of 4000+ local businesses. I must also mention, news doesn&rsquo;t stop for redesigns. It&rsquo;s definitely a juggling act when your trying to complete a site thats constantly having to push out news features and various timely events like<a href="http://www2.ljworld.com/elections/2007/apr/03/races/lawrence_city_commission/">local elections</a>. There were, shall I say, growing pains.
Details aside, the design is<a href="http://www2.ljworld.com/news/politics/kansas_legislature/">simple</a>. In fact the design is designed to disappear. Content is what really matters so I decided to take an approach that would make the overall design feel supportive rather than overbearing. This isn&rsquo;t easy for anyone and requires extreme discipline. Discipline I never thought I had.</p><p>The site will continue to take shape over time. We&rsquo;re hoping that redesigns are a thing of the past and constant iterations are a thing of the future. We&rsquo;ll see how long that lasts ;-)
This project wouldn&rsquo;t have been possible without the involvement of<a href="http://www.b-list.org/">James Bennett</a>, Dan Cox,<a href="http://www.jeffcroft.com/">Jeff Croft</a>,<a href="http://postneo.com/">Matt Croydon</a>,<a href="http://www.jacobian.org/">Jacob Kaplan-Moss</a>, Joel Mathis,<a href="http://www.mintchaos.com/">Christian Metts</a>, David Ryan, Tom Tobin, all the web producers and all the editors and reporters that allow us to do what we do.</p>
]]></content></item><item><title>Javascript Flash round 2</title><link>https://nathan.run/posts/2007/javascript-flash-round-2/</link><pubDate>Fri, 20 Apr 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/javascript-flash-round-2/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>FIguring out the Javascript/Flash integration kit has lead to a much simpler solution. Looks like Macromedia has slipped in another nugget of usefulness in the Flash 8 release which, I might add, has penetrated the market remarkably fast. It&rsquo;s called External Interface. I gotta thank<a href="http://bobbykellogg.com/">Bobby</a> for finding this one.</p><p>So forget the last post if you&rsquo;re a progressive designer like myself, marching to the Flash 8 bugle. Using the same example as<a href="/posts/2007/mar/18/make-flash-and-javascript-sing/">before</a> replace your Actionscript with the following.</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span><span style="color:#a6e22e">flash</span>.<span style="color:#a6e22e">external</span>.<span style="color:#a6e22e">ExternalInterface</span>;<span style="color:#a6e22e">ExternalInterface</span>.<span style="color:#a6e22e">addCallback</span>(<span style="color:#e6db74">"moveBall"</span>,<span style="color:#66d9ef">this</span>,<span style="color:#a6e22e">moveBall</span>);<span style="color:#66d9ef">function</span><span style="color:#a6e22e">moveBall</span> (<span style="color:#a6e22e">p_x</span><span style="color:#f92672">:</span>Number,<span style="color:#a6e22e">p_y</span><span style="color:#f92672">:</span>Number)<span style="color:#f92672">:</span><span style="color:#a6e22e">Void</span> {<span style="color:#a6e22e">ball_mc</span>.<span style="color:#a6e22e">_x</span><span style="color:#f92672">=</span><span style="color:#a6e22e">p_x</span>;<span style="color:#a6e22e">ball_mc</span>.<span style="color:#a6e22e">_y</span><span style="color:#f92672">=</span><span style="color:#a6e22e">p_y</span>;
}</code></pre></div><p>And then replace your javascript with the following.</p><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">function</span><span style="color:#a6e22e">move_ball</span> () {<span style="color:#a6e22e">x</span><span style="color:#f92672">=</span> document.<span style="color:#a6e22e">moveball</span>.<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">value</span>;<span style="color:#a6e22e">y</span><span style="color:#f92672">=</span> document.<span style="color:#a6e22e">moveball</span>.<span style="color:#a6e22e">y</span>.<span style="color:#a6e22e">value</span>;<span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">navigator</span>.<span style="color:#a6e22e">appName</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#e6db74">"Microsoft"</span>)<span style="color:#f92672">!=</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
window[<span style="color:#e6db74">'ball'</span>].<span style="color:#a6e22e">moveBall</span>(<span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">y</span>);
}<span style="color:#66d9ef">else</span> {
document[<span style="color:#e6db74">'ball'</span>].<span style="color:#a6e22e">moveBall</span>(<span style="color:#a6e22e">x</span>,<span style="color:#a6e22e">y</span>);
}
}</code></pre></div><p>Thats it! Just make sure you name your flash file &ldquo;ball&rdquo; and you&rsquo;ve set allowScriptAccess to all or sameDomain. Get rid of all the extraneous files from before too, you don&rsquo;t need them!<a href="http://www.playgroundblues.com/media/source/JavaScript_Flash_Tutorial2/">View example</a> or<a href="http://www.playgroundblues.com/media/source/JavaScript_Flash_Tutorial2.zip">download</a>.</p>
]]></content></item><item><title>InspectDB to the rescue</title><link>https://nathan.run/posts/2007/inspectdb-rescue/</link><pubDate>Thu, 19 Apr 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/inspectdb-rescue/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>In a past life I used to build admin tools using<a href="http://www.rubyonrails.com">Ruby on Rails</a>. I thoroughly enjoyed spending weekends improving my little tools and libraries but I eventually realized I was spending more time on back-end stuff than front-end. Enter Django. For the past nine months I&rsquo;ve touched nothing but Django so you can imagine how easy it was for me to hop on the Rails bicycle when Dreamhost decided to upgrade Rails.</p><p>You see, I failed to Freeze my Rails releases so they would be impervious to backwards incompatible changes. This presented a problem and I needed a solution like Don Imus needs a job.
I decided it wasn&rsquo;t worth investigating why my code broke between Rails version 1.2 to 1.2.3. My solution was to just rewrite the damn things in Django. While ranting at work about my situation my good friend<a href="http://www.b-list.org">James</a> pointed out a nice little tool called<a href="http://www.djangoproject.com/documentation/django-admin/#inspectdb">inspectdb</a> part of django-admin.py. All I had to do was create a new Django project, point it to my old Rails database and inspectdb spits out all the necessary model code so Django can start using that database.</p><p>I simplified my overly complex Rails admin tool (my fault again) and migrated the new data by setting up a template to print out SQL inserts to match the new simplified database schema. I literally did this in less than two hours on a tool that previously took over two days to build. Not to mention I got better authentication, caching, and peace of mind.
I must point out this is not a failure of Rails, merely a lack of time and commitment on my part. It would, however, be nice if Rails would be more mindful of backwards compatibility :)</p>
]]></content></item><item><title>Bringing back the personal</title><link>https://nathan.run/posts/2007/bringing-back-personal/</link><pubDate>Wed, 11 Apr 2007 00:00:00 -0800</pubDate><guid>https://nathan.run/posts/2007/bringing-back-personal/</guid><content type="html" xml:base="https://nathan.run/" xml:lang="en">&lt;![CDATA[<p>I&rsquo;ve heard wisperings about the death of blogs lately. More and more we see our
favorite writters fading into the ether. This begs the question, what next? What
do we do with the barren ghost towns that once thrived on eager readers making
sure their cache was cleared before stalking their favorites.</p><p>Personal sites should be cornucopias which chronicle our lives. They should be
open sketchbooks crammed with a maze of twists and turns. We should be able to
post without shame or regret things that later on demonstrate our progress. I
want to browse sites like Chris Glass (<a href="http://www.chrisglass.com/">http://www.chrisglass.com/</a>) which feels
like a time capsule where I can rummage around and get a sense of someone&rsquo;s life.
It&rsquo;s incredibly motivating to see his travel logs, journal entries, photos and
favorites. All neatly packaged with thought and purpose. You can tell this site
not only serves his audience, but seems to play an important role for him.</p><p>I think it&rsquo;s obvious that 2007 is a turning point for blogging but it&rsquo;s also a
chance to question what we should strive for in a personal site. Social
networking seems to have decentralized our lives and allowed us to stray farther
away from our personal sites, but thanks to API&rsquo;s we&rsquo;re beginning to gain back
some centralization. We really shouldn&rsquo;t shackle ourselves to the output of an
API, nor should we restrict ourselves to &ldquo;dynamic content&rdquo; that comes from a CMS.
Most of us are highly skilled in HTML/CSS and we shouldn&rsquo;t fear one off pages
and designs. I remember the days of updating my blog via HTML, when I had
something to show I didn&rsquo;t ask how it was going to live in a CMS, I just threw
it up.</p><p>With this in mind I don&rsquo;t exactly know where Playground Blues is headed. There
is a lot of data that I&rsquo;m collecting that I haven&rsquo;t figured out how to share or
even if it makes sense to share. I am, however, eager to explore the Art of
maintaining a personal site and in the coming weeks I&rsquo;d like to discuss this
more along with some of my concerns regarding digital preservation. Stay tuned.</p>
]]></content></item></channel></rss>