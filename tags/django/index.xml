<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>django on Nathan Borror</title><link>https://nathan.run/tags/django/</link><description>Recent content in django on Nathan Borror</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Oct 2012 00:00:00 -0800</lastBuildDate><atom:link href="https://nathan.run/tags/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Ghetto Facebook Registration with Django</title><link>https://nathan.run/2012/ghetto-facebook-registration-with-django/</link><pubDate>Mon, 08 Oct 2012 00:00:00 -0800</pubDate><guid>https://nathan.run/2012/ghetto-facebook-registration-with-django/</guid><description>I&amp;rsquo;m going to quickly walk you through how to build a server-side Facebook registration flow with Django. This is really basic and doesn&amp;rsquo;t rely on special libraries aside from httplib2 and urlib which are pretty standard.
First you need to create an app. I set my App Domain to localhost and Site URL to http://localhost:8000 for development purposes. You&amp;rsquo;ll probably need to do the same if you&amp;rsquo;re using Django&amp;rsquo;s built in development server.</description></item><item><title>Save RAM with mobile middleware</title><link>https://nathan.run/2009/save-ram-with-mobile-middleware/</link><pubDate>Wed, 07 Oct 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/2009/save-ram-with-mobile-middleware/</guid><description>A while back I wrote an article on how to set up a mobile site with Django ../going-mobile. Currently I have a Slicehost account which includes 256MB of RAM. My resources are tight and I really dislike having another set of unnecessary Apache processes for a mobile site that, aside from different templates, is using the same code base. The solution is quite simple, write a middleware.
The following code checks the incoming request for &amp;rsquo;m' or &amp;lsquo;mobile&amp;rsquo; in the domain name.</description></item><item><title>Working with Python and RabbitMQ</title><link>https://nathan.run/2009/working-with-python-and-rabbitmq/</link><pubDate>Wed, 20 May 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/2009/working-with-python-and-rabbitmq/</guid><description>I recently installed RabbitMQ to handle some message queuing needs at Readernaut and thought I&amp;rsquo;d share how everything came together. If you&amp;rsquo;d like to learn more about RabbitMQ please read this.
To use RabbitMQ with python you need py-amqplib because Rabbit uses the AMQP standard. To make amqplib a little easier to use I needed a simple script that did three things:
Easy way to connect to RabbitMQ. Easy way to pull stuff out of the queue.</description></item><item><title>Capturing content in Django templates</title><link>https://nathan.run/2009/capturing-content-in-django-templates/</link><pubDate>Sat, 28 Feb 2009 00:00:00 -0800</pubDate><guid>https://nathan.run/2009/capturing-content-in-django-templates/</guid><description>As a template designer there are times when you have structural code surrounding a block which is waiting on content from a child template. It may look something like:
&amp;lt;div class=&amp;#34;content_title&amp;#34;&amp;gt; {% block content_title %}{% endblock %} &amp;lt;/div&amp;gt; Sometimes this block is never filled so ideally I want the DIV element in this case gone. This isn&amp;rsquo;t easy because there&amp;rsquo;s no way to know whether content is headed towards the block so one solution that I&amp;rsquo;ve used is:</description></item><item><title>Creating a basic API with Django</title><link>https://nathan.run/2008/creating-a-basic-api-with-django/</link><pubDate>Mon, 11 Aug 2008 00:00:00 -0800</pubDate><guid>https://nathan.run/2008/creating-a-basic-api-with-django/</guid><description>Creating a simple public API for your site is a lot easier than you may think with Django. You&amp;rsquo;re basically just creating another view and serving it as XML or JSON instead of HTML.
What&amp;rsquo;s public? Decide what you want to be public. The best answer is the stuff you&amp;rsquo;re already displaying in your HTML templates. Then you need to create an entry in your url conf.
url(r&amp;#39;^api/v1/(?P&amp;lt;username&amp;gt;[-\w]+)/notes/?$&amp;#39;, &amp;#39;readernaut.api.views.user_notes&amp;#39;), Create the view In the case for Readernaut I wanted to provide an XML feed for users notes.</description></item></channel></rss>